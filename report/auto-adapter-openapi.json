{
  "openapi": "3.1.0",
  "info": {
    "title": "",
    "version": "1.0.0"
  },
  "paths": {
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkInterfaces",
        "description": "The parameters and request body are for method: retrieveNetworkInterfaces. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/config": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkInterfacesConfig",
        "description": "The parameters and request body are for method: retrieveNetworkInterfacesConfig. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openconfig-interfaces:config": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            },
                            "nsp-model:network-id": {
                              "type": "string"
                            },
                            "nsp-model:sources": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "openconfig-interfaces:config": {
                    "@": {
                      "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/config",
                      "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/config",
                      "nsp-model:network-id": "92.168.96.58",
                      "nsp-model:sources": [
                        "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/config\",\"interface_name\":\"network-interface\"}"
                      ]
                    },
                    "name": "network-interface",
                    "type": "iana-if-type:propVirtual"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkSubInterfaces",
        "description": "The parameters and request body are for method: retrieveNetworkSubInterfaces. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/{pathv3}/config": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkSubInterfacesConfig",
        "description": "The parameters and request body are for method: retrieveNetworkSubInterfacesConfig. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openconfig-interfaces:config": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            },
                            "nsp-model:network-id": {
                              "type": "string"
                            },
                            "nsp-model:sources": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "index": {
                          "type": "number"
                        },
                        "enabled": {
                          "type": "boolean"
                        },
                        "nsp-openconfig-interfaces-augments:loopback": {
                          "type": "boolean"
                        },
                        "nsp-openconfig-interfaces-augments:flavor": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "openconfig-interfaces:config": {
                    "@": {
                      "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/config",
                      "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='11']/config",
                      "nsp-model:network-id": "92.168.96.58",
                      "nsp-model:sources": [
                        "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/config\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"LdpInterface\"}"
                      ]
                    },
                    "index": 11,
                    "enabled": true,
                    "nsp-openconfig-interfaces-augments:loopback": false,
                    "nsp-openconfig-interfaces-augments:flavor": "REGULAR"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/{pathv3}/state": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkSubInterfacesState",
        "description": "The parameters and request body are for method: retrieveNetworkSubInterfacesState. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openconfig-interfaces:state": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            },
                            "nsp-model:network-id": {
                              "type": "string"
                            },
                            "nsp-model:sources": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "ifindex": {
                          "type": "number"
                        },
                        "oper-status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "openconfig-interfaces:state": {
                    "@": {
                      "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/state",
                      "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='1']/state",
                      "nsp-model:network-id": "92.168.96.58",
                      "nsp-model:sources": [
                        "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/state\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"system\"}"
                      ]
                    },
                    "name": "system",
                    "ifindex": 1,
                    "oper-status": "UP"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/{pathv3}/subinterfaces/{pathv4}/openconfig-if-ip:ipv4/addresses/address": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkSubInterfacesIPv4Addresses",
        "description": "The parameters and request body are for method: retrieveNetworkSubInterfacesIPv4Addresses. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openconfig-interfaces:address": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:network-id": {
                                "type": "string"
                              },
                              "nsp-model:sources": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "ip": {
                            "type": "string"
                          },
                          "nsp-openconfig-if-ip-augments:primary": {
                            "type": "boolean"
                          },
                          "config": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:network-id": {
                                    "type": "string"
                                  },
                                  "nsp-model:sources": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "ip": {
                                "type": "string"
                              },
                              "prefix-length": {
                                "type": "number"
                              }
                            }
                          },
                          "state": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:network-id": {
                                    "type": "string"
                                  },
                                  "nsp-model:sources": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "ip": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "openconfig-interfaces:address": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address",
                        "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='3']/openconfig-if-ip:ipv4/addresses/address[ip='10.26.9.9']",
                        "nsp-model:network-id": "92.168.96.58",
                        "nsp-model:sources": [
                          "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"toNodeC\",\"address_ip\":\"10.26.9.9\"}"
                        ]
                      },
                      "ip": "10.26.9.9",
                      "nsp-openconfig-if-ip-augments:primary": true,
                      "config": {
                        "@": {
                          "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address/config",
                          "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='3']/openconfig-if-ip:ipv4/addresses/address[ip='10.26.9.9']/config",
                          "nsp-model:network-id": "92.168.96.58",
                          "nsp-model:sources": [
                            "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address/config\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"toNodeC\",\"address_ip\":\"10.26.9.9\"}"
                          ]
                        },
                        "ip": "10.26.9.9",
                        "prefix-length": 24
                      },
                      "state": {
                        "@": {
                          "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address/state",
                          "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='3']/openconfig-if-ip:ipv4/addresses/address[ip='10.26.9.9']/state",
                          "nsp-model:network-id": "92.168.96.58",
                          "nsp-model:sources": [
                            "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address/state\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"toNodeC\",\"address_ip\":\"10.26.9.9\"}"
                          ]
                        },
                        "ip": "10.26.9.9"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/{pathv3}/openconfig-if-ip:ipv6/addresses/address": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkSubInterfacesIPv6Addresses",
        "description": "The parameters and request body are for method: retrieveNetworkSubInterfacesIPv6Addresses. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openconfig-interfaces:address": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:network-id": {
                                "type": "string"
                              },
                              "nsp-model:sources": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "ip": {
                            "type": "string"
                          },
                          "config": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:network-id": {
                                    "type": "string"
                                  },
                                  "nsp-model:sources": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "ip": {
                                "type": "string"
                              },
                              "prefix-length": {
                                "type": "number"
                              }
                            }
                          },
                          "state": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:network-id": {
                                    "type": "string"
                                  },
                                  "nsp-model:sources": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "ip": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "openconfig-interfaces:address": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address",
                        "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='18']/openconfig-if-ip:ipv6/addresses/address[ip='2023:db8:3333:4444:5555:6666:7777:8888']",
                        "nsp-model:network-id": "92.168.96.58",
                        "nsp-model:sources": [
                          "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"LogiInv_Intf_TipMust\",\"address_ip\":\"2023:db8:3333:4444:5555:6666:7777:8888\"}"
                        ]
                      },
                      "ip": "2023:db8:3333:4444:5555:6666:7777:8888",
                      "config": {
                        "@": {
                          "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address/config",
                          "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='18']/openconfig-if-ip:ipv6/addresses/address[ip='2023:db8:3333:4444:5555:6666:7777:8888']/config",
                          "nsp-model:network-id": "92.168.96.58",
                          "nsp-model:sources": [
                            "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address/config\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"LogiInv_Intf_TipMust\",\"address_ip\":\"2023:db8:3333:4444:5555:6666:7777:8888\"}"
                          ]
                        },
                        "ip": "2023:db8:3333:4444:5555:6666:7777:8888",
                        "prefix-length": 64
                      },
                      "state": {
                        "@": {
                          "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address/state",
                          "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='18']/openconfig-if-ip:ipv6/addresses/address[ip='2023:db8:3333:4444:5555:6666:7777:8888']/state",
                          "nsp-model:network-id": "92.168.96.58",
                          "nsp-model:sources": [
                            "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address/state\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"LogiInv_Intf_TipMust\",\"address_ip\":\"2023:db8:3333:4444:5555:6666:7777:8888\"}"
                          ]
                        },
                        "ip": "2023:db8:3333:4444:5555:6666:7777:8888"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/{pathv3}/openconfig-if-ip:ipv4/unnumbered": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkInterfacesUnnumbered",
        "description": "The parameters and request body are for method: retrieveNetworkInterfacesUnnumbered. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openconfig-interfaces:unnumbered": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            },
                            "nsp-model:network-id": {
                              "type": "string"
                            }
                          }
                        },
                        "interface-ref": {
                          "type": "object",
                          "properties": {
                            "@": {
                              "type": "object",
                              "properties": {
                                "nsp-model:schema-nodeid": {
                                  "type": "string"
                                },
                                "nsp-model:identifier": {
                                  "type": "string"
                                },
                                "nsp-model:network-id": {
                                  "type": "string"
                                }
                              }
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    },
                                    "nsp-model:network-id": {
                                      "type": "string"
                                    },
                                    "nsp-model:sources": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "interface": {
                                  "type": "string"
                                },
                                "subinterface": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "openconfig-interfaces:unnumbered": {
                    "@": {
                      "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/unnumbered",
                      "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface[index='17']/openconfig-if-ip:ipv4/unnumbered",
                      "nsp-model:network-id": "92.168.96.58"
                    },
                    "interface-ref": {
                      "@": {
                        "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/unnumbered/interface-ref",
                        "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface[index='17']/openconfig-if-ip:ipv4/unnumbered/interface-ref",
                        "nsp-model:network-id": "92.168.96.58"
                      },
                      "config": {
                        "@": {
                          "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/unnumbered/interface-ref/config",
                          "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='17']/openconfig-if-ip:ipv4/unnumbered/interface-ref/config",
                          "nsp-model:network-id": "92.168.96.58",
                          "nsp-model:sources": [
                            "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/unnumbered/interface-ref/config\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"LogiInv_UnNumbered_Interface\"}"
                          ]
                        },
                        "interface": "network-interface",
                        "subinterface": 16
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/{pathv3}/openconfig-if-ip:ipv4/unnumbered/interface-ref": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkInterfacesUnnumberedIntf",
        "description": "The parameters and request body are for method: retrieveNetworkInterfacesUnnumberedIntf. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openconfig-interfaces:interface-ref": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            },
                            "nsp-model:network-id": {
                              "type": "string"
                            }
                          }
                        },
                        "config": {
                          "type": "object",
                          "properties": {
                            "@": {
                              "type": "object",
                              "properties": {
                                "nsp-model:schema-nodeid": {
                                  "type": "string"
                                },
                                "nsp-model:identifier": {
                                  "type": "string"
                                },
                                "nsp-model:network-id": {
                                  "type": "string"
                                },
                                "nsp-model:sources": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "interface": {
                              "type": "string"
                            },
                            "subinterface": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "openconfig-interfaces:interface-ref": {
                    "@": {
                      "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/unnumbered/interface-ref",
                      "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface[index='2']/openconfig-if-ip:ipv4/unnumbered/interface-ref",
                      "nsp-model:network-id": "92.168.96.58"
                    },
                    "config": {
                      "@": {
                        "nsp-model:schema-nodeid": "/ietf-network:networks/network/node/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/unnumbered/interface-ref/config",
                        "nsp-model:identifier": "/ietf-network:networks/network[network-id='1']/node[node-id='92.168.96.58']/ne-management-nm:commissioning-configs/ne-interfaces/logical-interfaces/interfaces-root/openconfig-interfaces:interfaces/interface[name='network-interface']/subinterfaces/subinterface[index='2']/openconfig-if-ip:ipv4/unnumbered/interface-ref/config",
                        "nsp-model:network-id": "92.168.96.58",
                        "nsp-model:sources": [
                          "fdn:app:mdm-ami:{\"_NE_\":\"92.168.96.58\",\"classId\":\"openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/unnumbered/interface-ref/config\",\"interface_name\":\"network-interface\",\"subinterface_index\":\"toNodeB\"}"
                        ]
                      },
                      "interface": "network-interface",
                      "subinterface": 0
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ne-management-nm:commissioning-configs/protocols-config/protocol-root/openconfig-network-instance:network-instances/network-instance": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveNetworkInstance",
        "description": "The parameters and request body are for method: retrieveNetworkInstance. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-admin-resync:resync-policies/mdm/{pathv1}/{pathv2}/{pathv3}/entity": {
      "get": {
        "tags": [
          "IETFLogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveResyncPolicyNodeVersionEntity",
        "description": "The parameters and request body are for method: retrieveResyncPolicyNodeVersionEntity. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-admin-resync:entity": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              }
                            }
                          },
                          "period": {
                            "type": "number"
                          },
                          "admin-state": {
                            "type": "string"
                          },
                          "entity-type": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-admin-resync:entity": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/interfaces/interface/peers']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/interfaces/interface/peers"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/interfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/interfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/interfaces/interface/peers/peer']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/interfaces/interface/peers/peer"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels/level']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels/level"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/interfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/interfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors/neighbor']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors/neighbor"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/global']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/global"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates/bfd-template']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates/bfd-template"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors/reflector']"
                      },
                      "description": "BFD Seamless BFDs Policy",
                      "period": 10,
                      "admin-state": "enabled",
                      "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors/reflector"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors/neighbor']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors/neighbor"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-acl:/acl/acl-sets/acl-set/acl-entries']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-acl:/acl/acl-sets/acl-set/acl-entries"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-acl:/acl/acl-sets/acl-set/acl-entries/acl-entry']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-acl:/acl/acl-sets/acl-set/acl-entries/acl-entry"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.5.R2']/entity[entity-type='openconfig-acl:/acl/acl-sets/acl-set']"
                      },
                      "period": 1440,
                      "admin-state": "disabled",
                      "entity-type": "openconfig-acl:/acl/acl-sets/acl-set"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ibn:ibn": {
      "post": {
        "tags": [
          "Intent"
        ],
        "operationId": "createUsingIntent",
        "description": "The parameters and request body are for method: createUsingIntent. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/ibn:ibn/{pathv1}/synchronize": {
      "post": {
        "tags": [
          "Intent"
        ],
        "operationId": "synchronizeIntent",
        "description": "The parameters and request body are for method: synchronizeIntent. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object"
                        },
                        "errors": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "data": {},
                    "errors": {}
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ibn:ibn/{pathv1}": {
      "get": {
        "tags": [
          "Intent"
        ],
        "operationId": "getIntent",
        "description": "The parameters and request body are for method: getIntent. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ibn:intent": {
                      "type": "object",
                      "properties": {
                        "sync-timestamp": {
                          "type": "string"
                        },
                        "actual-intent-type-version": {
                          "type": "number"
                        },
                        "intent-specific-data": {
                          "type": "object",
                          "properties": {
                            "ztp-profile:ztp-profile": {
                              "type": "object",
                              "properties": {
                                "dns-primary-address": {
                                  "type": "string"
                                },
                                "md-management-connection": {
                                  "type": "string"
                                },
                                "dns-domain": {
                                  "type": "string"
                                },
                                "node-type": {
                                  "type": "string"
                                },
                                "mdm-discovery-rule-profile": {
                                  "type": "string"
                                },
                                "ip-static-route": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ip-static-route-next-hop": {
                                        "type": "string"
                                      },
                                      "ip-static-route-mask": {
                                        "type": "number"
                                      },
                                      "ip-static-route-destination": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "ietf-yang-library:yang-library": {
                              "type": "object",
                              "properties": {
                                "schema": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "module-set": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "module-set": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "import-only-module": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "namespace": {
                                              "type": "string"
                                            },
                                            "revision": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "module": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "namespace": {
                                              "type": "string"
                                            },
                                            "revision": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "datastore": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "schema": {
                                        "type": "string"
                                      },
                                      "name": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "content-id": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "supports-health": {
                          "type": "boolean"
                        },
                        "error": {
                          "type": "boolean"
                        },
                        "intent-type": {
                          "type": "string"
                        },
                        "target": {
                          "type": "string"
                        },
                        "required-network-state": {
                          "type": "string"
                        },
                        "blocked": {
                          "type": "boolean"
                        },
                        "intent-type-label": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "sync-to-ES-failed": {
                          "type": "boolean"
                        },
                        "aligned": {
                          "type": "boolean"
                        },
                        "intent-type-version": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ibn:intent": {
                    "sync-timestamp": "2023-11-28T16:04:59+00:00",
                    "actual-intent-type-version": 1,
                    "intent-specific-data": {
                      "ztp-profile:ztp-profile": {
                        "dns-primary-address": "172.16.182.55",
                        "md-management-connection": "out-of-band",
                        "dns-domain": "nokia",
                        "node-type": "7250_IXR",
                        "mdm-discovery-rule-profile": "inband",
                        "ip-static-route": [
                          {
                            "ip-static-route-next-hop": "138.120.182.1",
                            "ip-static-route-mask": 24,
                            "ip-static-route-destination": "138.120.182.0"
                          }
                        ]
                      },
                      "ietf-yang-library:yang-library": {
                        "schema": [
                          {
                            "module-set": [
                              "running"
                            ],
                            "name": "running"
                          }
                        ],
                        "module-set": [
                          {
                            "import-only-module": [
                              {
                                "name": "ietf-inet-types",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
                                "revision": "2013-07-15"
                              },
                              {
                                "name": "anv-types",
                                "namespace": "http://www.nokia.com/management-solutions/anv-types",
                                "revision": "2015-08-13"
                              },
                              {
                                "name": "anv-yang-extensions",
                                "namespace": "http://www.nokia.com/management-solutions/anv-yang-extensions",
                                "revision": "2016-01-07"
                              },
                              {
                                "name": "ibn-extensions",
                                "namespace": "http://www.nokia.com/management-solutions/ibn-extensions",
                                "revision": "2020-10-13"
                              },
                              {
                                "name": "webfwk-ui-metadata",
                                "namespace": "http://www.nokia.com/management-solutions/webfwk/ui-metadata",
                                "revision": "2021-10-07"
                              },
                              {
                                "name": "ietf-yang-types",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
                                "revision": "2013-07-15"
                              },
                              {
                                "name": "ietf-datastores",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-datastores",
                                "revision": "2018-02-14"
                              },
                              {
                                "name": "ietf-yang-revisions",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-revisions",
                                "revision": "2021-06-30"
                              },
                              {
                                "name": "ietf-yang-semver",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-semver",
                                "revision": "2020-06-30"
                              }
                            ],
                            "module": [
                              {
                                "name": "ietf-inet-types",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
                                "revision": "2013-07-15"
                              },
                              {
                                "name": "ietf-yang-library",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-library",
                                "revision": "2019-01-04"
                              },
                              {
                                "name": "anv-types",
                                "namespace": "http://www.nokia.com/management-solutions/anv-types",
                                "revision": "2015-08-13"
                              },
                              {
                                "name": "anv-yang-extensions",
                                "namespace": "http://www.nokia.com/management-solutions/anv-yang-extensions",
                                "revision": "2016-01-07"
                              },
                              {
                                "name": "ibn-extensions",
                                "namespace": "http://www.nokia.com/management-solutions/ibn-extensions",
                                "revision": "2020-10-13"
                              },
                              {
                                "name": "webfwk-ui-metadata",
                                "namespace": "http://www.nokia.com/management-solutions/webfwk/ui-metadata",
                                "revision": "2021-10-07"
                              },
                              {
                                "name": "ietf-yang-types",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
                                "revision": "2013-07-15"
                              },
                              {
                                "name": "ztp-profile",
                                "namespace": "http://www.nokia.com/management-solutions/ztp-profile",
                                "revision": "2020-11-01"
                              },
                              {
                                "name": "ietf-datastores",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-datastores",
                                "revision": "2018-02-14"
                              },
                              {
                                "name": "ietf-yang-revisions",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-revisions",
                                "revision": "2021-06-30"
                              },
                              {
                                "name": "ietf-yang-semver",
                                "namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-semver",
                                "revision": "2020-06-30"
                              }
                            ],
                            "name": "running"
                          }
                        ],
                        "datastore": [
                          {
                            "schema": "running",
                            "name": "ietf-yang-library:running"
                          }
                        ],
                        "content-id": "786176111eccc0aef54d5824e48fafe8e65df7742bbc06c11ef9248246a18985"
                      }
                    },
                    "supports-health": true,
                    "error": false,
                    "intent-type": "ztp-profile",
                    "target": "TestProfile2",
                    "required-network-state": "active",
                    "blocked": false,
                    "intent-type-label": [
                      "ztp",
                      "nsp"
                    ],
                    "sync-to-ES-failed": false,
                    "aligned": true,
                    "intent-type-version": 1
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "put": {
        "tags": [
          "Intent"
        ],
        "operationId": "modifyIntent",
        "description": "The parameters and request body are for method: modifyIntent. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Intent"
        ],
        "operationId": "deleteIntent",
        "description": "The parameters and request body are for method: deleteIntent. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-ne-control:ne-control/autodiscovery-ne": {
      "get": {
        "tags": [
          "ManageZTPListFromDeviceAdministrator"
        ],
        "operationId": "getZTPListFromDeviceAdministrator",
        "description": "The parameters and request body are for method: getZTPListFromDeviceAdministrator. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-ne-control:autodiscovery-ne": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "serial-number": {
                            "type": "string"
                          },
                          "ne-type": {
                            "type": "string"
                          },
                          "discovery-timestamp": {
                            "type": "number"
                          },
                          "system-ip": {
                            "type": "string"
                          },
                          "ztp-profile-name": {
                            "type": "string"
                          },
                          "status-details": {
                            "type": "string"
                          },
                          "mgmt-ip": {
                            "type": "string"
                          },
                          "mgmt-mode": {
                            "type": "string"
                          },
                          "discovery-status": {
                            "type": "string"
                          },
                          "ztp-primary-file": {
                            "type": "string"
                          },
                          "ne-name": {
                            "type": "string"
                          },
                          "disc-rule-name": {
                            "type": "string"
                          },
                          "ztp-files": {
                            "type": "string"
                          },
                          "ne-version": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-ne-control:autodiscovery-ne": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-ne-control:ne-control/autodiscovery-ne",
                        "nsp-model:identifier": "/nsp-ne-control:ne-control/autodiscovery-ne[mgmt-ip='135.6.6.6']",
                        "nsp-model:creation-time": "2023-11-20T21:06:12.735Z",
                        "nsp-model:last-modified-time": "2023-11-23T17:48:41.914Z"
                      },
                      "serial-number": "34as234",
                      "ne-type": "7250_IXR",
                      "discovery-timestamp": 1700761715130,
                      "system-ip": "35.6.6.6",
                      "ztp-profile-name": "mdm1",
                      "status-details": "",
                      "mgmt-ip": "135.6.6.6",
                      "mgmt-mode": "model-driven",
                      "discovery-status": "failure",
                      "ztp-primary-file": "/ztp/Nokia/7250_IXR/test5_provisioning.cfg",
                      "ne-name": "test5",
                      "disc-rule-name": "ztp",
                      "ztp-files": "/ztp/Nokia/7250_IXR/test5_provisioning.cfg;/ztp/Nokia/7250_IXR/test5_config.cfg;",
                      "ne-version": ""
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-ne-control:ne-control/autodiscovery-ne",
                        "nsp-model:identifier": "/nsp-ne-control:ne-control/autodiscovery-ne[mgmt-ip='136.1.1.1']",
                        "nsp-model:creation-time": "2023-11-20T21:06:16.067Z",
                        "nsp-model:last-modified-time": "2023-11-23T17:48:41.914Z"
                      },
                      "serial-number": "test22",
                      "ne-type": "7250_IXR",
                      "discovery-timestamp": 1700761715331,
                      "system-ip": "136.1.1.1",
                      "ztp-profile-name": "mdm1",
                      "status-details": "",
                      "mgmt-ip": "136.1.1.1",
                      "mgmt-mode": "model-driven",
                      "discovery-status": "failure",
                      "ztp-primary-file": "/ztp/Nokia/7250_IXR/test22_provisioning.cfg",
                      "ne-name": "test22",
                      "disc-rule-name": "ztp",
                      "ztp-files": "/ztp/Nokia/7250_IXR/test22_provisioning.cfg;/ztp/Nokia/7250_IXR/test22_config.cfg;",
                      "ne-version": ""
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-ne-control:ne-control/autodiscovery-ne",
                        "nsp-model:identifier": "/nsp-ne-control:ne-control/autodiscovery-ne[mgmt-ip='4.4.4.4']",
                        "nsp-model:creation-time": "2023-11-20T21:06:20.288Z",
                        "nsp-model:last-modified-time": "2023-11-23T17:48:41.917Z"
                      },
                      "serial-number": "test323",
                      "ne-type": "7250_IXR",
                      "discovery-timestamp": 1700761715501,
                      "system-ip": "4.4.4.4",
                      "ztp-profile-name": "mdm1",
                      "status-details": "",
                      "mgmt-ip": "4.4.4.4",
                      "mgmt-mode": "model-driven",
                      "discovery-status": "failure",
                      "ztp-primary-file": "/ztp/Nokia/7250_IXR/test2323_provisioning.cfg",
                      "ne-name": "test2323",
                      "disc-rule-name": "ztp",
                      "ztp-files": "/ztp/Nokia/7250_IXR/test2323_provisioning.cfg;/ztp/Nokia/7250_IXR/test2323_config.cfg;",
                      "ne-version": ""
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-ne-control:ne-control/autodiscovery-ne",
                        "nsp-model:identifier": "/nsp-ne-control:ne-control/autodiscovery-ne[mgmt-ip='135.121.156.67']",
                        "nsp-model:creation-time": "2023-11-20T21:11:06.491Z",
                        "nsp-model:last-modified-time": "2023-11-20T21:12:04.343Z"
                      },
                      "serial-number": "teste",
                      "ne-type": "7250_IXR",
                      "discovery-timestamp": 1700514717320,
                      "system-ip": "35.121.156.67",
                      "ztp-profile-name": "mdm1",
                      "status-details": "",
                      "mgmt-ip": "135.121.156.67",
                      "mgmt-mode": "model-driven",
                      "discovery-status": "success",
                      "ztp-primary-file": "/ztp/Nokia/7250_IXR/teste_provisioning.cfg",
                      "ne-name": "teste",
                      "disc-rule-name": "ztp",
                      "ztp-files": "/ztp/Nokia/7250_IXR/teste_provisioning.cfg;/ztp/Nokia/7250_IXR/teste_config.cfg;",
                      "ne-version": ""
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-ne-control:ne-control/autodiscovery-ne",
                        "nsp-model:identifier": "/nsp-ne-control:ne-control/autodiscovery-ne[mgmt-ip='88.88.8.1']",
                        "nsp-model:creation-time": "2023-11-24T14:42:09.020Z",
                        "nsp-model:last-modified-time": "2023-11-24T14:42:09.048Z"
                      },
                      "serial-number": "yyyy",
                      "ne-type": "7250_IXR",
                      "discovery-timestamp": 0,
                      "system-ip": "8.88.8.1",
                      "ztp-profile-name": "mdm1",
                      "status-details": "",
                      "mgmt-ip": "88.88.8.1",
                      "mgmt-mode": "model-driven",
                      "discovery-status": "pending",
                      "ztp-primary-file": "/ztp/Nokia/7250_IXR/yyyy_provisioning.cfg",
                      "ne-name": "yyyy",
                      "disc-rule-name": "ztp",
                      "ztp-files": "/ztp/Nokia/7250_IXR/yyyy_provisioning.cfg;/ztp/Nokia/7250_IXR/yyyy_config.cfg;",
                      "ne-version": ""
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/:8545/restconf/data/nsp-ne-control:ne-control": {
      "post": {
        "tags": [
          "ManageZTPListFromDeviceAdministrator"
        ],
        "operationId": "devAdminCreateAutodiscoveryNe",
        "description": "The parameters and request body are for method: devAdminCreateAutodiscoveryNe. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-ne-control:ne-control/{pathv1}": {
      "patch": {
        "tags": [
          "ManageZTPListFromDeviceAdministrator"
        ],
        "operationId": "devAdminUpdateAutodiscoveryNe",
        "description": "The parameters and request body are for method: devAdminUpdateAutodiscoveryNe. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ManageZTPListFromDeviceAdministrator"
        ],
        "operationId": "devAdminDeleteAutodiscoverNe",
        "description": "The parameters and request body are for method: devAdminDeleteAutodiscoverNe. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-resource-pool:resource-pools": {
      "post": {
        "tags": [
          "AddressPool"
        ],
        "operationId": "createIPv4AddressPool",
        "description": "The parameters and request body are for method: createIPv4AddressPool. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-resource-pool:resource-pools/{pathv1}": {
      "get": {
        "tags": [
          "AddressPool"
        ],
        "operationId": "getIPv4AddressPool",
        "description": "The parameters and request body are for method: getIPv4AddressPool. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-resource-pool:ip-resource-pools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "scope": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "delete-when-empty": {
                            "type": "boolean"
                          },
                          "ip-pool-spec": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  }
                                }
                              },
                              "ip-masks": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "ip-mask": {
                                      "type": "string"
                                    },
                                    "purposes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "statistics": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "capacity": {
                                "type": "string"
                              },
                              "usage": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-resource-pool:ip-resource-pools": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-resource-pool:resource-pools/ip-resource-pools",
                        "nsp-model:identifier": "/nsp-resource-pool:resource-pools/ip-resource-pools[name='ip-2'][scope='net-1']",
                        "nsp-model:creation-time": "2023-11-28T16:23:07.535Z",
                        "nsp-model:last-modified-time": "2023-11-28T16:23:07.535Z"
                      },
                      "name": "ip-2",
                      "scope": "net-1",
                      "type": "nsp-resource-pool-utils:ip-address-prefix",
                      "description": "this is a Hosts IP pool",
                      "delete-when-empty": false,
                      "ip-pool-spec": {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-resource-pool:resource-pools/ip-resource-pools/ip-pool-spec",
                          "nsp-model:identifier": "/nsp-resource-pool:resource-pools/ip-resource-pools[name='ip-2'][scope='net-1']/ip-pool-spec"
                        },
                        "ip-masks": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-resource-pool:resource-pools/ip-resource-pools/ip-pool-spec/ip-masks",
                              "nsp-model:identifier": "/nsp-resource-pool:resource-pools/ip-resource-pools[name='ip-2'][scope='net-1']/ip-pool-spec/ip-masks[ip-mask='10.0.0.28/31']",
                              "nsp-model:creation-time": "2023-11-28T16:23:07.535Z",
                              "nsp-model:last-modified-time": "2023-11-28T16:23:07.535Z"
                            },
                            "ip-mask": "10.0.0.28/31",
                            "purposes": [
                              "default"
                            ]
                          }
                        ]
                      },
                      "statistics": {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-resource-pool:resource-pools/ip-resource-pools/statistics",
                          "nsp-model:identifier": "/nsp-resource-pool:resource-pools/ip-resource-pools[name='ip-2'][scope='net-1']/statistics",
                          "nsp-model:creation-time": "2023-11-28T16:23:30.982Z",
                          "nsp-model:last-modified-time": "2023-11-28T16:23:30.982Z"
                        },
                        "capacity": "2",
                        "usage": "0.00 %"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-resource-pool:resource-pools/{pathv1}/obtain-value-from-pool": {
      "post": {
        "tags": [
          "AddressPool"
        ],
        "operationId": "obtainValueFromPool",
        "description": "The parameters and request body are for method: obtainValueFromPool. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-resource-pool:output": {
                      "type": "object",
                      "properties": {
                        "consumed-resources": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "type": "object",
                                "properties": {
                                  "@": {
                                    "type": "object",
                                    "properties": {
                                      "nsp-model:schema-nodeid": {
                                        "type": "string"
                                      },
                                      "nsp-model:identifier": {
                                        "type": "string"
                                      },
                                      "nsp-model:creation-time": {
                                        "type": "string"
                                      },
                                      "nsp-model:last-modified-time": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "purpose": {
                                    "type": "string"
                                  },
                                  "ip-mask": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "registered-date": {
                                    "type": "string"
                                  },
                                  "owner": {
                                    "type": "string"
                                  },
                                  "confirmed": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-resource-pool:output": {
                    "consumed-resources": [
                      {
                        "0": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-resource-pool:resource-pools/ip-resource-pools/consumed-resources",
                            "nsp-model:identifier": "/nsp-resource-pool:resource-pools/ip-resource-pools[name='ip-2'][scope='net-1']/consumed-resources[value='10.0.0.28/32']",
                            "nsp-model:creation-time": "2023-11-28T16:24:07.141Z",
                            "nsp-model:last-modified-time": "2023-11-28T16:24:07.141Z"
                          },
                          "purpose": "undefined",
                          "ip-mask": "10.0.0.28/31",
                          "value": "10.0.0.28/32",
                          "registered-date": "2023-11-28T16:24:07.136Z",
                          "owner": "ztp",
                          "confirmed": true
                        }
                      }
                    ]
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-inventory:find": {
      "post": {
        "tags": [
          "LogicalInventoryRestconfAPI"
        ],
        "operationId": "nspInventoryFindWithFilter",
        "description": "The parameters and request body are for method: nspInventoryFindWithFilter. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-inventory:output": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:network-id": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:sources": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "config": {
                                "type": "object",
                                "properties": {
                                  "@": {
                                    "type": "object",
                                    "properties": {
                                      "nsp-model:schema-nodeid": {
                                        "type": "string"
                                      },
                                      "nsp-model:identifier": {
                                        "type": "string"
                                      },
                                      "nsp-model:network-id": {
                                        "type": "string"
                                      },
                                      "nsp-model:creation-time": {
                                        "type": "string"
                                      },
                                      "nsp-model:last-modified-time": {
                                        "type": "string"
                                      },
                                      "nsp-model:sources": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "state": {
                                "type": "object",
                                "properties": {
                                  "@": {
                                    "type": "object",
                                    "properties": {
                                      "nsp-model:schema-nodeid": {
                                        "type": "string"
                                      },
                                      "nsp-model:identifier": {
                                        "type": "string"
                                      },
                                      "nsp-model:network-id": {
                                        "type": "string"
                                      },
                                      "nsp-model:creation-time": {
                                        "type": "string"
                                      },
                                      "nsp-model:last-modified-time": {
                                        "type": "string"
                                      },
                                      "nsp-model:sources": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "acl-entries": {
                                "type": "object",
                                "properties": {
                                  "@": {
                                    "type": "object",
                                    "properties": {
                                      "nsp-model:schema-nodeid": {
                                        "type": "string"
                                      },
                                      "nsp-model:identifier": {
                                        "type": "string"
                                      },
                                      "nsp-model:network-id": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "acl-entry": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "@": {
                                          "type": "object",
                                          "properties": {
                                            "nsp-model:schema-nodeid": {
                                              "type": "string"
                                            },
                                            "nsp-model:identifier": {
                                              "type": "string"
                                            },
                                            "nsp-model:network-id": {
                                              "type": "string"
                                            },
                                            "nsp-model:creation-time": {
                                              "type": "string"
                                            },
                                            "nsp-model:last-modified-time": {
                                              "type": "string"
                                            },
                                            "nsp-model:sources": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "sequence-id": {
                                          "type": "number"
                                        },
                                        "config": {
                                          "type": "object",
                                          "properties": {
                                            "@": {
                                              "type": "object",
                                              "properties": {
                                                "nsp-model:schema-nodeid": {
                                                  "type": "string"
                                                },
                                                "nsp-model:identifier": {
                                                  "type": "string"
                                                },
                                                "nsp-model:network-id": {
                                                  "type": "string"
                                                },
                                                "nsp-model:creation-time": {
                                                  "type": "string"
                                                },
                                                "nsp-model:last-modified-time": {
                                                  "type": "string"
                                                },
                                                "nsp-model:sources": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "sequence-id": {
                                              "type": "number"
                                            },
                                            "description": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "state": {
                                          "type": "object",
                                          "properties": {
                                            "@": {
                                              "type": "object",
                                              "properties": {
                                                "nsp-model:schema-nodeid": {
                                                  "type": "string"
                                                },
                                                "nsp-model:identifier": {
                                                  "type": "string"
                                                },
                                                "nsp-model:network-id": {
                                                  "type": "string"
                                                },
                                                "nsp-model:creation-time": {
                                                  "type": "string"
                                                },
                                                "nsp-model:last-modified-time": {
                                                  "type": "string"
                                                },
                                                "nsp-model:sources": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "sequence-id": {
                                              "type": "number"
                                            },
                                            "description": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "actions": {
                                          "type": "object",
                                          "properties": {
                                            "@": {
                                              "type": "object",
                                              "properties": {
                                                "nsp-model:schema-nodeid": {
                                                  "type": "string"
                                                },
                                                "nsp-model:identifier": {
                                                  "type": "string"
                                                },
                                                "nsp-model:network-id": {
                                                  "type": "string"
                                                },
                                                "nsp-model:sources": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "state": {
                                              "type": "object",
                                              "properties": {
                                                "@": {
                                                  "type": "object",
                                                  "properties": {
                                                    "nsp-model:schema-nodeid": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:identifier": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:network-id": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:creation-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:last-modified-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:sources": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "forwarding-action": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "config": {
                                              "type": "object",
                                              "properties": {
                                                "@": {
                                                  "type": "object",
                                                  "properties": {
                                                    "nsp-model:schema-nodeid": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:identifier": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:network-id": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:creation-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:last-modified-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:sources": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "forwarding-action": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "ipv6": {
                                          "type": "object",
                                          "properties": {
                                            "@": {
                                              "type": "object",
                                              "properties": {
                                                "nsp-model:schema-nodeid": {
                                                  "type": "string"
                                                },
                                                "nsp-model:identifier": {
                                                  "type": "string"
                                                },
                                                "nsp-model:network-id": {
                                                  "type": "string"
                                                },
                                                "nsp-model:sources": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "state": {
                                              "type": "object",
                                              "properties": {
                                                "@": {
                                                  "type": "object",
                                                  "properties": {
                                                    "nsp-model:schema-nodeid": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:identifier": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:network-id": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:creation-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:last-modified-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:sources": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "source-address": {
                                                  "type": "string"
                                                },
                                                "destination-address": {
                                                  "type": "string"
                                                },
                                                "dscp": {
                                                  "type": "number"
                                                },
                                                "protocol": {
                                                  "type": "number"
                                                }
                                              }
                                            },
                                            "config": {
                                              "type": "object",
                                              "properties": {
                                                "@": {
                                                  "type": "object",
                                                  "properties": {
                                                    "nsp-model:schema-nodeid": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:identifier": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:network-id": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:creation-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:last-modified-time": {
                                                      "type": "string"
                                                    },
                                                    "nsp-model:sources": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "source-address": {
                                                  "type": "string"
                                                },
                                                "destination-address": {
                                                  "type": "string"
                                                },
                                                "dscp": {
                                                  "type": "number"
                                                },
                                                "protocol": {
                                                  "type": "number"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "end-index": {
                          "type": "number"
                        },
                        "start-index": {
                          "type": "number"
                        },
                        "total-count": {
                          "type": "number"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-inventory:output": {
                    "data": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set",
                          "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']",
                          "nsp-model:network-id": "92.168.98.156",
                          "nsp-model:creation-time": "2023-11-13T12:42:58.838Z",
                          "nsp-model:last-modified-time": "2023-11-13T12:42:58.838Z",
                          "nsp-model:sources": [
                            "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2"
                          ]
                        },
                        "name": "2",
                        "type": "openconfig-acl:ACL_IPV6",
                        "config": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/config",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/config",
                            "nsp-model:network-id": "92.168.98.156",
                            "nsp-model:creation-time": "2023-11-13T12:42:58.838Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:42:58.838Z",
                            "nsp-model:sources": [
                              "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2"
                            ]
                          },
                          "name": "2",
                          "type": "openconfig-acl:ACL_IPV6",
                          "description": "IPv6Filter"
                        },
                        "state": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/state",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/state",
                            "nsp-model:network-id": "92.168.98.156",
                            "nsp-model:creation-time": "2023-11-13T12:42:58.838Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:42:58.838Z",
                            "nsp-model:sources": [
                              "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2"
                            ]
                          },
                          "name": "2",
                          "type": "openconfig-acl:ACL_IPV6",
                          "description": "IPv6Filter"
                        },
                        "acl-entries": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries",
                            "nsp-model:network-id": "92.168.98.156"
                          },
                          "acl-entry": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry",
                                "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']",
                                "nsp-model:network-id": "92.168.98.156",
                                "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                "nsp-model:sources": [
                                  "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                ]
                              },
                              "sequence-id": 2,
                              "config": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/config",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/config",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                  ]
                                },
                                "sequence-id": 2,
                                "description": "IPv6Entry"
                              },
                              "state": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/state",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/state",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                  ]
                                },
                                "sequence-id": 2,
                                "description": "IPv6Entry"
                              },
                              "actions": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/actions",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                  ]
                                },
                                "state": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/actions/state",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                    ]
                                  },
                                  "forwarding-action": "openconfig-acl:DROP"
                                },
                                "config": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/actions/config",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                    ]
                                  },
                                  "forwarding-action": "openconfig-acl:DROP"
                                }
                              },
                              "ipv6": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/ipv6",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                  ]
                                },
                                "state": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/ipv6/state",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                    ]
                                  },
                                  "source-address": "1:0:0:0:0:0:0:1/64",
                                  "destination-address": "2:0:0:0:0:0:0:2/64",
                                  "dscp": 0,
                                  "protocol": 41
                                },
                                "config": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='2'][type='openconfig-acl:ACL_IPV6']/acl-entries/acl-entry[sequence-id='2']/ipv6/config",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IPv6 Filter:2:entry-2"
                                    ]
                                  },
                                  "source-address": "1:0:0:0:0:0:0:1/64",
                                  "destination-address": "2:0:0:0:0:0:0:2/64",
                                  "dscp": 0,
                                  "protocol": 41
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set",
                          "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']",
                          "nsp-model:network-id": "92.168.98.156",
                          "nsp-model:creation-time": "2023-11-13T12:43:00.783Z",
                          "nsp-model:last-modified-time": "2023-11-13T12:43:00.783Z",
                          "nsp-model:sources": [
                            "fdn:realm:sam:network:92.168.98.156:IP Filter:1"
                          ]
                        },
                        "name": "1",
                        "type": "openconfig-acl:ACL_IPV4",
                        "config": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/config",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/config",
                            "nsp-model:network-id": "92.168.98.156",
                            "nsp-model:creation-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:sources": [
                              "fdn:realm:sam:network:92.168.98.156:IP Filter:1"
                            ]
                          },
                          "name": "1",
                          "type": "openconfig-acl:ACL_IPV4",
                          "description": "IPv4Filter"
                        },
                        "state": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/state",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/state",
                            "nsp-model:network-id": "92.168.98.156",
                            "nsp-model:creation-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:sources": [
                              "fdn:realm:sam:network:92.168.98.156:IP Filter:1"
                            ]
                          },
                          "name": "1",
                          "type": "openconfig-acl:ACL_IPV4",
                          "description": "IPv4Filter"
                        },
                        "acl-entries": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries",
                            "nsp-model:network-id": "92.168.98.156"
                          },
                          "acl-entry": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry",
                                "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']",
                                "nsp-model:network-id": "92.168.98.156",
                                "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                "nsp-model:sources": [
                                  "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                ]
                              },
                              "sequence-id": 1,
                              "config": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/config",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/config",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                  ]
                                },
                                "sequence-id": 1,
                                "description": "IPv4Entry"
                              },
                              "state": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/state",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/state",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                  ]
                                },
                                "sequence-id": 1,
                                "description": "IPv4Entry"
                              },
                              "actions": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/actions",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                  ]
                                },
                                "state": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/actions/state",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                    ]
                                  },
                                  "forwarding-action": "nsp-openconfig-acl-augments:FORWARD"
                                },
                                "config": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/actions/config",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                    ]
                                  },
                                  "forwarding-action": "nsp-openconfig-acl-augments:FORWARD"
                                }
                              },
                              "ipv4": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/ipv4",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                  ]
                                },
                                "state": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/ipv4/state",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                    ]
                                  },
                                  "source-address": "1.1.1.1/32",
                                  "destination-address": "2.2.2.2/32",
                                  "dscp": 0,
                                  "protocol": 4
                                },
                                "config": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='1'][type='openconfig-acl:ACL_IPV4']/acl-entries/acl-entry[sequence-id='1']/ipv4/config",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.822Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:IP Filter:1:entry-1"
                                    ]
                                  },
                                  "source-address": "1.1.1.1/32",
                                  "destination-address": "2.2.2.2/32",
                                  "dscp": 0,
                                  "protocol": 4
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set",
                          "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']",
                          "nsp-model:network-id": "92.168.98.156",
                          "nsp-model:creation-time": "2023-11-13T12:43:00.783Z",
                          "nsp-model:last-modified-time": "2023-11-13T12:43:00.783Z",
                          "nsp-model:sources": [
                            "fdn:realm:sam:network:92.168.98.156:MAC Filter:3"
                          ]
                        },
                        "name": "3",
                        "type": "openconfig-acl:ACL_L2",
                        "config": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/config",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/config",
                            "nsp-model:network-id": "92.168.98.156",
                            "nsp-model:creation-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:sources": [
                              "fdn:realm:sam:network:92.168.98.156:MAC Filter:3"
                            ]
                          },
                          "name": "3",
                          "type": "openconfig-acl:ACL_L2",
                          "description": "MacFilter"
                        },
                        "state": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/state",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/state",
                            "nsp-model:network-id": "92.168.98.156",
                            "nsp-model:creation-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:43:00.783Z",
                            "nsp-model:sources": [
                              "fdn:realm:sam:network:92.168.98.156:MAC Filter:3"
                            ]
                          },
                          "name": "3",
                          "type": "openconfig-acl:ACL_L2",
                          "description": "MacFilter"
                        },
                        "acl-entries": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries",
                            "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries",
                            "nsp-model:network-id": "92.168.98.156"
                          },
                          "acl-entry": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry",
                                "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']",
                                "nsp-model:network-id": "92.168.98.156",
                                "nsp-model:creation-time": "2023-11-13T12:43:54.390Z",
                                "nsp-model:last-modified-time": "2023-11-13T12:43:54.390Z",
                                "nsp-model:sources": [
                                  "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                ]
                              },
                              "sequence-id": 3,
                              "config": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/config",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/config",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:creation-time": "2023-11-13T12:43:54.390Z",
                                  "nsp-model:last-modified-time": "2023-11-13T12:43:54.390Z",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                  ]
                                },
                                "sequence-id": 3,
                                "description": "MacEntry"
                              },
                              "state": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/state",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/state",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:creation-time": "2023-11-13T12:43:54.390Z",
                                  "nsp-model:last-modified-time": "2023-11-13T12:43:54.390Z",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                  ]
                                },
                                "sequence-id": 3,
                                "description": "MacEntry"
                              },
                              "actions": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/actions",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                  ]
                                },
                                "state": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/actions/state",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:43:54.390Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.922Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                    ]
                                  },
                                  "forwarding-action": "nsp-openconfig-acl-augments:RATE_LIMIT"
                                },
                                "config": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/actions/config",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:43:54.390Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:44:30.915Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                    ]
                                  },
                                  "forwarding-action": "nsp-openconfig-acl-augments:RATE_LIMIT"
                                }
                              },
                              "l2": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/l2",
                                  "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/l2",
                                  "nsp-model:network-id": "92.168.98.156",
                                  "nsp-model:sources": [
                                    "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                  ]
                                },
                                "state": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/l2/state",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:43:54.390Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:43:54.390Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                    ]
                                  },
                                  "source-mac": "10:10:10:10:10:10",
                                  "source-mac-mask": "FF:FF:FF:FF:FF:FF",
                                  "destination-mac": "20:20:20:20:20:20",
                                  "destination-mac-mask": "FF:FF:FF:FF:FF:FF",
                                  "ethertype": 2000
                                },
                                "config": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/openconfig-acl:acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config",
                                    "nsp-model:identifier": "/nsp-network:network/node[node-id='92.168.98.156']/node-root/openconfig-acl:acl/acl-sets/acl-set[name='3'][type='openconfig-acl:ACL_L2']/acl-entries/acl-entry[sequence-id='3']/l2/config",
                                    "nsp-model:network-id": "92.168.98.156",
                                    "nsp-model:creation-time": "2023-11-13T12:43:54.390Z",
                                    "nsp-model:last-modified-time": "2023-11-13T12:43:54.390Z",
                                    "nsp-model:sources": [
                                      "fdn:realm:sam:network:92.168.98.156:MAC Filter:3:entry-3"
                                    ]
                                  },
                                  "source-mac": "10:10:10:10:10:10",
                                  "source-mac-mask": "FF:FF:FF:FF:FF:FF",
                                  "destination-mac": "20:20:20:20:20:20",
                                  "destination-mac-mask": "FF:FF:FF:FF:FF:FF",
                                  "ethertype": 2000
                                }
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "end-index": 2,
                    "start-index": 0,
                    "total-count": 3
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-admin-resync:resync-policies/mdm/resync-policy": {
      "get": {
        "tags": [
          "LogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveResyncPolicy",
        "description": "The parameters and request body are for method: retrieveResyncPolicy. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-admin-resync:resync-policy": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "sync-time": {
                            "type": "number"
                          },
                          "created-by": {
                            "type": "string"
                          },
                          "admin-state": {
                            "type": "string"
                          },
                          "node": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    },
                                    "nsp-model:creation-time": {
                                      "type": "string"
                                    },
                                    "nsp-model:last-modified-time": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "node-type": {
                                  "type": "string"
                                },
                                "admin-state": {
                                  "type": "string"
                                },
                                "version": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "@": {
                                        "type": "object",
                                        "properties": {
                                          "nsp-model:schema-nodeid": {
                                            "type": "string"
                                          },
                                          "nsp-model:identifier": {
                                            "type": "string"
                                          },
                                          "nsp-model:creation-time": {
                                            "type": "string"
                                          },
                                          "nsp-model:last-modified-time": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "node-version": {
                                        "type": "string"
                                      },
                                      "admin-state": {
                                        "type": "string"
                                      },
                                      "entity": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "@": {
                                              "type": "object",
                                              "properties": {
                                                "nsp-model:schema-nodeid": {
                                                  "type": "string"
                                                },
                                                "nsp-model:identifier": {
                                                  "type": "string"
                                                },
                                                "nsp-model:creation-time": {
                                                  "type": "string"
                                                },
                                                "nsp-model:last-modified-time": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "period": {
                                              "type": "number"
                                            },
                                            "admin-state": {
                                              "type": "string"
                                            },
                                            "entity-type": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-admin-resync:resync-policy": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']",
                        "nsp-model:creation-time": "2024-04-05T08:12:30.993Z",
                        "nsp-model:last-modified-time": "2024-04-05T08:12:30.993Z"
                      },
                      "name": "default policy",
                      "sync-time": 1712275200000,
                      "created-by": "system",
                      "admin-state": "enabled",
                      "node": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-type": "MAGC",
                          "admin-state": "enabled",
                          "version": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='0.0']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "0.0",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='0.0']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='25.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "25.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='25.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='24.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "24.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='24.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='23.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "23.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='MAGC']/version[node-version='23.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-type": "SR-7750",
                          "admin-state": "enabled",
                          "version": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "0.0",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.413Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.086Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:54.695Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:00.707Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.248Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.776Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.357Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.124Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.073Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.570Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:04.897Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.162Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.164Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.151Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='25.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "25.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='25.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='24.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "24.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='24.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "23.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.544Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.344Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:54.930Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:01.570Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.475Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.908Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.551Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.245Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.355Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.683Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.410Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:05.352Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.306Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.343Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "22.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.616Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.414Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:55.069Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:01.764Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.555Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.964Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.715Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.291Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.485Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.746Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:05.680Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.516Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.405Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.419Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "21.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.717Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.472Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:55.192Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:01.971Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.764Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.025Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.797Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.416Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.539Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.803Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:05.886Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.602Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.488Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.488Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "node-version": "20.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-state:/state/system']",
                                    "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "disabled",
                                  "entity-type": "nokia-state:/state/system"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.839Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.529Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.861Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.873Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.781Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.588Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:55.705Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.091Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.854Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.102Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:06.855Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.693Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.580Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.580Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "19.10.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.468Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.223Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:54.801Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:00.949Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.380Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.830Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.429Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.191Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.173Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.618Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:05.137Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.307Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.227Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.254Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']",
                            "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                          },
                          "node-type": "IXR-7250",
                          "admin-state": "enabled",
                          "version": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "0.0",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:15.020Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:10.102Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.616Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.220Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.961Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.679Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.800Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.807Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.199Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:48.854Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:07.018Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.876Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.669Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "19.10.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:07.114Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:29.421Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:15.194Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:49.031Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:10.218Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.689Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.345Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.019Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.814Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.814Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.872Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.880Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.316Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.935Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "23.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:07.258Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:15.377Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:49.519Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:10.740Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:18.784Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.408Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.078Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.937Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:36.938Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.897Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.937Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.379Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.984Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "22.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:07.437Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:15.505Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:49.911Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:11.036Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.280Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.461Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.130Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.125Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.002Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.978Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.456Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.047Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "21.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:07.718Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:15.636Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:50.085Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:11.392Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.386Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.570Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.182Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.208Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.067Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.085Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.075Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.530Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.118Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "20.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:07.934Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:15.752Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:50.438Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:11.644Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.476Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.634Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.251Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.271Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:49:29.035Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.142Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.133Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.592Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.202Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='IXR-7250']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.449Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']",
                            "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                          },
                          "node-type": "ESS-7450",
                          "admin-state": "enabled",
                          "version": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "0.0",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.003Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:15.930Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:55.897Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:11.751Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.587Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.684Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.362Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.325Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.235Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.188Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.521Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.676Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:51.150Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.309Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "19.10.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.467Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:16.036Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:51.379Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:56.108Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:11.901Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.660Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.773Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.476Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.384Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.297Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.286Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.593Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.760Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.430Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "23.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.528Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:16.141Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:51.512Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:56.243Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:11.980Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.776Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.836Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.535Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.441Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.390Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.338Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.732Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.847Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.537Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "22.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.621Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:16.222Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:51.778Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:56.424Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:12.048Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.835Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:21.922Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.593Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.486Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.469Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.406Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.830Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:00.941Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.601Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "21.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.711Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:16.331Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:51.978Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:56.688Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:12.151Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:19.936Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:22.002Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.649Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.553Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.546Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.495Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.890Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:01.027Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.656Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "20.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.783Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:16.576Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:12.277Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:22.084Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.758Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.607Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:37.675Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:56.871Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.067Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.564Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:33.949Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:01.138Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:52.270Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='ESS-7450']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.710Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']",
                            "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                          },
                          "node-type": "XRS-7950",
                          "admin-state": "enabled",
                          "version": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "0.0",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.875Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:16.764Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:52.557Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:57.114Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:12.373Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.210Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:22.165Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.822Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.669Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:34.022Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.772Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.654Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:01.367Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "19.10.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:08.973Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:17.183Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:52.744Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:57.616Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:12.682Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.346Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:22.302Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:24.896Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.723Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.065Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:34.067Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:01.523Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.884Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.717Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "23.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.034Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:17.556Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:58.592Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:13.201Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.415Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:22.728Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:25.872Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.781Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:34.691Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.132Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:01.663Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:52.986Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:27.951Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.812Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "22.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.089Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:17.693Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:53.469Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:58.778Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:13.646Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.474Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.055Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:25.943Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.848Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:35.183Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:53:01.834Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.008Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:31.935Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.258Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "21.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.229Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:17.846Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:53.873Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:59.803Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.064Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.555Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.147Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:29.907Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:35.513Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.410Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:04.408Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.061Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.014Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                              },
                              "node-version": "20.+",
                              "admin-state": "enabled",
                              "entity": [
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:09.341Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                    "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:17.983Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/session"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:23.292Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:26.060Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:30.001Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:00.083Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:20.676Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:35.766Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:38.496Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:04.701Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:51:54.187Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:14.187Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                    "nsp-model:creation-time": "2024-04-05T08:51:28.294Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:28.111Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                                },
                                {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                    "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='XRS-7950']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                    "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                    "nsp-model:last-modified-time": "2024-04-05T08:52:32.071Z"
                                  },
                                  "period": 1440,
                                  "admin-state": "enabled",
                                  "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-admin-resync:resync-policies/mdm/{pathv1}/{pathv2}/{pathv3}": {
      "get": {
        "tags": [
          "LogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveResyncPolicyNEAndVersionSpecific",
        "description": "The parameters and request body are for method: retrieveResyncPolicyNEAndVersionSpecific. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-admin-resync:version": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "node-version": {
                            "type": "string"
                          },
                          "admin-state": {
                            "type": "string"
                          },
                          "entity": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    },
                                    "nsp-model:creation-time": {
                                      "type": "string"
                                    },
                                    "nsp-model:last-modified-time": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "period": {
                                  "type": "number"
                                },
                                "admin-state": {
                                  "type": "string"
                                },
                                "entity-type": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-admin-resync:version": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']",
                        "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                        "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                      },
                      "node-version": "22.7.R1",
                      "admin-state": "enabled",
                      "entity": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses/address"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors/reflector']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors/reflector"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels/level']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels/level"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/interfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/interfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd/reflectors"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-acl:/acl/acl-sets/acl-set/acl-entries']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-acl:/acl/acl-sets/acl-set/acl-entries"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/interfaces/interface/peers/peer']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/interfaces/interface/peers/peer"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/interfaces/interface/peers']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/interfaces/interface/peers"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/interfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/interfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-acl:/acl/acl-sets/acl-set']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-acl:/acl/acl-sets/acl-set"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:seamless-bfds/seamless-bfd"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates/bfd-template']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates/bfd-template"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/global/interface-attributes"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv4/addresses"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/afi-safis/afi-safi"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/peer-groups"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors/neighbor']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface/neighbors/neighbor"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis/afi-safi"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:09.010Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/global/afi-safis"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/nsp-openconfig-bfd-augments:bfd-templates"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/isis/levels"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors/neighbor']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/interfaces/interface/neighbors/neighbor"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface/subinterfaces/subinterface/openconfig-if-ip:ipv6/addresses/address"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-interfaces:/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-interfaces:/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-acl:/acl/acl-sets/acl-set/acl-entries/acl-entry']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-acl:/acl/acl-sets/acl-set/acl-entries/acl-entry"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/nsp-openconfig-ospfv3-augments:ospfv3/areas/area/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-bfd:/bfd']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-bfd:/bfd"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/mpls/global']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/mpls/global"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:27:29.499Z"
                          },
                          "period": 1440,
                          "admin-state": "disabled",
                          "entity-type": "openconfig-network-instance:/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/state']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:08.600Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/state"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:08.704Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:08.762Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/config']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:08.808Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/config"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/interfaces/interface/neighbors']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:08.863Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/interfaces/interface/neighbors"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:08.925Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/interfaces/interface']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:09.072Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/interfaces/interface"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.7.R1']/entity[entity-type='openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/capabilities']",
                            "nsp-model:creation-time": "2023-11-13T12:27:29.499Z",
                            "nsp-model:last-modified-time": "2023-11-13T12:28:09.119Z"
                          },
                          "period": 1440,
                          "admin-state": "enabled",
                          "entity-type": "openconfig-lldp:/lldp/interfaces/interface/neighbors/neighbor/capabilities"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-admin-resync:resync-policies/mdm/{pathv1}/{pathv2}": {
      "get": {
        "tags": [
          "LogicalInventoryRestconfAPI"
        ],
        "operationId": "retrieveResyncPollingPolicyNESpecific",
        "description": "The parameters and request body are for method: retrieveResyncPollingPolicyNESpecific. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-admin-resync:node": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "node-type": {
                            "type": "string"
                          },
                          "admin-state": {
                            "type": "string"
                          },
                          "version": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    },
                                    "nsp-model:creation-time": {
                                      "type": "string"
                                    },
                                    "nsp-model:last-modified-time": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "node-version": {
                                  "type": "string"
                                },
                                "admin-state": {
                                  "type": "string"
                                },
                                "entity": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "@": {
                                        "type": "object",
                                        "properties": {
                                          "nsp-model:schema-nodeid": {
                                            "type": "string"
                                          },
                                          "nsp-model:identifier": {
                                            "type": "string"
                                          },
                                          "nsp-model:creation-time": {
                                            "type": "string"
                                          },
                                          "nsp-model:last-modified-time": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "period": {
                                        "type": "number"
                                      },
                                      "admin-state": {
                                        "type": "string"
                                      },
                                      "entity-type": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-admin-resync:node": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node",
                        "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']",
                        "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                        "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                      },
                      "node-type": "SR-7750",
                      "admin-state": "enabled",
                      "version": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-version": "0.0",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-state:/state/system']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "period": 1440,
                              "admin-state": "disabled",
                              "entity-type": "nokia-state:/state/system"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:09.413Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:18.086Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/session"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:51:54.695Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:00.707Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:14.248Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:20.776Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:23.357Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:26.124Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:30.073Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:38.570Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:04.897Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:36.162Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:28.164Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='0.0']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:32.151Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='25.+']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-version": "25.+",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='25.+']/entity[entity-type='nokia-state:/state/system']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "period": 1440,
                              "admin-state": "disabled",
                              "entity-type": "nokia-state:/state/system"
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='24.+']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-version": "24.+",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='24.+']/entity[entity-type='nokia-state:/state/system']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "period": 1440,
                              "admin-state": "disabled",
                              "entity-type": "nokia-state:/state/system"
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-version": "23.+",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-state:/state/system']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "period": 1440,
                              "admin-state": "disabled",
                              "entity-type": "nokia-state:/state/system"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:09.544Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:18.344Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/session"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:51:54.930Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:01.570Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:14.475Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:20.908Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:23.551Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:26.245Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:30.355Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:38.683Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:36.410Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:05.352Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:28.306Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='23.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:32.343Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-version": "22.+",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-state:/state/system']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "period": 1440,
                              "admin-state": "disabled",
                              "entity-type": "nokia-state:/state/system"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:09.616Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:18.414Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/session"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:51:55.069Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:01.764Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:14.555Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:20.964Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:23.715Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:26.291Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:30.485Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:38.746Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:05.680Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:36.516Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:28.405Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='22.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:32.419Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-version": "21.+",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-state:/state/system']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "period": 1440,
                              "admin-state": "disabled",
                              "entity-type": "nokia-state:/state/system"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:09.717Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:18.472Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/session"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:51:55.192Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:01.971Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:14.764Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:21.025Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:23.797Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:26.416Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:30.539Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:38.803Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:05.886Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:36.602Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:28.488Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='21.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:32.488Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']",
                            "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                          },
                          "node-version": "20.+",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-state:/state/system']",
                                "nsp-model:creation-time": "2024-04-05T08:36:49.055Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:36:49.055Z"
                              },
                              "period": 1440,
                              "admin-state": "disabled",
                              "entity-type": "nokia-state:/state/system"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:09.839Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:18.529Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/session"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:14.861Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:23.873Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:26.781Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:30.588Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:51:55.705Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:21.091Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:38.854Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:53:00.102Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:06.855Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:36.693Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:28.580Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='20.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:32.580Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                            }
                          ]
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version",
                            "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']",
                            "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                            "nsp-model:last-modified-time": "2024-04-05T08:48:14.699Z"
                          },
                          "node-version": "19.10.+",
                          "admin-state": "enabled",
                          "entity": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/bin-group']",
                                "nsp-model:creation-time": "2024-04-05T08:48:14.699Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:09.468Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/bin-group"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/session']",
                                "nsp-model:creation-time": "2024-04-05T08:48:53.302Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:18.223Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/session"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:51:54.801Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/mesh-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/lag/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:00.949Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/lag/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:14.380Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain/association']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:20.830Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain/association"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/sap/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:23.429Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/sap/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:26.191Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/epipe/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/eth-cfm/domain']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:30.173Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/eth-cfm/domain"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep']",
                                "nsp-model:creation-time": "2024-04-05T08:50:10.133Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:38.618Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vpls/spoke-sdp/eth-cfm/mep"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/router/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:05.137Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/router/twamp-light/reflector"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/oam-pm/streaming/delay-template']",
                                "nsp-model:creation-time": "2024-04-05T08:50:30.708Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:36.307Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/oam-pm/streaming/delay-template"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/test-oam/twamp/server']",
                                "nsp-model:creation-time": "2024-04-05T08:51:55.609Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:28.227Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/test-oam/twamp/server"
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-admin-resync:resync-policies/mdm/resync-policy/node/version/entity",
                                "nsp-model:identifier": "/nsp-admin-resync:resync-policies/mdm/resync-policy[name='default policy']/node[node-type='SR-7750']/version[node-version='19.10.+']/entity[entity-type='nokia-conf:/configure/service/vprn/twamp-light/reflector']",
                                "nsp-model:creation-time": "2024-04-05T08:50:53.591Z",
                                "nsp-model:last-modified-time": "2024-04-05T08:52:32.254Z"
                              },
                              "period": 1440,
                              "admin-state": "enabled",
                              "entity-type": "nokia-conf:/configure/service/vprn/twamp-light/reflector"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-admin-resync:resync-policies/mdm/{pathv1}/{pathv2}/{pathv3}/{pathv4}": {
      "patch": {
        "tags": [
          "LogicalInventoryRestconfAPI"
        ],
        "operationId": "enableResyncPollingPolicy",
        "description": "The parameters and request body are for method: enableResyncPollingPolicy. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/ietf-network-topology:link": {
      "get": {
        "tags": [
          "IETFL2Model"
        ],
        "operationId": "getL2TopologyLinks",
        "description": "The parameters and request body are for method: getL2TopologyLinks. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/ietf-l2-topology:l2-topology-attributes": {
      "get": {
        "tags": [
          "IETFL2Model"
        ],
        "operationId": "getL2TopologyAttributes",
        "description": "The parameters and request body are for method: getL2TopologyAttributes. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-l2-topology:l2-topology-attributes": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-l2-topology:l2-topology-attributes": {
                    "name": "L2Topology"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ietf-network-topology:termination-point": {
      "get": {
        "tags": [
          "IETFL2Model"
        ],
        "operationId": "getL2TopologyNodeTerminationPoints",
        "description": "The parameters and request body are for method: getL2TopologyNodeTerminationPoints. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology:termination-point": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tp-id": {
                            "type": "string"
                          },
                          "ietf-l2-topology:l2-termination-point-attributes": {
                            "type": "object",
                            "properties": {
                              "interface-name": {
                                "type": "string"
                              },
                              "mac-address": {
                                "type": "string"
                              },
                              "encapsulation-type": {
                                "type": "string"
                              },
                              "lag": {
                                "type": "boolean"
                              },
                              "unnumbered-id": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              },
                              "member-link-tp": {
                                "type": "object"
                              },
                              "nsp-ietf-network-topology:nsp-attributes": {
                                "type": "object"
                              }
                            }
                          },
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network-topology:termination-point": [
                    {
                      "tp-id": "1/1/3",
                      "ietf-l2-topology:l2-termination-point-attributes": {
                        "interface-name": "1/1/3",
                        "mac-address": "c2:12:01:01:00:03",
                        "encapsulation-type": "ietf-l2-topology:ethernet",
                        "lag": false,
                        "unnumbered-id": [
                          11
                        ],
                        "member-link-tp": [],
                        "nsp-ietf-network-topology:nsp-attributes": []
                      },
                      "ietf-l3-unicast-topology:l3-termination-point-attributes": {}
                    },
                    {
                      "tp-id": "1/1/6",
                      "ietf-l2-topology:l2-termination-point-attributes": {
                        "interface-name": "1/1/6",
                        "mac-address": "c2:12:01:01:00:06",
                        "encapsulation-type": "ietf-l2-topology:ethernet",
                        "lag": false,
                        "unnumbered-id": [
                          11
                        ],
                        "member-link-tp": [],
                        "nsp-ietf-network-topology:nsp-attributes": []
                      },
                      "ietf-l3-unicast-topology:l3-termination-point-attributes": {}
                    },
                    {
                      "tp-id": "LAG-1",
                      "ietf-l2-topology:l2-termination-point-attributes": {
                        "interface-name": "LAG-1",
                        "mac-address": "c0:ab:ff:00:01:41",
                        "encapsulation-type": "ietf-l2-topology:ethernet",
                        "lag": true,
                        "unnumbered-id": [
                          1342177281
                        ],
                        "member-link-tp": [
                          "/ietf-network:networks/network[network-id='L2Topology']/node[node-id='92.168.96.50']/ietf-network-topology:termination-point[tp-id='1/1/6']",
                          "/ietf-network:networks/network[network-id='L2Topology']/node[node-id='92.168.96.50']/ietf-network-topology:termination-point[tp-id='1/1/2']"
                        ],
                        "nsp-ietf-network-topology:nsp-attributes": [
                          "92.168.96.32:LAG-1--92.168.96.50:LAG-1"
                        ]
                      },
                      "ietf-l3-unicast-topology:l3-termination-point-attributes": {}
                    },
                    {
                      "tp-id": "1/1/2",
                      "ietf-l2-topology:l2-termination-point-attributes": {
                        "interface-name": "1/1/2",
                        "mac-address": "c2:12:01:01:00:02",
                        "encapsulation-type": "ietf-l2-topology:ethernet",
                        "lag": false,
                        "unnumbered-id": [
                          11
                        ],
                        "member-link-tp": [],
                        "nsp-ietf-network-topology:nsp-attributes": []
                      },
                      "ietf-l3-unicast-topology:l3-termination-point-attributes": {}
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getSpecificNetwork",
        "description": "The parameters and request body are for method: getSpecificNetwork. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:network": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "network-id": {
                            "type": "string"
                          },
                          "network-types": {
                            "type": "object",
                            "properties": {
                              "ietf-l3-unicast-topology:l3-unicast-topology": {
                                "type": "object",
                                "properties": {
                                  "ietf-sr-mpls-topology:sr-mpls": {
                                    "type": "object"
                                  }
                                }
                              }
                            }
                          },
                          "supporting-network": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "network-ref": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "node": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "node-id": {
                                  "type": "string"
                                },
                                "ietf-network-topology:termination-point": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "tp-id": {
                                        "type": "string"
                                      },
                                      "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                        "type": "object",
                                        "properties": {
                                          "ip-address": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "ietf-l3-te-topology:l3-te-tp-attributes": {
                                            "type": "object",
                                            "properties": {
                                              "tp-ref": {
                                                "type": "string"
                                              },
                                              "node-ref": {
                                                "type": "string"
                                              },
                                              "network-ref": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "ietf-l3-unicast-topology:l3-node-attributes": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "flag": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "router-id": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "nsp-ietf-network-topology:nsp-attributes": {
                                      "type": "object"
                                    },
                                    "prefix": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "prefix": {
                                            "type": "string"
                                          },
                                          "metric": {
                                            "type": "number"
                                          }
                                        }
                                      }
                                    },
                                    "ietf-l3-te-topology:l3-te-node-attributes": {
                                      "type": "object",
                                      "properties": {
                                        "node-ref": {
                                          "type": "string"
                                        },
                                        "network-ref": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "ietf-sr-mpls-topology:sr-mpls": {
                                      "type": "object",
                                      "properties": {
                                        "msds": {
                                          "type": "object",
                                          "properties": {
                                            "node-msd": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "msd-type": {
                                                    "type": "string"
                                                  },
                                                  "msd-value": {
                                                    "type": "number"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "ietf-network-topology:link": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "link-id": {
                                  "type": "string"
                                },
                                "source": {
                                  "type": "object",
                                  "properties": {
                                    "source-node": {
                                      "type": "string"
                                    },
                                    "source-tp": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "destination": {
                                  "type": "object",
                                  "properties": {
                                    "dest-node": {
                                      "type": "string"
                                    },
                                    "dest-tp": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "ietf-l3-unicast-topology:l3-link-attributes": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "metric1": {
                                      "type": "number"
                                    },
                                    "metric2": {
                                      "type": "number"
                                    },
                                    "flag": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "nsp-ietf-network-topology:nsp-attributes": {
                                      "type": "object"
                                    },
                                    "ietf-l3-te-topology:l3-te-link-attributes": {
                                      "type": "object",
                                      "properties": {
                                        "link-ref": {
                                          "type": "string"
                                        },
                                        "network-ref": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "ietf-sr-mpls-topology:sr-mpls": {
                                      "type": "object",
                                      "properties": {
                                        "sids": {
                                          "type": "object",
                                          "properties": {
                                            "sid": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "sid": {
                                                    "type": "number"
                                                  },
                                                  "address-family": {
                                                    "type": "string"
                                                  },
                                                  "is-eligible-for-protection": {
                                                    "type": "boolean"
                                                  },
                                                  "is-local": {
                                                    "type": "boolean"
                                                  },
                                                  "is-part-of-set": {
                                                    "type": "boolean"
                                                  },
                                                  "is-persistent": {
                                                    "type": "boolean"
                                                  },
                                                  "is-on-lan": {
                                                    "type": "boolean"
                                                  },
                                                  "weight": {
                                                    "type": "number"
                                                  },
                                                  "value-type": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "ietf-l3-unicast-topology:l3-topology-attributes": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "ietf-l3-te-topology:l3-te-topology-attributes": {
                                "type": "object",
                                "properties": {
                                  "network-ref": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:network": [
                    {
                      "network-id": "TopologyId-200:100:0-isis",
                      "network-types": {
                        "ietf-l3-unicast-topology:l3-unicast-topology": {
                          "ietf-sr-mpls-topology:sr-mpls": {}
                        }
                      },
                      "supporting-network": [
                        {
                          "network-ref": "/ietf-network:networks/network[network-id='L2Topology']"
                        }
                      ],
                      "node": [
                        {
                          "node-id": "11.50.150.31",
                          "ietf-network-topology:termination-point": [
                            {
                              "tp-id": "11.30.1.2",
                              "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                "ip-address": [
                                  "11.30.1.2"
                                ],
                                "ietf-l3-te-topology:l3-te-tp-attributes": {
                                  "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']/ietf-network-topology:termination-point[tp-id='11.30.1.2']",
                                  "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                                  "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                                }
                              }
                            }
                          ],
                          "ietf-l3-unicast-topology:l3-node-attributes": {
                            "name": "11.50.150.31",
                            "flag": [
                              "nsp-ietf-network-topology:routing-instance"
                            ],
                            "router-id": [
                              "11.50.150.31"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "prefix": [
                              {
                                "prefix": "11.50.150.31/32",
                                "metric": 0
                              }
                            ],
                            "ietf-l3-te-topology:l3-te-node-attributes": {
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "msds": {
                                "node-msd": [
                                  {
                                    "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                                    "msd-value": 3
                                  },
                                  {
                                    "msd-type": "ietf-sr-mpls-topology:msd-erld",
                                    "msd-value": 3
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "node-id": "11.50.150.30",
                          "ietf-network-topology:termination-point": [
                            {
                              "tp-id": "11.30.1.1",
                              "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                "ip-address": [
                                  "11.30.1.1"
                                ],
                                "ietf-l3-te-topology:l3-te-tp-attributes": {
                                  "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.1.1']",
                                  "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                                  "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                                }
                              }
                            },
                            {
                              "tp-id": "11.30.39.5",
                              "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                "ip-address": [
                                  "11.30.39.5"
                                ],
                                "ietf-l3-te-topology:l3-te-tp-attributes": {
                                  "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.5']",
                                  "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                                  "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                                }
                              }
                            },
                            {
                              "tp-id": "11.30.39.1",
                              "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                "ip-address": [
                                  "11.30.39.1"
                                ],
                                "ietf-l3-te-topology:l3-te-tp-attributes": {
                                  "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.1']",
                                  "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                                  "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                                }
                              }
                            }
                          ],
                          "ietf-l3-unicast-topology:l3-node-attributes": {
                            "name": "11.50.150.30",
                            "flag": [
                              "nsp-ietf-network-topology:routing-instance"
                            ],
                            "router-id": [
                              "11.50.150.30"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "prefix": [
                              {
                                "prefix": "11.50.150.30/32",
                                "metric": 0
                              },
                              {
                                "prefix": "11.50.150.39/32",
                                "metric": 10
                              }
                            ],
                            "ietf-l3-te-topology:l3-te-node-attributes": {
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "msds": {
                                "node-msd": [
                                  {
                                    "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                                    "msd-value": 12
                                  },
                                  {
                                    "msd-type": "ietf-sr-mpls-topology:msd-erld",
                                    "msd-value": 15
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "node-id": "11.50.150.39",
                          "ietf-network-topology:termination-point": [
                            {
                              "tp-id": "11.30.39.6",
                              "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                "ip-address": [
                                  "11.30.39.6"
                                ],
                                "ietf-l3-te-topology:l3-te-tp-attributes": {
                                  "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.6']",
                                  "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                                  "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                                }
                              }
                            },
                            {
                              "tp-id": "11.30.39.2",
                              "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                "ip-address": [
                                  "11.30.39.2"
                                ],
                                "ietf-l3-te-topology:l3-te-tp-attributes": {
                                  "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.2']",
                                  "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                                  "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                                }
                              }
                            }
                          ],
                          "ietf-l3-unicast-topology:l3-node-attributes": {
                            "name": "11.50.150.39",
                            "flag": [
                              "nsp-ietf-network-topology:routing-instance"
                            ],
                            "router-id": [
                              "11.50.150.39"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "prefix": [
                              {
                                "prefix": "11.50.150.39/32",
                                "metric": 0
                              },
                              {
                                "prefix": "11.50.150.30/32",
                                "metric": 10
                              }
                            ],
                            "ietf-l3-te-topology:l3-te-node-attributes": {
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "msds": {
                                "node-msd": [
                                  {
                                    "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                                    "msd-value": 12
                                  },
                                  {
                                    "msd-type": "ietf-sr-mpls-topology:msd-erld",
                                    "msd-value": 15
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ],
                      "ietf-network-topology:link": [
                        {
                          "link-id": "11.50.150.31:11.30.1.2--11.50.150.30:11.30.1.1--l2",
                          "source": {
                            "source-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                            "source-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']/ietf-network-topology:termination-point[tp-id='11.30.1.2']"
                          },
                          "destination": {
                            "dest-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                            "dest-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.1.1']"
                          },
                          "ietf-l3-unicast-topology:l3-link-attributes": {
                            "name": "0110.5015.0031::0110.5015.0030=>11.30.1.2-ISIS_L2-PointToPoint-Original",
                            "metric1": 10,
                            "metric2": 10,
                            "flag": [
                              "nsp-ietf-network-topology:igp"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "ietf-l3-te-topology:l3-te-link-attributes": {
                              "link-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/ietf-network-topology:link[link-id='11.50.150.31:11.30.1.2--11.50.150.30:11.30.1.1--l2']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "sids": {
                                "sid": [
                                  {
                                    "sid": 524287,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": false,
                                    "is-local": true,
                                    "is-part-of-set": false,
                                    "is-persistent": false,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  },
                                  {
                                    "sid": 500002,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": false,
                                    "is-local": true,
                                    "is-part-of-set": true,
                                    "is-persistent": true,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  },
                                  {
                                    "sid": 500004,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": false,
                                    "is-local": true,
                                    "is-part-of-set": true,
                                    "is-persistent": true,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "link-id": "11.50.150.39:11.30.39.6--11.50.150.30:11.30.39.5--l1",
                          "source": {
                            "source-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                            "source-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.6']"
                          },
                          "destination": {
                            "dest-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                            "dest-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.5']"
                          },
                          "ietf-l3-unicast-topology:l3-link-attributes": {
                            "name": "0110.5015.0039::0110.5015.0030=>11.30.39.6-ISIS_L1-PointToPoint-Original",
                            "metric1": 10,
                            "metric2": 10,
                            "flag": [
                              "nsp-ietf-network-topology:igp"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "ietf-l3-te-topology:l3-te-link-attributes": {
                              "link-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/ietf-network-topology:link[link-id='11.50.150.39:11.30.39.6--11.50.150.30:11.30.39.5--l1']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "sids": {
                                "sid": [
                                  {
                                    "sid": 524286,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": true,
                                    "is-local": true,
                                    "is-part-of-set": false,
                                    "is-persistent": false,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "link-id": "11.50.150.39:11.30.39.2--11.50.150.30:11.30.39.1--l2",
                          "source": {
                            "source-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                            "source-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.2']"
                          },
                          "destination": {
                            "dest-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                            "dest-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.1']"
                          },
                          "ietf-l3-unicast-topology:l3-link-attributes": {
                            "name": "0110.5015.0039::0110.5015.0030=>11.30.39.2-ISIS_L2-PointToPoint-Original",
                            "metric1": 10,
                            "metric2": 10,
                            "flag": [
                              "nsp-ietf-network-topology:igp"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "ietf-l3-te-topology:l3-te-link-attributes": {
                              "link-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/ietf-network-topology:link[link-id='11.50.150.39:11.30.39.2--11.50.150.30:11.30.39.1--l2']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "sids": {
                                "sid": [
                                  {
                                    "sid": 524287,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": true,
                                    "is-local": true,
                                    "is-part-of-set": false,
                                    "is-persistent": false,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "link-id": "11.50.150.30:11.30.1.1--11.50.150.31:11.30.1.2--l2",
                          "source": {
                            "source-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                            "source-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.1.1']"
                          },
                          "destination": {
                            "dest-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                            "dest-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']/ietf-network-topology:termination-point[tp-id='11.30.1.2']"
                          },
                          "ietf-l3-unicast-topology:l3-link-attributes": {
                            "name": "0110.5015.0030::0110.5015.0031=>11.30.1.1-ISIS_L2-PointToPoint-Original",
                            "metric1": 10,
                            "metric2": 10,
                            "flag": [
                              "nsp-ietf-network-topology:igp"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "ietf-l3-te-topology:l3-te-link-attributes": {
                              "link-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/ietf-network-topology:link[link-id='11.50.150.30:11.30.1.1--11.50.150.31:11.30.1.2--l2']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "sids": {
                                "sid": [
                                  {
                                    "sid": 524286,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": false,
                                    "is-local": true,
                                    "is-part-of-set": false,
                                    "is-persistent": false,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "link-id": "11.50.150.30:11.30.39.5--11.50.150.39:11.30.39.6--l1",
                          "source": {
                            "source-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                            "source-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.5']"
                          },
                          "destination": {
                            "dest-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                            "dest-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.6']"
                          },
                          "ietf-l3-unicast-topology:l3-link-attributes": {
                            "name": "0110.5015.0030::0110.5015.0039=>11.30.39.5-ISIS_L1-PointToPoint-Original",
                            "metric1": 10,
                            "metric2": 10,
                            "flag": [
                              "nsp-ietf-network-topology:igp"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "ietf-l3-te-topology:l3-te-link-attributes": {
                              "link-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/ietf-network-topology:link[link-id='11.50.150.30:11.30.39.5--11.50.150.39:11.30.39.6--l1']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "sids": {
                                "sid": [
                                  {
                                    "sid": 524285,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": false,
                                    "is-local": true,
                                    "is-part-of-set": false,
                                    "is-persistent": false,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "link-id": "11.50.150.30:11.30.39.1--11.50.150.39:11.30.39.2--l2",
                          "source": {
                            "source-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                            "source-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.1']"
                          },
                          "destination": {
                            "dest-node": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                            "dest-tp": "/ietf-network:networks/network[network-id='TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.2']"
                          },
                          "ietf-l3-unicast-topology:l3-link-attributes": {
                            "name": "0110.5015.0030::0110.5015.0039=>11.30.39.1-ISIS_L2-PointToPoint-Original",
                            "metric1": 10,
                            "metric2": 10,
                            "flag": [
                              "nsp-ietf-network-topology:igp"
                            ],
                            "nsp-ietf-network-topology:nsp-attributes": [],
                            "ietf-l3-te-topology:l3-te-link-attributes": {
                              "link-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/ietf-network-topology:link[link-id='11.50.150.30:11.30.39.1--11.50.150.39:11.30.39.2--l2']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            },
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "sids": {
                                "sid": [
                                  {
                                    "sid": 524286,
                                    "address-family": "ipv4",
                                    "is-eligible-for-protection": false,
                                    "is-local": true,
                                    "is-part-of-set": false,
                                    "is-persistent": false,
                                    "is-on-lan": false,
                                    "weight": 0,
                                    "value-type": "absolute"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ],
                      "ietf-l3-unicast-topology:l3-topology-attributes": {
                        "name": "TopologyId-200:100:0",
                        "ietf-l3-te-topology:l3-te-topology-attributes": {
                          "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/supporting-network": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getSupportingNetwork",
        "description": "The parameters and request body are for method: getSupportingNetwork. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:supporting-network": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "network-ref": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:supporting-network": [
                    {
                      "network-ref": "/ietf-network:networks/network[network-id='L2Topology']"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/network-types": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getNetworkType",
        "description": "The parameters and request body are for method: getNetworkType. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:network-types": {
                      "type": "object",
                      "properties": {
                        "ietf-l3-unicast-topology:l3-unicast-topology": {
                          "type": "object",
                          "properties": {
                            "ietf-sr-mpls-topology:sr-mpls": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:network-types": {
                    "ietf-l3-unicast-topology:l3-unicast-topology": {
                      "ietf-sr-mpls-topology:sr-mpls": {}
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/network": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getNetwork",
        "description": "The parameters and request body are for method: getNetwork. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/ietf-l3-unicast-topology:l3-topology-attributes": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getL3TopologyAttribute",
        "description": "The parameters and request body are for method: getL3TopologyAttribute. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-l3-unicast-topology:l3-topology-attributes": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "ietf-l3-te-topology:l3-te-topology-attributes": {
                          "type": "object",
                          "properties": {
                            "network-ref": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-l3-unicast-topology:l3-topology-attributes": {
                    "name": "TopologyId-200:100:0",
                    "ietf-l3-te-topology:l3-te-topology-attributes": {
                      "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/node": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getAllNodesInANetwork",
        "description": "The parameters and request body are for method: getAllNodesInANetwork. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:node": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "node-id": {
                            "type": "string"
                          },
                          "ietf-network-topology:termination-point": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "tp-id": {
                                  "type": "string"
                                },
                                "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                  "type": "object",
                                  "properties": {
                                    "ip-address": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "ietf-l3-te-topology:l3-te-tp-attributes": {
                                      "type": "object",
                                      "properties": {
                                        "tp-ref": {
                                          "type": "string"
                                        },
                                        "node-ref": {
                                          "type": "string"
                                        },
                                        "network-ref": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "ietf-l3-unicast-topology:l3-node-attributes": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "flag": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "router-id": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "nsp-ietf-network-topology:nsp-attributes": {
                                "type": "object"
                              },
                              "prefix": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "prefix": {
                                      "type": "string"
                                    },
                                    "metric": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              "ietf-l3-te-topology:l3-te-node-attributes": {
                                "type": "object",
                                "properties": {
                                  "node-ref": {
                                    "type": "string"
                                  },
                                  "network-ref": {
                                    "type": "string"
                                  }
                                }
                              },
                              "ietf-sr-mpls-topology:sr-mpls": {
                                "type": "object",
                                "properties": {
                                  "msds": {
                                    "type": "object",
                                    "properties": {
                                      "node-msd": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "msd-type": {
                                              "type": "string"
                                            },
                                            "msd-value": {
                                              "type": "number"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:node": [
                    {
                      "node-id": "11.50.150.39",
                      "ietf-network-topology:termination-point": [
                        {
                          "tp-id": "11.30.39.6",
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "ip-address": [
                              "11.30.39.6"
                            ],
                            "ietf-l3-te-topology:l3-te-tp-attributes": {
                              "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.6']",
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            }
                          }
                        },
                        {
                          "tp-id": "11.30.39.2",
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "ip-address": [
                              "11.30.39.2"
                            ],
                            "ietf-l3-te-topology:l3-te-tp-attributes": {
                              "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.2']",
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            }
                          }
                        }
                      ],
                      "ietf-l3-unicast-topology:l3-node-attributes": {
                        "name": "11.50.150.39",
                        "flag": [
                          "nsp-ietf-network-topology:routing-instance"
                        ],
                        "router-id": [
                          "11.50.150.39"
                        ],
                        "nsp-ietf-network-topology:nsp-attributes": [],
                        "prefix": [
                          {
                            "prefix": "11.50.150.39/32",
                            "metric": 0
                          },
                          {
                            "prefix": "11.50.150.30/32",
                            "metric": 10
                          }
                        ],
                        "ietf-l3-te-topology:l3-te-node-attributes": {
                          "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                          "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                        },
                        "ietf-sr-mpls-topology:sr-mpls": {
                          "msds": {
                            "node-msd": [
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                                "msd-value": 12
                              },
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-erld",
                                "msd-value": 15
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "node-id": "11.50.150.31",
                      "ietf-network-topology:termination-point": [
                        {
                          "tp-id": "11.30.1.2",
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "ip-address": [
                              "11.30.1.2"
                            ],
                            "ietf-l3-te-topology:l3-te-tp-attributes": {
                              "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']/ietf-network-topology:termination-point[tp-id='11.30.1.2']",
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            }
                          }
                        }
                      ],
                      "ietf-l3-unicast-topology:l3-node-attributes": {
                        "name": "11.50.150.31",
                        "flag": [
                          "nsp-ietf-network-topology:routing-instance"
                        ],
                        "router-id": [
                          "11.50.150.31"
                        ],
                        "nsp-ietf-network-topology:nsp-attributes": [],
                        "prefix": [
                          {
                            "prefix": "11.50.150.31/32",
                            "metric": 0
                          }
                        ],
                        "ietf-l3-te-topology:l3-te-node-attributes": {
                          "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                          "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                        },
                        "ietf-sr-mpls-topology:sr-mpls": {
                          "msds": {
                            "node-msd": [
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                                "msd-value": 3
                              },
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-erld",
                                "msd-value": 3
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "node-id": "11.50.150.30",
                      "ietf-network-topology:termination-point": [
                        {
                          "tp-id": "11.30.1.1",
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "ip-address": [
                              "11.30.1.1"
                            ],
                            "ietf-l3-te-topology:l3-te-tp-attributes": {
                              "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.1.1']",
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            }
                          }
                        },
                        {
                          "tp-id": "11.30.39.5",
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "ip-address": [
                              "11.30.39.5"
                            ],
                            "ietf-l3-te-topology:l3-te-tp-attributes": {
                              "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.5']",
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            }
                          }
                        },
                        {
                          "tp-id": "11.30.39.1",
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "ip-address": [
                              "11.30.39.1"
                            ],
                            "ietf-l3-te-topology:l3-te-tp-attributes": {
                              "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']/ietf-network-topology:termination-point[tp-id='11.30.39.1']",
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            }
                          }
                        }
                      ],
                      "ietf-l3-unicast-topology:l3-node-attributes": {
                        "name": "11.50.150.30",
                        "flag": [
                          "nsp-ietf-network-topology:routing-instance"
                        ],
                        "router-id": [
                          "11.50.150.30"
                        ],
                        "nsp-ietf-network-topology:nsp-attributes": [],
                        "prefix": [
                          {
                            "prefix": "11.50.150.30/32",
                            "metric": 0
                          },
                          {
                            "prefix": "11.50.150.39/32",
                            "metric": 10
                          }
                        ],
                        "ietf-l3-te-topology:l3-te-node-attributes": {
                          "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.30']",
                          "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                        },
                        "ietf-sr-mpls-topology:sr-mpls": {
                          "msds": {
                            "node-msd": [
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                                "msd-value": 12
                              },
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-erld",
                                "msd-value": 15
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getSpecificNodeInANetwork",
        "description": "The parameters and request body are for method: getSpecificNodeInANetwork. Same endpoint also used in methods:<br> getSpecificLinkInANetwork (network : string,link : string)",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:node": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "node-id": {
                            "type": "string"
                          },
                          "ietf-network-topology:termination-point": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "tp-id": {
                                  "type": "string"
                                },
                                "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                                  "type": "object",
                                  "properties": {
                                    "ip-address": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "ietf-l3-te-topology:l3-te-tp-attributes": {
                                      "type": "object",
                                      "properties": {
                                        "tp-ref": {
                                          "type": "string"
                                        },
                                        "node-ref": {
                                          "type": "string"
                                        },
                                        "network-ref": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "ietf-l3-unicast-topology:l3-node-attributes": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "flag": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "router-id": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "nsp-ietf-network-topology:nsp-attributes": {
                                "type": "object"
                              },
                              "prefix": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "prefix": {
                                      "type": "string"
                                    },
                                    "metric": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              "ietf-l3-te-topology:l3-te-node-attributes": {
                                "type": "object",
                                "properties": {
                                  "node-ref": {
                                    "type": "string"
                                  },
                                  "network-ref": {
                                    "type": "string"
                                  }
                                }
                              },
                              "ietf-sr-mpls-topology:sr-mpls": {
                                "type": "object",
                                "properties": {
                                  "msds": {
                                    "type": "object",
                                    "properties": {
                                      "node-msd": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "msd-type": {
                                              "type": "string"
                                            },
                                            "msd-value": {
                                              "type": "number"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:node": [
                    {
                      "node-id": "11.50.150.31",
                      "ietf-network-topology:termination-point": [
                        {
                          "tp-id": "11.30.1.2",
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "ip-address": [
                              "11.30.1.2"
                            ],
                            "ietf-l3-te-topology:l3-te-tp-attributes": {
                              "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']/ietf-network-topology:termination-point[tp-id='11.30.1.2']",
                              "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                              "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                            }
                          }
                        }
                      ],
                      "ietf-l3-unicast-topology:l3-node-attributes": {
                        "name": "11.50.150.31",
                        "flag": [
                          "nsp-ietf-network-topology:routing-instance"
                        ],
                        "router-id": [
                          "11.50.150.31"
                        ],
                        "nsp-ietf-network-topology:nsp-attributes": [],
                        "prefix": [
                          {
                            "prefix": "11.50.150.31/32",
                            "metric": 0
                          }
                        ],
                        "ietf-l3-te-topology:l3-te-node-attributes": {
                          "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.31']",
                          "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                        },
                        "ietf-sr-mpls-topology:sr-mpls": {
                          "msds": {
                            "node-msd": [
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                                "msd-value": 3
                              },
                              {
                                "msd-type": "ietf-sr-mpls-topology:msd-erld",
                                "msd-value": 3
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/supporting-link": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getSupportingLink",
        "description": "The parameters and request body are for method: getSupportingLink. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:supporting-link": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "network-ref": {
                            "type": "string"
                          },
                          "link-ref": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:supporting-link": [
                    {
                      "network-ref": "/ietf-network:networks/network[network-id='L2Topology']",
                      "link-ref": "/ietf-network:networks/network[network-id='L2Topology']/ietf-network-topology:link[link-id='11.50.150.33:1/1/4--11.50.150.35:1/1/4']"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/{pathv3}": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getSpecificTerminationPointsOfANode",
        "description": "The parameters and request body are for method: getSpecificTerminationPointsOfANode. Same endpoint also used in methods:<br> getSAPsOnASpecificNodeOfSpecificServiceType (network : string,node : string,service : string)",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network-topology:termination-point": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tp-id": {
                            "type": "string"
                          },
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                            "type": "object",
                            "properties": {
                              "ip-address": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "ietf-l3-te-topology:l3-te-tp-attributes": {
                                "type": "object",
                                "properties": {
                                  "tp-ref": {
                                    "type": "string"
                                  },
                                  "node-ref": {
                                    "type": "string"
                                  },
                                  "network-ref": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network-topology:termination-point": [
                    {
                      "tp-id": "11.30.39.6",
                      "ietf-l3-unicast-topology:l3-termination-point-attributes": {
                        "ip-address": [
                          "11.30.39.6"
                        ],
                        "ietf-l3-te-topology:l3-te-tp-attributes": {
                          "tp-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']/ietf-network-topology:termination-point[tp-id='11.30.39.6']",
                          "node-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']/node[node-id='11.50.150.39']",
                          "network-ref": "/ietf-network:networks/network[network-id='TE-TopologyId-200:100:0-isis']"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/{pathv3}/supporting-termination-point": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "getSupportingTerminationPoint",
        "description": "The parameters and request body are for method: getSupportingTerminationPoint. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:supporting-termination-point": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "network-ref": {
                            "type": "string"
                          },
                          "node-ref": {
                            "type": "string"
                          },
                          "tp-ref": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:supporting-termination-point": [
                    {
                      "network-ref": "/ietf-network:networks/network[network-id='L2Topology']",
                      "node-ref": "/ietf-network:networks/network[network-id='L2Topology']/node[node-id='11.50.150.33']",
                      "tp-ref": "/ietf-network:networks/network[network-id='L2Topology']/node[node-id='11.50.150.33']/ietf-network-topology:termination-point[tp-id='1/1/6']"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ietf-l3-unicast-topology:l3-node-attributes/ietf-sr-mpls-topology:sr-mpls": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "l3GETSRTopologyNodeAttributes",
        "description": "The parameters and request body are for method: l3GETSRTopologyNodeAttributes. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-sr-mpls-topology:sr-mpls": {
                      "type": "object",
                      "properties": {
                        "msds": {
                          "type": "object",
                          "properties": {
                            "node-msd": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "msd-type": {
                                    "type": "string"
                                  },
                                  "msd-value": {
                                    "type": "number"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-sr-mpls-topology:sr-mpls": {
                    "msds": {
                      "node-msd": [
                        {
                          "msd-type": "ietf-sr-mpls-topology:msd-mpls",
                          "msd-value": 3
                        },
                        {
                          "msd-type": "ietf-sr-mpls-topology:msd-erld",
                          "msd-value": 3
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/{pathv1}/{pathv2}/ietf-l3-unicast-topology:l3-link-attributes/ietf-sr-mpls-topology:sr-mpls": {
      "get": {
        "tags": [
          "IETFL3Model"
        ],
        "operationId": "l3GETSRTopologyLinkAttributes",
        "description": "The parameters and request body are for method: l3GETSRTopologyLinkAttributes. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-sr-mpls-topology:sr-mpls": {
                      "type": "object",
                      "properties": {
                        "sids": {
                          "type": "object",
                          "properties": {
                            "sid": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "sid": {
                                    "type": "number"
                                  },
                                  "address-family": {
                                    "type": "string"
                                  },
                                  "is-eligible-for-protection": {
                                    "type": "boolean"
                                  },
                                  "is-local": {
                                    "type": "boolean"
                                  },
                                  "is-part-of-set": {
                                    "type": "boolean"
                                  },
                                  "is-persistent": {
                                    "type": "boolean"
                                  },
                                  "is-on-lan": {
                                    "type": "boolean"
                                  },
                                  "weight": {
                                    "type": "number"
                                  },
                                  "value-type": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-sr-mpls-topology:sr-mpls": {
                    "sids": {
                      "sid": [
                        {
                          "sid": 524287,
                          "address-family": "ipv4",
                          "is-eligible-for-protection": false,
                          "is-local": true,
                          "is-part-of-set": false,
                          "is-persistent": false,
                          "is-on-lan": false,
                          "weight": 0,
                          "value-type": "absolute"
                        },
                        {
                          "sid": 500002,
                          "address-family": "ipv4",
                          "is-eligible-for-protection": false,
                          "is-local": true,
                          "is-part-of-set": true,
                          "is-persistent": true,
                          "is-on-lan": false,
                          "weight": 0,
                          "value-type": "absolute"
                        },
                        {
                          "sid": 500004,
                          "address-family": "ipv4",
                          "is-eligible-for-protection": false,
                          "is-local": true,
                          "is-part-of-set": true,
                          "is-persistent": true,
                          "is-on-lan": false,
                          "weight": 0,
                          "value-type": "absolute"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/network/network-types/ietf-sap-ntw:sap-network": {
      "get": {
        "tags": [
          "IETFSAPTopology"
        ],
        "operationId": "getSAPNetwork",
        "description": "The parameters and request body are for method: getSAPNetwork. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-sap-ntw:sap-network": {
                      "type": "object",
                      "properties": {
                        "service-type": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-sap-ntw:sap-network": {
                    "service-type": [
                      "ietf-vpn-common:vpws",
                      "ietf-vpn-common:vpls",
                      "ietf-vpn-common:l3vpn"
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/ietf-network:networks/network/{pathv1}": {
      "get": {
        "tags": [
          "IETFSAPTopology"
        ],
        "operationId": "getIETFNetworkFromSpecificNode",
        "description": "The parameters and request body are for method: getIETFNetworkFromSpecificNode. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ietf-network:node": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "node-id": {
                            "type": "string"
                          },
                          "ietf-sap-ntw:service": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "service-type": {
                                  "type": "string"
                                },
                                "sap": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "sap-id": {
                                        "type": "string"
                                      },
                                      "attachment-interface": {
                                        "type": "string"
                                      },
                                      "interface-type": {
                                        "type": "string"
                                      },
                                      "encapsulation-type": {
                                        "type": "string"
                                      },
                                      "role": {
                                        "type": "string"
                                      },
                                      "sap-status": {
                                        "type": "object",
                                        "properties": {
                                          "status": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ietf-network:node": [
                    {
                      "node-id": "11.11.11.11",
                      "ietf-sap-ntw:service": [
                        {
                          "service-type": "ietf-vpn-common:vpws",
                          "sap": [
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/lag[lag-id='10']",
                              "attachment-interface": "Lag 10",
                              "interface-type": "ietf-sap-ntw:lag",
                              "encapsulation-type": "ietf-vpn-common:lag-int",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=3']",
                              "attachment-interface": "Port 1/1/3",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=8']",
                              "attachment-interface": "Port 1/1/8",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=9']",
                              "attachment-interface": "Port 1/1/9",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=11']",
                              "attachment-interface": "Port 1/1/11",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=12']",
                              "attachment-interface": "Port 1/1/12",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=1']",
                              "attachment-interface": "Port 1/2/1",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=2']",
                              "attachment-interface": "Port 1/2/2",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=3']",
                              "attachment-interface": "Port 1/2/3",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=10']",
                              "attachment-interface": "Port 1/2/10",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=11']",
                              "attachment-interface": "Port 1/2/11",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:untagged-int",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=12']",
                              "attachment-interface": "Port 1/2/12",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=13']",
                              "attachment-interface": "Port 1/2/13",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-service:services/service-layer/eline[service-id='epipe21']/endpoint[endpoint-id='11.11.11.11-1/1/8:21']",
                              "parent-termination-point": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=8']",
                              "attachment-interface": "Port 1/1/8:21.0",
                              "interface-type": "ietf-sap-ntw:logical",
                              "encapsulation-type": "ietf-vpn-common:qinany",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              },
                              "service-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            }
                          ]
                        },
                        {
                          "service-type": "ietf-vpn-common:vpls",
                          "sap": [
                            {
                              "sap-id": "/nsp-service:services/service-layer/elan[service-id='vpls22']/endpoint[endpoint-id='11.11.11.11-1/1/8:22']",
                              "parent-termination-point": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=8']",
                              "attachment-interface": "Port 1/1/8:22.0",
                              "interface-type": "ietf-sap-ntw:logical",
                              "encapsulation-type": "ietf-vpn-common:qinany",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              },
                              "service-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/lag[lag-id='10']",
                              "attachment-interface": "Lag 10",
                              "interface-type": "ietf-sap-ntw:lag",
                              "encapsulation-type": "ietf-vpn-common:lag-int",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=3']",
                              "attachment-interface": "Port 1/1/3",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=8']",
                              "attachment-interface": "Port 1/1/8",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=9']",
                              "attachment-interface": "Port 1/1/9",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=11']",
                              "attachment-interface": "Port 1/1/11",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=12']",
                              "attachment-interface": "Port 1/1/12",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=1']",
                              "attachment-interface": "Port 1/2/1",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=2']",
                              "attachment-interface": "Port 1/2/2",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=3']",
                              "attachment-interface": "Port 1/2/3",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=10']",
                              "attachment-interface": "Port 1/2/10",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=11']",
                              "attachment-interface": "Port 1/2/11",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:untagged-int",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=12']",
                              "attachment-interface": "Port 1/2/12",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=13']",
                              "attachment-interface": "Port 1/2/13",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            }
                          ]
                        },
                        {
                          "service-type": "ietf-vpn-common:l3vpn",
                          "sap": [
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/lag[lag-id='10']",
                              "attachment-interface": "Lag 10",
                              "interface-type": "ietf-sap-ntw:lag",
                              "encapsulation-type": "ietf-vpn-common:lag-int",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=3']",
                              "attachment-interface": "Port 1/1/3",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=8']",
                              "attachment-interface": "Port 1/1/8",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=9']",
                              "attachment-interface": "Port 1/1/9",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=11']",
                              "attachment-interface": "Port 1/1/11",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=12']",
                              "attachment-interface": "Port 1/1/12",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-down"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=1']",
                              "attachment-interface": "Port 1/2/1",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=2']",
                              "attachment-interface": "Port 1/2/2",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=3']",
                              "attachment-interface": "Port 1/2/3",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=10']",
                              "attachment-interface": "Port 1/2/10",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=11']",
                              "attachment-interface": "Port 1/2/11",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:untagged-int",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=12']",
                              "attachment-interface": "Port 1/2/12",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:qinq",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=2/card=2/port=13']",
                              "attachment-interface": "Port 1/2/13",
                              "interface-type": "ietf-sap-ntw:phy",
                              "encapsulation-type": "ietf-vpn-common:dot1q",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            },
                            {
                              "sap-id": "/nsp-service:services/service-layer/l3vpn[service-id='vprn23']/endpoint[endpoint-id='11.11.11.11-int1']",
                              "parent-termination-point": "/nsp-equipment:network/network-element[ne-id='11.11.11.11']/hardware-component/port[component-id='shelf=1/slot=1/card=1/slot=1/card=1/port=8']",
                              "attachment-interface": "int1",
                              "interface-type": "ietf-sap-ntw:logical",
                              "encapsulation-type": "ietf-vpn-common:qinany",
                              "role": "ietf-sap-ntw:uni",
                              "sap-status": {
                                "status": "ietf-vpn-common:op-up"
                              },
                              "service-status": {
                                "status": "ietf-vpn-common:op-up"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "node-id": "11.11.11.11",
                      "ietf-network-topology:termination-point": [
                        {
                          "tp-id": "Port 1/1/1",
                          "ietf-l2-topology:l2-termination-point-attributes": {
                            "interface-name": "Port 1/1/1",
                            "mac-address": "C4:DB:01:01:00:01",
                            "encapsulation-type": "ietf-l2-topology:ethernet",
                            "lag": false,
                            "unnumbered-id": [
                              35684352
                            ],
                            "member-link-tp": [],
                            "nsp-ietf-network-topology:nsp-attributes": []
                          },
                          "ietf-l3-unicast-topology:l3-termination-point-attributes": {}
                        }
                      ],
                      "ietf-l2-topology:l2-node-attributes": {
                        "name": "sr11",
                        "management-mac": "C4:DB:FF:00:00:00",
                        "management-address": [
                          "135.228.148.120"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-yang-mapping-converter:nsp-yang-mapping-converter": {
      "get": {
        "tags": [
          "UploadMappingFiles"
        ],
        "operationId": "getIETFMappingFiles",
        "description": "The parameters and request body are for method: getIETFMappingFiles. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-yang-mapping-converter:nsp-yang-mapping-converter": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "tracking-handler": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "java-class-path": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "java-code": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "page-number": {
                                      "type": "number"
                                    },
                                    "page": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "sync-classes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "dest-class-path": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "is-root-class": {
                                "type": "boolean"
                              },
                              "dest-ne-id-field-name": {
                                "type": "string"
                              },
                              "dest-ne-id-field-step": {
                                "type": "string"
                              },
                              "support-creation": {
                                "type": "boolean"
                              },
                              "support-deletion": {
                                "type": "boolean"
                              },
                              "delete-object-filter-ref": {
                                "type": "string"
                              },
                              "support-create-on-modify-event": {
                                "type": "boolean"
                              },
                              "default-instances": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "src-classes": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "src-class-path": {
                                      "type": "string"
                                    },
                                    "is-global": {
                                      "type": "boolean"
                                    },
                                    "custom-handler-ref": {
                                      "type": "string"
                                    },
                                    "tracking-handler-ref": {
                                      "type": "string"
                                    },
                                    "is-resync": {
                                      "type": "boolean"
                                    },
                                    "support-deletion": {
                                      "type": "boolean"
                                    },
                                    "tracking-fields": {
                                      "type": "object"
                                    },
                                    "full-resync-search-by-fields": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "@": {
                                            "type": "object",
                                            "properties": {
                                              "nsp-model:schema-nodeid": {
                                                "type": "string"
                                              },
                                              "nsp-model:identifier": {
                                                "type": "string"
                                              },
                                              "nsp-model:creation-time": {
                                                "type": "string"
                                              },
                                              "nsp-model:last-modified-time": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "step": {
                                            "type": "string"
                                          },
                                          "expression": {
                                            "type": "string"
                                          },
                                          "expression-converter-ref": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "nsp-module-set": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "java-script": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "script-id": {
                                "type": "string"
                              },
                              "body": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "java-interface": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "delete-object-filter": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "java-class-path": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "java-code": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "page-number": {
                                      "type": "number"
                                    },
                                    "page": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "custom-handler": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "java-class-path": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "java-code": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "page-number": {
                                      "type": "number"
                                    },
                                    "page": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-yang-mapping-converter:nsp-yang-mapping-converter": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter",
                      "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter"
                    },
                    "tracking-handler": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "java-class-path": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                        "version": "2.0.2",
                        "java-code": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler/java-code",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler']/java-code[page-number='1']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "page-number": 1,
                            "page": "/**\n * ***************************************************************************\n *\n * $RCSfile$\n *\n * <Your Name Here>\n *\n * ***************************************************************************\n *\n * $Revision$\n *\n * $Id$\n *\n * ***************************************************************************\n *\n * Copyright (c) 2022 NOKIA Inc. All Rights Reserved. Please read the associated COPYRIGHTS file for more details.\n *\n * ***************************************************************************\n */\npackage com.nokia.nsp.md.converter.yang.plugin;\n\nimport com.alu.nms.common.util.model.ModelFdn;\nimport com.google.common.net.InetAddresses;\nimport com.google.common.primitives.Ints;\nimport com.google.common.util.concurrent.ThreadFactoryBuilder;\nimport com.nokia.nsp.md.common.notif.ObjectCreation;\nimport com.nokia.nsp.md.common.notif.ObjectDeletion;\nimport com.nokia.nsp.md.common.notif.ObjectModification;\nimport com.nokia.nsp.md.common.notif.ObjectReplacement;\nimport com.nokia.nsp.md.converter.api.IMdConverterFw;\nimport com.nokia.nsp.md.converter.yang.plugin.common.ICustomHandler;\nimport com.nokia.nsp.md.converter.yang.plugin.common.IHandleDeleteTracking;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SrcClass;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SyncClass;\n\nimport com.nokia.nsp.md.common.IYangObject;\nimport com.nokia.nsp.md.common.YangObject;\nimport com.nokia.nsp.md.db.yang.api.ExecutionContext;\nimport com.nokia.nsp.md.db.yang.api.QueryParameters;\nimport com.nokia.nsp.md.db.yang.api.config.YangDBConfig;\nimport com.nokia.nsp.md.db.yang.spi.DBType;\nimport com.nokia.nsp.md.ifg.yang.api.Field;\nimport com.nokia.nsp.md.ifg.yang.api.Fields;\nimport com.nokia.nsp.md.ifg.yang.api.YangException;\nimport com.nokia.nsp.md.restconf.client.api.IRestConfClient;\nimport com.nokia.nspos.persistence.api.IDB;\nimport com.nokia.nspos.persistence.impl.db.transaction.DBRuntimeException;\nimport com.nokia.nspos.persistence.impl.db.transaction.ITransactionContext;\nimport com.nokia.nspos.persistence.impl.db.transaction.Transactor;\nimport com.nokia.nspos.persistence.impl.db.util.ModelFdnUtil;\nimport com.nokia.nspos.persistence.yang.api.IYangDB;\nimport edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n@SuppressFBWarnings({\"BX_UNBOXING_IMMEDIATELY_REBOXED\", \"DM_NUMBER_CTOR\", \"BX_UNBOXING_IMMEDIATELY_REBOXED\", \"NP_ALWAYS_NULL\", \"NP_LOAD_OF_KNOWN_NULL_VALUE\"})\npublic class L3UnicastTopologyHandler implements ICustomHandler, IHandleDeleteTracking\n{\n    private static final Logger handleSrcClassLogger = LoggerFactory.getLogger(L3UnicastTopologyHandler.class.getName() + \".handleSrcClass\");\n    private static final Logger handleUpdateLogger = LoggerFactory.getLogger(L3UnicastTopologyHandler.class.getName() + \".handleUpdate\");\n    private static final Logger logger = LoggerFactory.getLogger(L3UnicastTopologyHandler.class.getName());\n\n    private static String NETWORKS_PATH = \"/ietf-network:networks\";\n    private static String L3_NETWORK_PATH = NETWORKS_PATH + \"/network[network-id='%s']\";\n    private static final String LINK_PATH_PREFIX = \"/ietf-network-topology:link\";\n    private static final String LINK_PATH = LINK_PATH_PREFIX + \"[link-id='%s']\";\n    private static final String NODE_PATH = \"/node[node-id='%s']\";\n    private static final String TP_PATH = \"/ietf-network-topology:termination-point[tp-id='%s']\";\n\n    private static final String TP_TYPE = \"ietf-network-topology:termination-point\";\n    private static final String LINK_TYPE = \"ietf-network-topology:link\";\n    private static final String NETWORK_CLASS_PATH =\"ietf-network:/networks/network\";\n    private static final String NODE_CLASS_PATH = NETWORK_CLASS_PATH + \"/node\";\n    private static final String LINK_CLASS_PATH = NETWORK_CLASS_PATH + \"/\" + LINK_TYPE;\n    private static final String SR_MPLS_TYPE = \"ietf-sr-mpls-topology:sr-mpls\";\n\n    private static final String NETWORK_ID = \"network-id\";\n    private static final String NODE_ID = \"node-id\";\n    private static final String LINK_ID = \"link-id\";\n    private static final String TP_ID = \"tp-id\";\n    private static final String NAME = \"name\";\n    private static final String ROUTER_ID = \"router-id\";\n    private static final String IP_ADDRESS = \"ip-address\";\n    private static final String ID = \"id\";\n    private static final String PREFIX = \"prefix\";\n    private static final String MSDS = \"msds\";\n    private static final String SIDS = \"sids\";\n    private static final String MSD_TYPE = \"msd-type\";\n    private static final String MSD_VALUE= \"msd-value\";\n    private static final String VALUE_TYPE= \"value-type\";\n    private static final String SID= \"sid\";\n    private static final String ADDRESS_FAMILY= \"address-family\";\n    private static final String IS_ELG_PROT= \"is-eligible-for-protection\";\n    private static final String IS_LOCAL= \"is-local\";\n    private static final String IS_PART_SET= \"is-part-of-set\";\n    private static final String IS_PERS= \"is-persistent\";\n    private static final String IS_ON_LAN= \"is-on-lan\";\n    private static final String WEIGHT= \"weight\";\n    private static final String SUBNET = \"subnet\";\n    private static final String NODE_TYPE = \"node-type\";\n\n    private static final String IETF_NETWORK_PATH = NETWORKS_PATH + \"/network\";\n\n    private static final String NSP_SERVICE_IGP_LAYER_PATH = \"/nsp-service:services/igp-layer\";\n    private static final String NSP_SERVICE_ADMIN_DOMAIN_PATH = NSP_SERVICE_IGP_LAYER_PATH + \"/admin-domain[name='%s']\";\n    private static final String NSP_SERVICE_ROUTING_INS_PATH = \"/routing-instance[id='%s']\";\n    private static final String NSP_SERVICE_SUBNET_PATH = \"/subnet[id='%s']\";\n    private static final String NSP_SERVICE_LINK_PATH = NSP_SERVICE_IGP_LAYER_PATH + \"/ip-links[name='%s']\";\n    private static final String NSP_SERVICE_GENERIC_PREFIX = NSP_SERVICE_IGP_LAYER_PATH + \"/admin-domain/routing-instance/prefix\";\n\n    private static final String CREATE = \"CREATE\";\n    private static final String UPDATE = \"UPDATE\";\n    private static final String DELETE = \"DELETE\";\n\n    private static final String L2_NETWORK_ID = \"L2Topology\";\n    private static final String L2_NETWORK_PATH = String.format(L3_NETWORK_PATH, L2_NETWORK_ID);\n    private static final String NETWORK_REF = \"network-ref\";\n    private static final String NODE_REF = \"node-ref\";\n    private static final String TP_REF = \"tp-ref\";\n    private static final String LINK_REF = \"link-ref\";\n\n    private static final String SUBINTERFACE_FILTER = \"/nsp-network:network/node[node-id='%s']/node-root/\" +\n            \"openconfig-interfaces:interfaces/interface/subinterfaces/subinterface\";\n    private static final String SUBINTERFACE_UNNUM_FILTER = \"[index='%s']\";\n    private static final String SUPPORTING_NETWORK = \"supporting-network\";\n    private static final String SUPPORTING_NODE = \"supporting-node\";\n    private static final String SUPPORTING_TP = \"supporting-termination-point\";\n    private static final String SUPPORTING_LINK = \"supporting-link\";\n\n    private static final String ADMIN_DOMAIN_SRC_PATH = \"nsp-service:/services/igp-layer/admin-domain\";\n    private static final String ADMIN_DOMAIN_FIELDS = \"name\";\n    private static final String IP_LINK_SRC_PATH =  \"nsp-service:/services/igp-layer/ip-links\";\n    private static final String IP_LINK_FIELDS = \"admin-domains;protocol;name;destination-node;source-node;ip-address;\" +\n            \"cost;te-metric;latency;opposite-link;isis-level;bw;available-bw;un-resv-bw;one-way-min-delay;one-way-max-delay;\" +\n            \"srg-labels;sids\";\n    private static final String ROUTING_INSTANCE_SRC_PATH =  \"nsp-service:/services/igp-layer/admin-domain/routing-instance\";\n    private static final String ROUTING_INSTANCE_FIELDS = \"node-type;protocols;id;name;router/ne;router-id;\" +\n            \"prefix(ip-address;metric);msds\";\n    private static final String SUBNET_SRC_PATH =  \"nsp-service:/services/igp-layer/admin-domain/subnet\";\n    private static final String SUBNET_FIELDS = \"node-type;protocol;id;name;dr-ip-address\";\n    private static final String PREFIX_SRC_PATH =  \"nsp-service:/services/igp-layer/admin-domain/routing-instance/prefix\";\n\n    public static final boolean TE_TOPOLOGY_ENABLED = true;\n    private static final String TIME_FIELD_LAST_MODIFIED = \"lastModifiedTime\";\n\n    private List<String> srcClasses = new ArrayList<> (Arrays.asList(\n            \"nsp-service:/services/igp-layer/admin-domain\",\n            \"nsp-service:/services/igp-layer/admin-domain/routing-instance\",\n            \"nsp-service:/services/igp-layer/admin-domain/routing-instance/prefix\",\n            \"nsp-service:/services/igp-layer/admin-domain/subnet\",\n            \"nsp-service:/services/igp-layer/ip-links\"\n    ));\n\n    private static Map<String, Set<String>> supportingNodeMap = new ConcurrentHashMap();\n    private static Map<String, String> supportingTpMap = new ConcurrentHashMap();\n    private static Map<String, String> supportingLinkMap = new ConcurrentHashMap();\n    private static Map<String, String> oppLinkMap = new ConcurrentHashMap();\n\n    private ScheduledExecutorService correlationService;\n    private ThreadPoolExecutor correlationWorker;\n    private static Map<String, L2TpCreateTask> l2TpCreateEvents = new ConcurrentHashMap();\n    private static Map<String, L2TpDeleteTask> l2TpDeleteEvents = new ConcurrentHashMap();\n    private static Map<String, L2LinkCreateTask> l2LinkCreateEvents = new ConcurrentHashMap();\n    private static Map<String, L2LinkDeleteTask> l2LinkDeleteEvents = new ConcurrentHashMap();\n\n    public L3UnicastTopologyHandler() {\n        try {\n            YangPluginMdConverterProvider mdConverterFw = YangPluginMdConverterProvider.getInstance();\n            IMdConverterFw converterFw = mdConverterFw.getiMdConverterFw();\n            IYangDB yangDB = converterFw.getIYangDB();\n            populateSuportingNodeMap(yangDB);\n            populateSuportingTpMap(yangDB);\n            populateSuportingLinkMap(yangDB);\n            correlationWorker = new ThreadPoolExecutor(\n                    1, 2, 5L, TimeUnit.MINUTES, new LinkedBlockingQueue<>(),\n                    new ThreadFactoryBuilder().setNameFormat(\"L3-correlaion-worker-%d\").build());\n            correlationWorker.allowCoreThreadTimeOut(true);\n        }\n        catch (Exception e) {\n            logger.warn(\"Could not populate the correlation cache\");\n        }\n    }\n\n    void handleL2CreateEvent(ObjectCreation aInObjectNotification, IMdConverterFw aInMdConverterFw) {\n        String instanceId = aInObjectNotification.getInstanceId();\n        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - handleL2CreateEvent - {}\", instanceId);\n        }\n        if(instanceId.contains(L2_NETWORK_PATH)) {\n            if (instanceId.equals(L2_NETWORK_PATH)) {\n                QueryParameters qp = getFilteredQueryParameters(NETWORK_ID);\n                qp.setDepth(2);\n                List<IYangObject> l3NetworkObjList = yangDB.getMany(IETF_NETWORK_PATH, qp);\n                if(l3NetworkObjList != null && !l3NetworkObjList.isEmpty()) {\n                    for(IYangObject l3NetworkObj : l3NetworkObjList) {\n                        String networkId = (String) l3NetworkObj.get(NETWORK_ID);\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - NETWORK ID : {}\", networkId);\n                        }\n                        if(networkId != null && (networkId.contains(\"-ospf\") || networkId.contains(\"-isis\"))) {\n                            String supportingNetworkIdentifier = String.format(L3_NETWORK_PATH, networkId) + \"/\" + SUPPORTING_NETWORK;\n                            if(!yangDB.exists(supportingNetworkIdentifier)) {\n                                logger.debug(\"L3 - createSupportingNetwork {}\", instanceId);\n                                createSupportingNetwork(yangDB, getFilteredQueryParameters(null), networkId, instanceId);\n                            }\n                        }\n                    }\n                }\n            } else if (instanceId.contains(TP_TYPE)) {\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                String port = StringUtils.substringBetween(instanceId, \"[tp-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    if (l2TpCreateEvents.containsKey(neId)) {\n                        L2TpCreateTask l2TpTask = l2TpCreateEvents.get(neId);\n                        if(l2TpDeleteEvents.containsKey(neId) && l2TpDeleteEvents.get(neId).portsToDelete.contains(port)) {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} not added to the queue {} as it was in the list to be removed\", port, neId);\n                            }\n                            l2TpDeleteEvents.get(neId).portsToDelete.remove(port);\n                        }\n                        else {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} added to the queue {} \", port, neId);\n                            }\n                            l2TpTask.portsToAdd.put(port, 1);\n                        }\n                    } else {\n                        L2TpCreateTask tpTask = new L2TpCreateTask(neId, port, aInMdConverterFw);\n                        l2TpCreateEvents.put(neId, tpTask);\n                    }\n                    synchronized (this) {\n                        if (correlationService == null || correlationService.isShutdown()) {\n                            logger.debug(\"L3 - L2 - Correlation - correlationService has been started that will run periodically until correlation is complete\");\n                            correlationService = Executors.newScheduledThreadPool(1,\n                                    new ThreadFactoryBuilder().setNameFormat(\"L3-CorrelationHandler-to-L2\").build());\n                            correlationService.scheduleAtFixedRate(() -> correlateTpsAndLinks(), 2, 2, TimeUnit.MINUTES);\n                        }\n                    }\n                }\n            } else if (instanceId.contains(\"/node\")) {\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - NE ID - {}\", neId);\n                    }\n                    List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n                    for(List<String> router: routers) {\n                        String networkId = router.get(1) + \"-\" + router.get(2);\n                        String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                        String supportingNodeIden = nodeIdentifer + \"/\" + SUPPORTING_NODE;\n                        if(!yangDB.exists(supportingNodeIden) && yangDB.exists(nodeIdentifer)) {\n                            logger.debug(\"L3 - createSupportingNode {}\", instanceId);\n                            createSupportingNode(yangDB, getFilteredQueryParameters(null), networkId, router.get(0), instanceId, nodeIdentifer);\n                        }\n                    }\n                }\n            } else if(instanceId.contains(LINK_TYPE)) {\n                if(!l2LinkCreateEvents.containsKey(instanceId)) {\n                    L2LinkCreateTask l2LinkCreateTask = new L2LinkCreateTask(instanceId, aInMdConverterFw);\n                    l2LinkCreateEvents.put(instanceId, l2LinkCreateTask);\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - correlation - links to correlate: {}\", l2LinkCreateEvents.keySet());\n                    }\n                    startCorrelationService();\n                }\n            }\n        }\n    }\n\n    List<String> getTpDetails(String[] tpDetails, IYangDB yangDB, IMdConverterFw aInMdConverterFw, List<String> aInNetworkDetails) {\n        List<String> l3SourceTps = new ArrayList<>();\n        if(tpDetails != null && tpDetails.length == 2) {\n            String sourceNeId = tpDetails[0];\n            String sourcePort = tpDetails[1];\n            List<List<String>> routers = getRouterDetailsFromNeId(yangDB, sourceNeId);\n            if(routers == null) {\n                return l3SourceTps;\n            }\n            for(List<String> router: routers) {\n                String networkId = router.get(1) + \"-\" + router.get(2);\n                String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                if(aInNetworkDetails != null) {\n                    aInNetworkDetails.add(networkId);\n                }\n                QueryParameters qp = getFilteredQueryParameters(\"tp-id;\" + SUPPORTING_TP);\n                qp.setDepth(2);\n                List<IYangObject> tpList = yangDB.getMany(nodeIdentifer + \"/\" + TP_TYPE, qp);\n                if(tpList != null && !tpList.isEmpty()) {\n                    for(IYangObject tp : tpList) {\n                        String tpId = (String) tp.get(\"tp-id\");\n                        String portName = null;\n                        if(tp.get(SUPPORTING_TP) == null || ((List<IYangObject>) tp.get(SUPPORTING_TP)).isEmpty()) {\n                            portName = getPortDetailsFromDb(tpId, yangDB, sourceNeId);\n                            if (portName == null) {\n                                //try to get the details via openconfig restconf. It works for mdm managed nodes\n                                portName = getSubInterfaces(sourceNeId, aInMdConverterFw, tpId);\n                            }\n                        }\n                        else {\n                            List<IYangObject> supportingTp = (List<IYangObject>) tp.get(SUPPORTING_TP);\n                            String tpRef = (String) supportingTp.get(0).get(TP_REF);\n                            portName = StringUtils.substringBetween(tpRef, \"[tp-id='\", \"']\");\n                        }\n                        if(portName != null && portName.equals(sourcePort)) {\n                            l3SourceTps.add(router.get(0) + \":\" + tpId);\n                        }\n                    }\n                }\n            }\n        }\n        return l3SourceTps;\n    }\n\n    void handleL2DeleteEvent(ObjectDeletion aInObjectNotification, IMdConverterFw aInMdConverterFw) {\n        String instanceId = aInObjectNotification.getInstanceId();\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - handleL2DeleteEvent - {}\", instanceId);\n        }\n        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n\n        if(instanceId.contains(L2_NETWORK_PATH)) {\n            if (instanceId.equals(L2_NETWORK_PATH)) {\n                QueryParameters qp = getFilteredQueryParameters(NETWORK_ID);\n                qp.setDepth(2);\n                List<IYangObject> l3NetworkObjList = yangDB.getMany(IETF_NETWORK_PATH, qp);\n                if(l3NetworkObjList != null && !l3NetworkObjList.isEmpty()) {\n                    for(IYangObject l3NetworkObj : l3NetworkObjList) {\n                        String networkId = (String) l3NetworkObj.get(NETWORK_ID);\n                        if(networkId != null && (networkId.contains(\"-ospf\") || networkId.contains(\"-isis\"))) {\n                            String supportingNetworkIdentifier = String.format(L3_NETWORK_PATH, networkId) + \"/\" + SUPPORTING_NETWORK;\n                            if(yangDB.exists(supportingNetworkIdentifier)) {\n                                updateInDb(yangDB, null, supportingNetworkIdentifier, null, null, DELETE, null, qp);\n                            }\n                        }\n                    }\n                }\n            } else if (instanceId.contains(TP_TYPE)) {\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                String port = StringUtils.substringBetween(instanceId, \"[tp-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    if (l2TpDeleteEvents.containsKey(neId)) {\n                        L2TpDeleteTask l2TpTask = l2TpDeleteEvents.get(neId);\n                        if(l2TpCreateEvents.containsKey(neId) && l2TpCreateEvents.get(neId).portsToAdd.containsKey(port)) {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} not added to the delete queue {} as it was in the list to be added\", port, neId);\n                            }\n                            l2TpCreateEvents.get(neId).portsToAdd.remove(port);\n                        }\n                        else {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} added to the delete queue {} \", port, neId);\n                            }\n                            l2TpTask.portsToDelete.add(port);\n                        }\n                    } else {\n                        L2TpDeleteTask tpTask = new L2TpDeleteTask(neId, port, aInMdConverterFw);\n                        l2TpDeleteEvents.put(neId, tpTask);\n                    }\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(l2TpDeleteEvents.keySet().toString());\n                    }\n                    startCorrelationService();\n                }\n            } else if (instanceId.contains(\"/node\")) {\n                if(supportingNodeMap.containsKey(instanceId)) {\n                    for (String nodeIden : supportingNodeMap.get(instanceId)) {\n                        String supportingNodeIden = nodeIden + \"/\" + SUPPORTING_NODE;\n                        if (yangDB.exists(supportingNodeIden)) {\n                            logger.debug(\"L3 - deleteSupportingNode {}\", supportingNodeIden);\n                            updateInDb(yangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                            String supportingTpIden = nodeIden + \"/\" + TP_TYPE + \"/\" + SUPPORTING_TP;\n                            if(yangDB.exists(supportingTpIden)) {\n                                logger.debug(\"L3 - deleteSupportingTps on node {}\", supportingNodeIden);\n                                updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                supportingTpMap.entrySet().removeIf(entry -> entry.getKey().startsWith(instanceId));\n                            }\n                        }\n                    }\n                    supportingNodeMap.remove(instanceId);\n                    return;\n                }\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n                    if(routers != null) {\n                        for (List<String> router : routers) {\n                            String networkId = router.get(1) + \"-\" + router.get(2);\n                            String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                            String supportingNodeIden = nodeIdentifer + \"/\" + SUPPORTING_NODE;\n                            if (yangDB.exists(supportingNodeIden)) {\n                                logger.debug(\"L3 - deleteSupportingNode {}\", supportingNodeIden);\n                                updateInDb(yangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                            }\n                        }\n                    }\n                }\n            } else if(instanceId.contains(LINK_TYPE)) {\n                if(!l2LinkDeleteEvents.containsKey(instanceId)) {\n                    L2LinkDeleteTask l2LinkDeleteTask = new L2LinkDeleteTask(instanceId, aInMdConverterFw);\n                    l2LinkDeleteEvents.put(instanceId, l2LinkDeleteTask);\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - correlation - links to delete correlation: {}\", l2LinkDeleteEvents.keySet());\n                    }\n                    startCorrelationService();\n                }\n            }\n        }\n    }\n\n    private void deleteL2SupportingTps(List<String> portsToDelete, String neId, IYangDB yangDB) {\n        List<String> deletedPorts = new ArrayList<>();\n        for(String port : portsToDelete) {\n            String instanceId = L2_NETWORK_PATH + String.format(NODE_PATH, neId) + String.format(TP_PATH, port);\n            if (supportingTpMap.containsKey(instanceId)) {\n                String supportingTpIden = supportingTpMap.get(instanceId) + \"/\" + SUPPORTING_TP;\n                if (yangDB.exists(supportingTpIden)) {\n                    logger.debug(\"L3 - deleteSupportingTp {}\", supportingTpIden);\n                    updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                }\n                supportingTpMap.remove(instanceId);\n                deletedPorts.add(port);\n            }\n        }\n\n        portsToDelete.removeAll(deletedPorts);\n        if(portsToDelete.isEmpty()) {\n            return;\n        }\n\n        List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n        if(routers != null) {\n            for (List<String> router : routers) {\n                String networkId = router.get(1) + \"-\" + router.get(2);\n                String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                QueryParameters qp = getFilteredQueryParameters(\"tp-id;\" + SUPPORTING_TP);\n                qp.setDepth(2);\n                List<IYangObject> tpList = yangDB.getMany(nodeIdentifer + \"/\" + TP_TYPE, qp);\n                if (tpList != null && !tpList.isEmpty()) {\n                    for (IYangObject tp : tpList) {\n                        if (tp.get(SUPPORTING_TP) != null) {\n                            String supportingTpRef = (String) ((IYangObject) ((List) tp.get(SUPPORTING_TP)).get(0)).get(TP_REF);\n                            String port = StringUtils.substringBetween(supportingTpRef, \"[tp-id='\", \"']\");\n                            if (portsToDelete.contains(port)) {\n                                String tpId = (String) tp.get(TP_ID);\n                                String tpIden = nodeIdentifer + String.format(TP_PATH, tpId);\n                                String supportingTpIden = tpIden + \"/\" + SUPPORTING_TP;\n                                if (yangDB.exists(supportingTpIden)) {\n                                    logger.debug(\"L3 - deleteSupportingTp {}\", supportingTpIden);\n                                    updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                }\n                                portsToDelete.remove(port);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private void correlateTpsAndLinks() {\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - Running routine correlation task\");\n        }\n        Map<String, L2TpCreateTask> l2TpCreateTaskMap =new HashMap<>(l2TpCreateEvents);\n        l2TpCreateEvents.clear();\n        Map<String, L2TpDeleteTask> l2TpDeleteTaskMap =new HashMap<>(l2TpDeleteEvents);\n        l2TpDeleteEvents.clear();\n        Map<String, L2LinkCreateTask> l2LinkCreateTaskMap =new HashMap<>(l2LinkCreateEvents);\n        l2LinkCreateEvents.clear();\n        Map<String, L2LinkDeleteTask> l2LinkDeleteTaskMap =new HashMap<>(l2LinkDeleteEvents);\n        l2LinkDeleteEvents.clear();\n\n        if(!l2TpCreateTaskMap.isEmpty()) {\n            for(L2TpCreateTask l2TpTask : l2TpCreateTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate ports creation on {}\", l2TpTask.neId);\n                correlationWorker.execute(l2TpTask);\n            }\n        }\n\n        if(!l2TpDeleteTaskMap.isEmpty()) {\n            for(L2TpDeleteTask l2TpTask : l2TpDeleteTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate ports deletion on {}\", l2TpTask.neId);\n                correlationWorker.execute(l2TpTask);\n            }\n        }\n\n        if(!l2LinkCreateTaskMap.isEmpty()) {\n            for(L2LinkCreateTask l2LinkTask : l2LinkCreateTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate link creation {}\", l2LinkTask.linkId);\n                correlationWorker.execute(l2LinkTask);\n            }\n        }\n\n        if(!l2LinkDeleteTaskMap.isEmpty()) {\n            for(L2LinkDeleteTask l2LinkTask : l2LinkDeleteTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate link deletion {}\", l2LinkTask.linkId);\n                correlationWorker.execute(l2LinkTask);\n            }\n        }\n\n        if(l2TpCreateEvents.isEmpty() && l2TpDeleteEvents.isEmpty()\n                && l2LinkCreateEvents.isEmpty() && l2LinkDeleteEvents.isEmpty()) {\n            logger.debug(\"L3 - correlationService is shutdown\");\n            correlationService.shutdown();\n        }\n\n    }\n\n    @Override\n    public int readSrcObjectDepth(String aInSrcClassPath) {\n        if(aInSrcClassPath.equals(ROUTING_INSTANCE_SRC_PATH)) {\n            return 3;\n        }\n        else {\n            return 2;\n        }\n    }\n\n    @Override\n    public Fields srcFilterFieldsToInclude(String aInSrcClassPath) {\n        if(aInSrcClassPath.equals(ADMIN_DOMAIN_SRC_PATH)) {\n            return Fields.parse(ADMIN_DOMAIN_FIELDS);\n        }\n        else if(aInSrcClassPath.equals(IP_LINK_SRC_PATH)) {\n            return Fields.parse(IP_LINK_FIELDS);\n        }\n        else if(aInSrcClassPath.equals(ROUTING_INSTANCE_SRC_PATH)) {\n            return Fields.parse(ROUTING_INSTANCE_FIELDS);\n        }\n        else if(aInSrcClassPath.equals(SUBNET_SRC_PATH)) {\n            return Fields.parse(SUBNET_FIELDS);\n        }\n        else {\n            return null;\n        }\n    }\n\n    @Override\n    public void handlePostResyncDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        //this method is called after the fwk deletes the object. extra post processing logics like cleaning up routing instances/tp.\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"POST RE-SYNC DELETE - aInSrcClass:{}, aInSyncClass:{}\", aInSrcClass, aInSyncClass);\n        }\n    }\n\n    @Override\n    public void handleTrackedDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, String aInIdentifier, Map<String, Object> aInData,  YangPluginMdConverterProvider aInYangPlugin)\n    {\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInIdentifier:{}, aInData:{}\", aInSrcClass, aInSyncClass, aInIdentifier, aInData);\n        }\n        IMdConverterFw converterFw = aInYangPlugin.getiMdConverterFw();\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n        IYangDB yangDB = converterFw.getIYangDB();\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInSrcClass.getSrcClassPath().equals(IP_LINK_SRC_PATH)) {\n            Map<String, Object> linkObj = new HashMap<>();\n            linkObj.put(NAME, StringUtils.substringBetween(aInIdentifier, \"ip-links[name='\", \"'\"));\n            logger.debug(\"L3 - handleTrackedDelete - DELETING LINK - {} \", aInIdentifier);\n            deleteLink(yangDB, qp, linkObj, dbConfig, null);\n        }\n        else if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n            String ipAddress = StringUtils.substringBetween(aInIdentifier, \"prefix[ip-address='\", \"'\");\n            logger.debug(\"L3 - handleTrackedDelete - DELETING PREFIX {}, {} \", aInIdentifier, ipAddress);\n            deletePrefix(yangDB, qp, aInIdentifier, ipAddress);\n        }\n        else if(aInSrcClass.getSrcClassPath().equals(SUBNET_SRC_PATH)) {\n            String networkId = extractAdminDomain(aInIdentifier) + \"-\" + aInData.get(\"protocols\");\n            logger.debug(\"L3 - handleTrackedDelete - DELETING SUBNET - {}, {} \", aInIdentifier, networkId);\n            deleteNode(yangDB, qp, aInData, dbConfig, networkId, null);\n        }\n        else if(aInSrcClass.getSrcClassPath().equals(ADMIN_DOMAIN_SRC_PATH)) {\n            String adminDomain = StringUtils.substringBetween(aInIdentifier, \"admin-domain[name='\", \"'\");\n            IYangObject yangObj = new YangObject();\n            yangObj.setProperty(NAME, adminDomain);\n            logger.debug(\"L3 - handleTrackedDelete - DELETING NETWORK - {} \", aInIdentifier);\n            deleteNetwork(yangDB, qp, yangObj);\n        }\n    }\n\n\n    public void handleResync(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInExistingObject,\n                             String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        if(handleSrcClassLogger.isDebugEnabled()) {\n            handleSrcClassLogger.debug(\"---------------------------------------------------------RE-SYNC----------------------------------------------------------------------\");\n            handleSrcClassLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n        }\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n\n        if (aInSyncClass.getDestClassPath().equals(NETWORK_CLASS_PATH)) {\n            handleSrcClassLogger.debug(\"L3 - RESYNC NETWORK - {}\", aInSrcObject.get(NAME) );\n            createL3Network(aInSrcObject, yangDB, dbConfig, converterFw);\n        }\n        else if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            Map<String, Object> srcObject = aInSrcObject.asMap();\n            handleSrcClassLogger.debug(\"L3 - RESYNC NODE - {}\", srcObject.get(ID));\n            String networkId = getNetworkIdFromMeta(yangDB, srcObject);\n            if(networkId == null) {\n                return;\n            }\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            QueryParameters qp = getFilteredQueryParameters(null);\n            //could be routing instance or subnet.\n            if(yangDB.exists(networkPathIdentifier, qp)) {\n                if (srcObject.get(NODE_TYPE).equals(SUBNET)) {\n                    if(handleSrcClassLogger.isDebugEnabled()) {\n                        handleSrcClassLogger.debug(\"L3 - SUBNET\");\n                    }\n                    createSubnet(srcObject, yangDB, dbConfig, networkId, null);\n                } else {\n                    if(handleSrcClassLogger.isDebugEnabled()) {\n                        handleSrcClassLogger.debug(\"L3 - NODE\");\n                    }\n                    createRoutingInstance(srcObject, yangDB, networkId);\n                }\n            }\n            else {\n                handleSrcClassLogger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", srcObject.get(ID));\n            }\n\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n            Map<String, Object> srcObject = aInSrcObject.asMap();\n            handleSrcClassLogger.debug(\"L3 - RESYNC LINK - {}\", srcObject.get(NAME));\n            String networkId = getNetworkIdFromLink((List<String>) srcObject.get(\"admin-domains\"), (String) srcObject.get(\"protocol\"));\n            if(networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                QueryParameters qp = getFilteredQueryParameters(null);\n                if (yangDB.exists(networkPathIdentifier, qp)) {\n                    createLink(srcObject, yangDB, converterFw, networkId, false, null);\n                }\n                else {\n                    handleSrcClassLogger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", srcObject.get(NAME));\n                }\n            }\n        }\n    }\n\n    @Override\n    public void handleCreateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectCreation aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n\n        if(aInEvent.getInstanceId().contains(L2_NETWORK_PATH)) {\n            handleL2CreateEvent(aInEvent, converterFw);\n            return;\n        }\n\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"---------------------------------------------------CREATION---------------------------------------------------------------------------\");\n        }\n        IYangDB yangDB = converterFw.getIYangDB();\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n        if (aInSyncClass.getDestClassPath().equals(NETWORK_CLASS_PATH)) {\n            logger.debug(\"L3 - CREATE NETWORK\");\n            createL3Network(aInEvent.getEntity(), yangDB, dbConfig, converterFw);\n        }\n        else if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n                logger.debug(\"L3 - CREATE PREFIX\");\n                createPrefix(yangDB, getFilteredQueryParameters(null), aInEvent);\n            }\n            else {\n                logger.debug(\"L3 - CREATE NODE\");\n                Map<String, Object> srcObject = aInEvent.getEntity().asMap();\n                String id = (String) srcObject.get(ID);\n                String adminDomain = getAdminDomainFromMeta(srcObject);\n                String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n                nspServiceNodeIden += srcObject.get(NODE_TYPE).equals(SUBNET) ? String.format(NSP_SERVICE_SUBNET_PATH, id)\n                        : String.format(NSP_SERVICE_ROUTING_INS_PATH, id);\n                QueryParameters qp = srcObject.get(NODE_TYPE).equals(SUBNET) ?\n                        getFilteredQueryParameters(\"node-type;protocol;id;name;dr-ip-address\") :\n                        getFilteredQueryParameters(\"node-type;protocols;id;name;router/ne;router-id;prefix(ip-address;metric)\");\n                //IYangObject nodeObj = yangDB.getSingle(nspServiceNodeIden, qp);\n                //GetMany for debug\n                qp.setLimit(2);\n                List<IYangObject> nodeObjs = yangDB.getMany(nspServiceNodeIden, qp);\n                IYangObject nodeObj=null;\n                if(nodeObjs.size()>0){\n                    nodeObj=nodeObjs.get(0);\n                }\n                if(nodeObjs.size()>1){\n                    logger.error(\"More than one object returned for path: {}\", nspServiceNodeIden);\n                }\n\n                if (nodeObj != null) {\n                    Map<String, Object> nodeMap = nodeObj.asMap();\n                    String networkId = getNetworkIdFromMeta(yangDB, nodeMap);\n                    if(networkId == null) {\n                        return;\n                    }\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    qp = getFilteredQueryParameters(null);\n                    //could be routing instance or subnet.\n                    if (yangDB.exists(networkPathIdentifier, qp)) {\n                        if (nodeMap.get(NODE_TYPE).equals(SUBNET)) {\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - CREATE SUBNET\");\n                            }\n                            createSubnet(nodeMap, yangDB, dbConfig, networkId, null);\n                        } else {\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - CREATE ROUTING-INSTANCE\");\n                            }\n                            createRoutingInstance(nodeMap, yangDB, networkId);\n                        }\n                    }\n                } else {\n                    logger.warn(\"L3 - Not found: \" + nspServiceNodeIden);\n                }\n            }\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n            logger.debug(\"L3 - CREATE LINK\");\n            String name = (String) aInEvent.getEntity().get(NAME);\n            String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n            QueryParameters qp = getFilteredQueryParameters(IP_LINK_FIELDS);\n            IYangObject linkObj = yangDB.getSingle(nspServiceIpLinkIden, qp);\n\n            if(linkObj != null) {\n                String networkId = getNetworkIdFromLink((List<String>) linkObj.get(\"admin-domains\"), (String) linkObj.get(\"protocol\"));\n                if (networkId != null) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    if (yangDB.exists(networkPathIdentifier, qp)) {\n                        createLink(linkObj.asMap(), yangDB, converterFw, networkId, true, null);\n                    } else {\n                        logger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", linkObj.get(NAME));\n                    }\n                }\n            }\n        }\n    }\n\n    void createL3Network(IYangObject aInSrcObject, IYangDB aInYangDB, YangDBConfig aInDbConfig, IMdConverterFw aInConverterFw) {\n\n        String adminDomain = (String) aInSrcObject.get(NAME);\n        if(\"UnknownDomain\".equals(adminDomain)) {\n            return;\n        }\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInSrcObject != null) {\n            String networkId = getNetworkId(aInYangDB, aInSrcObject);\n            if (networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                try {\n                    if (!aInYangDB.exists(networkPathIdentifier, qp)) {\n                        logger.debug(\"L3 - creating new network: {}\", networkId);\n                        qp = getFilteredQueryParameters(null);\n\n                        IYangObject l3NetworkObj = new YangObject();\n                        l3NetworkObj.setProperty(NETWORK_ID, networkId);\n                        IYangObject networkTypesObj = new YangObject();\n                        IYangObject l3UnicastNwObj = new YangObject();\n                        l3UnicastNwObj.setProperty(SR_MPLS_TYPE, new YangObject());\n                        networkTypesObj.setProperty(\"ietf-l3-unicast-topology:l3-unicast-topology\", l3UnicastNwObj);\n                        l3NetworkObj.setProperty(\"network-types\", networkTypesObj);\n\n                        YangObject topologyAttrObj = new YangObject();\n                        topologyAttrObj.setProperty(\"name\", aInSrcObject.get(NAME));\n                        l3NetworkObj.setProperty(\"ietf-l3-unicast-topology:l3-topology-attributes\", topologyAttrObj);\n\n                        updateInDb(aInYangDB, l3NetworkObj, \"\", NETWORKS_PATH, \"network\", CREATE, null, qp);\n\n\n                        //create supporting-network\n                        String supportingNetworkRef = getSupportingNetworkRef(aInYangDB, qp);\n                        if(supportingNetworkRef != null) {\n                            createSupportingNetwork(aInYangDB, qp, networkId, supportingNetworkRef);\n                        }\n                        /* resync is based on equipment.networkelement table and so if there are no corresponding NEs\n                        discovered for the routers, we wouldn't get any nodes. so it is important (at least for now) to\n                        get the network and build the nodes from that info instead of relying on the node resync events.\n                        */\n//                        createRoutingInstances(aInSrcObject.get(\"routing-instance\"), aInYangDB, networkId);\n//                        createSubnets(aInSrcObject.get(\"subnet\"), aInYangDB, aInDbConfig, networkId);\n                    } else {\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - network exists already - {} \", networkId);\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.error(\"L3 - Exception when creating IETF L3 network: \" + networkId, e);\n                    return;\n                }\n\n                //create TE Network\n                String teNetworkRef = createTeNetwork(networkId, aInYangDB);\n                if(teNetworkRef != null) {\n                    createTeNetworkRef(aInYangDB, getFilteredQueryParameters(null), networkId, teNetworkRef);\n                }\n            }\n        }\n    }\n\n    String createTeNetwork(String networkId, IYangDB aInYangDB) {\n        if(!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n        String teNetworkId = getTeNetworkId(networkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n        try {\n            if (!aInYangDB.exists(teNetworkPathIdentifier, qp)) {\n                logger.debug(\"TE Topology - creating new network: {}\", teNetworkId);\n\n                IYangObject networkObj = new YangObject();\n                networkObj.setProperty(NETWORK_ID, teNetworkId);\n                IYangObject networkTypesObj = new YangObject();\n                IYangObject packetTypesObj = new YangObject();\n                packetTypesObj.setProperty(\"ietf-te-topology-packet:packet\", new YangObject());\n                networkTypesObj.setProperty(\"ietf-te-topology:te-topology\", packetTypesObj);\n                networkObj.setProperty(\"network-types\", networkTypesObj);\n\n                YangObject topologyProviderIdObj = new YangObject();\n                topologyProviderIdObj.setProperty(\"topology-id\", \"\");\n                topologyProviderIdObj.setProperty(\"client-id\", 0);\n                topologyProviderIdObj.setProperty(\"provider-id\", 0);\n                networkObj.setProperty(\"ietf-te-topology:te-topology-identifier\", topologyProviderIdObj);\n\n                updateInDb(aInYangDB, networkObj, \"\", NETWORKS_PATH, \"network\", CREATE, null, qp);\n                return teNetworkPathIdentifier;\n            } else {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"TE Topology - network exists already - {} \", teNetworkId);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"TE Topology - Exception when creating TE network object {}: {}\", teNetworkId, e);\n        }\n        return  null;\n    }\n\n    void createSubnets(Object aInSubnets, IYangDB aInYangDB, YangDBConfig aInDbConfig, String networkId) {\n\n        if (aInSubnets != null && ((List) aInSubnets).size() > 0) {\n            List<IYangObject> subnets = (List<IYangObject>) aInSubnets;\n            for (IYangObject subnet : subnets) {\n                createSubnet(subnet.asMap(), aInYangDB, aInDbConfig, networkId, null);\n            }\n        }\n    }\n\n\n    void createSubnet(Map<String,Object> aInSubnet, IYangDB aInYangDB, YangDBConfig aInDbConfig, String networkId, String aInRouterId) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n        String systemId = getSubnetSystemId((String) aInSubnet.get(NAME));\n        String routerId = aInRouterId;\n        if(routerId == null) {\n            if (systemId.contains(\"dr\")) {\n                routerId = (String) aInSubnet.get(\"dr-ip-address\");\n            }\n            routerId = routerId == null ? InetAddresses.isInetAddress(systemId) ? systemId : getSubnetNodeIdFromDB(aInDbConfig, systemId, networkId) : routerId;\n            if (routerId == null) {\n                logger.error(\"Couldn't create the subnet node because router-id is null for {}\", systemId);\n                return;\n            }\n        }\n        String nodeId = routerId +\"-\"+getSubnetPsnId((String) aInSubnet.get(NAME));\n        String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n\n        if (!aInYangDB.exists(nodePathIdentifier, qp)) {\n            logger.debug(\"L3 - creating new subnet: {} on {}\", nodeId, networkId);\n            IYangObject nodeObj = new YangObject();\n            nodeObj.setProperty(NETWORK_ID, networkId);\n            nodeObj.setProperty(NODE_ID, nodeId);\n            IYangObject nodeAttrObj = new YangObject();\n            nodeAttrObj.setProperty(NETWORK_ID, networkId);\n            nodeAttrObj.setProperty(NAME, aInSubnet.get(NAME));\n            nodeAttrObj.setProperty(ROUTER_ID, Arrays.asList(new String[]{nodeId}));\n            nodeAttrObj.setProperty(\"flag\", Collections.singletonList(\"nsp-ietf-network-topology:subnet\"));\n            nodeObj.setProperty(\"ietf-l3-unicast-topology:l3-node-attributes\", nodeAttrObj);\n            logger.debug(\"L3 - createSubnet - {}\", networkPathIdentifier);\n            updateInDb(aInYangDB, nodeObj, \"\", networkPathIdentifier, \"node\", CREATE, null, qp);\n        }\n\n        //create TE network subnet\n        String teNodeRef = createTeNode(networkId, aInYangDB, nodeId, routerId);\n        if(teNodeRef != null) {\n            String teNetworkRef = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId));\n            createTeNodeRef(aInYangDB, getFilteredQueryParameters(null), networkId, nodeId, teNetworkRef, teNodeRef);\n        }\n    }\n\n    String createTeNode(String networkId,IYangDB aInYangDB, String nodeId, String teNodeId) {\n        if(!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n        String teNetworkId = getTeNetworkId(networkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n       String teNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, nodeId);\n\n        if (!aInYangDB.exists(teNodePathIdentifier, qp)) {\n            logger.debug(\"TE Topology - creating new node: {} on {}\", nodeId, teNetworkId);\n            IYangObject nodeObj = new YangObject();\n            nodeObj.setProperty(NETWORK_ID, teNetworkId);\n            nodeObj.setProperty(NODE_ID, nodeId);\n            nodeObj.setProperty(\"te-node-id\", teNodeId);\n            logger.debug(\"L3 - createTeNode - {}\", teNetworkPathIdentifier);\n            updateInDb(aInYangDB, nodeObj, \"\", teNetworkPathIdentifier, \"node\", CREATE, null, qp);\n            return teNodePathIdentifier;\n        }\n        return null;\n    }\n\n\n    void createRoutingInstances(Object aInRoutingInstances, IYangDB aInYangDB, String networkId) {\n\n        if (aInRoutingInstances != null && ((List) aInRoutingInstances).size() > 0) {\n            List<IYangObject> routingInstances = (List<IYangObject>) aInRoutingInstances;\n            for (IYangObject routingInstance : routingInstances) {\n                createRoutingInstance(routingInstance.asMap(), aInYangDB, networkId);\n            }\n        }\n    }\n\n    void createRoutingInstance(Map<String,Object> aInRoutingInstance, IYangDB aInYangDB, String networkId) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n        String nodeId = (String) aInRoutingInstance.get(ID);\n        String routerId = (String) aInRoutingInstance.get(ROUTER_ID);\n        String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n\n        if (!aInYangDB.exists(nodePathIdentifier, qp)) {\n            logger.debug(\"L3 - creating new routing instance: {} on {}\", nodeId, networkId);\n            IYangObject nodeObj = new YangObject();\n            nodeObj.setProperty(NETWORK_ID, networkId);\n            nodeObj.setProperty(NODE_ID, nodeId);\n            IYangObject nodeAttrObj = new YangObject();\n            nodeAttrObj.setProperty(NETWORK_ID, networkId);\n            nodeAttrObj.setProperty(NAME, aInRoutingInstance.get(NAME));\n            nodeAttrObj.setProperty(ROUTER_ID, Arrays.asList(new String[]{routerId}));\n            nodeAttrObj.setProperty(\"flag\", Collections.singletonList(\"nsp-ietf-network-topology:routing-instance\"));\n            nodeObj.setProperty(\"ietf-l3-unicast-topology:l3-node-attributes\", nodeAttrObj);\n\n            updateInDb(aInYangDB, nodeObj, \"\", networkPathIdentifier, \"node\", CREATE, null, qp);\n\n            //create supporting-node\n            Map routerDetails = (Map) aInRoutingInstance.get(\"router\");\n            if(routerDetails != null && routerDetails.containsKey(\"ne\")) {\n                String neId = extractNeId((String) routerDetails.get(\"ne\"));\n                if(neId != null) {\n                    String supportingNodeRef = getSupportingNodeRef(aInYangDB, qp, neId);\n                    if(supportingNodeRef != null) {\n                        String supportingNodeIden = nodePathIdentifier + \"/\" + SUPPORTING_NODE;\n                        if(!aInYangDB.exists(supportingNodeIden, qp)) {\n                            createSupportingNode(aInYangDB, qp, networkId, nodeId, supportingNodeRef, nodePathIdentifier);\n                        }\n                    }\n                }\n            }\n\n            //create prefixes\n            List<Map<String,Object>> prefixes = (List) aInRoutingInstance.get(PREFIX);\n            if(prefixes != null) {\n                Set<String> prefixSet = new HashSet<>();\n                for (Map<String, Object> prefix : prefixes) {\n                    if (!prefixSet.contains(prefix.get(IP_ADDRESS))) {\n                        prefixSet.add((String) prefix.get(IP_ADDRESS));\n                        IYangObject prefixObj = new YangObject();\n                        prefixObj.setProperty(NETWORK_ID, networkId);\n                        prefixObj.setProperty(NODE_ID, nodeId);\n                        prefixObj.setProperty(PREFIX, prefix.get(IP_ADDRESS));\n                        prefixObj.setProperty(\"metric\", prefix.get(\"metric\"));\n                        updateInDb(aInYangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, qp);\n                    }\n                }\n            }\n\n            //create sr mpls MSDs\n            List<Map<String,Object>> msds = (List) aInRoutingInstance.get(MSDS);\n            if(msds != null) {\n                IYangObject srMplsObj = new YangObject();\n                srMplsObj.setProperty(NETWORK_ID, networkId);\n                srMplsObj.setProperty(NODE_ID, nodeId);\n\n                IYangObject msdObj = new YangObject();\n                msdObj.setProperty(NETWORK_ID, networkId);\n                msdObj.setProperty(NODE_ID, nodeId);\n                srMplsObj.setProperty(MSDS, msdObj);\n\n                String nodeAttrIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\";\n                updateInDb(aInYangDB, srMplsObj, \"\", nodeAttrIden, SR_MPLS_TYPE, CREATE, null, qp);\n\n                for(Map<String, Object> msd : msds) {\n                    IYangObject nodeMsdObj = new YangObject();\n                    nodeMsdObj.setProperty(NETWORK_ID, networkId);\n                    nodeMsdObj.setProperty(NODE_ID, nodeId);\n                    nodeMsdObj.setProperty(MSD_TYPE, msd.get(MSD_TYPE));\n                    nodeMsdObj.setProperty(MSD_VALUE, msd.get(MSD_VALUE));\n                    updateInDb(aInYangDB, nodeMsdObj, \"\", nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"node-msd\", CREATE, null, qp);\n                }\n            }\n        }\n        else {\n            /** there could be updates during resync.\n             * prefix (L3) and msd (SR MPLS) could have been updated or created */\n\n            List<Map<String,Object>> prefixes = (List) aInRoutingInstance.get(PREFIX);\n            if(prefixes != null) {\n                Set<String> prefixSet = new HashSet<>();\n                for (Map<String, Object> prefix : prefixes) {\n                    String ipAddress = (String) prefix.get(IP_ADDRESS);\n                    if(!prefixSet.contains(prefix.get(IP_ADDRESS))) {\n                        String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                        QueryParameters queryParameters = getFilteredQueryParameters(null);\n                        if (aInYangDB.exists(prefixPathIden, queryParameters)) {\n                            //update\n                            logger.debug(\"L3 -  handleResync - prefix - UPDATE {}\", prefixPathIden);\n                            IYangObject prefixObj = aInYangDB.getSingle(prefixPathIden, queryParameters);\n                            if (prefixObj != null) {\n                                int metric = (int) prefix.get(\"metric\");\n                                prefixObj.setProperty(\"metric\", metric);\n                                updateInDb(aInYangDB, prefixObj, prefixPathIden, null, null, UPDATE, null, queryParameters);\n                            }\n                        } else {\n                            logger.debug(\"L3 -  handleResync - prefix - CREATE {}\", prefixPathIden);\n                            IYangObject prefixObj = new YangObject();\n                            prefixObj.setProperty(NETWORK_ID, networkId);\n                            prefixObj.setProperty(NODE_ID, nodeId);\n                            prefixObj.setProperty(PREFIX, prefix.get(IP_ADDRESS));\n                            prefixObj.setProperty(\"metric\", prefix.get(\"metric\"));\n                            updateInDb(aInYangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, qp);\n                        }\n                        prefixSet.add((String) prefix.get(IP_ADDRESS));\n                    }\n                }\n            }\n\n            List<Map<String,Object>> msds = (List) aInRoutingInstance.get(MSDS);\n            if(msds != null) {\n                //copy code from updateMsds\n                updateMsd(aInYangDB, nodeId, aInRoutingInstance, networkId);\n            }\n\n            //create supporting-node\n            Map routerDetails = (Map) aInRoutingInstance.get(\"router\");\n            if(routerDetails != null && routerDetails.containsKey(\"ne\")) { //check this for unmanaged NE\n                String neId = extractNeId((String) routerDetails.get(\"ne\"));\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"*********** - NE {} {}\", neId, routerDetails.get(\"ne\"));\n                }\n                if(neId != null) {\n                    String supportingNodeRef = getSupportingNodeRef(aInYangDB, qp, neId);\n                    if(supportingNodeRef != null) {\n                        String supportingNodeIden = nodePathIdentifier + \"/\" + SUPPORTING_NODE;\n                        if(!aInYangDB.exists(supportingNodeIden, qp)) {\n                            logger.debug(\"L3 -  Resync Node - createSupportingNode {}\", supportingNodeIden);\n                            createSupportingNode(aInYangDB, qp, networkId, nodeId, supportingNodeRef, nodePathIdentifier);\n                        }\n                    }\n                }\n                else {\n                    //NE could have been unmanaged\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"*********** - Trying to delete supporting node {}\", nodePathIdentifier);\n                    }\n                    String supportingNodeIden = nodePathIdentifier + \"/\" + SUPPORTING_NODE;\n                    if (aInYangDB.exists(supportingNodeIden)) {\n                        IYangObject supportingNodeObj = aInYangDB.getSingle(supportingNodeIden, getFilteredQueryParameters(null));\n                        String l2NodeRef = (String) supportingNodeObj.get(\"node-ref\");\n                        if(supportingNodeMap.containsKey(l2NodeRef)) {\n                            for (String nodeIden : supportingNodeMap.get(l2NodeRef)) {\n                                if(nodeIden.equals(nodePathIdentifier)) {\n                                    logger.debug(\"L3 -  Resync Node - deleteSupportingNode {}\", supportingNodeIden);\n                                    updateInDb(aInYangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                }\n                                else {\n                                    supportingNodeIden = nodeIden + \"/\" + SUPPORTING_NODE;\n                                    if (aInYangDB.exists(supportingNodeIden)) {\n                                        logger.debug(\"L3 -  Resync Node - deleteSupportingNode {}\", supportingNodeIden);\n                                        updateInDb(aInYangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                    }\n                                }\n                            }\n                            supportingNodeMap.remove(l2NodeRef);\n                        }\n                        else {\n                            logger.debug(\"L3 -  handleResync - delete supporting node {}\", supportingNodeIden);\n                            updateInDb(aInYangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                        }\n                    }\n                }\n            }\n\n        }\n\n        //create te node\n\n        String teNodeRef = createTeNode(networkId, aInYangDB, nodeId, nodeId);\n        if(teNodeRef != null) {\n            String teNetworkRef = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId));\n            createTeNodeRef(aInYangDB, getFilteredQueryParameters(null), networkId, nodeId, teNetworkRef, teNodeRef);\n        }\n    }\n\n    boolean createTerminationPoint(IYangDB aInYangDB, String aInNodeIdentifier, IMdConverterFw aInConverterFw, String aInTpIdentifier,\n                                   String aInNetworkId, String aInNodeId, String aInTpId, List<String> aInTpDetails) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n        if(aInYangDB.exists(aInNodeIdentifier, qp)) {\n            String neId = getNeIdFromRouterId(aInYangDB, aInNetworkId, aInNodeId);\n            String portName = null;\n            if(neId != null) {\n                portName = getPortDetailsFromDb(aInTpId, aInYangDB, neId);\n                if (portName == null) {\n                    //try to get the details via openconfig restconf. It works for mdm managed nodes\n                    portName = getSubInterfaces(neId, aInConverterFw, aInTpId);\n                    if(portName == null) {\n                        logger.warn(\"Couldn't find L2 port on the NE-ID:{} for the L3 TP-ID: {}. \" +\n                                \"So correlation is not established.\", neId, aInTpId);\n                    }\n                }\n            }\n            if(!aInYangDB.exists(aInTpIdentifier, qp)) {\n                IYangObject tpObj = new YangObject();\n                tpObj.setProperty(NETWORK_ID, aInNetworkId);\n                tpObj.setProperty(NODE_ID, aInNodeId);\n                tpObj.setProperty(TP_ID, aInTpId);\n                IYangObject tpAttrObj = new YangObject();\n                tpAttrObj.setProperty(NETWORK_ID, aInNetworkId);\n                tpAttrObj.setProperty(NODE_ID, aInNodeId);\n                tpAttrObj.setProperty(TP_ID, aInTpId);\n                if(aInTpId.contains(\"%\")) {\n                    int unnumbered = Integer.parseInt(aInTpId.split(\"%\")[1]);\n                    tpAttrObj.setProperty(\"unnumbered-id\", unnumbered);\n                } else{\n                    try{\n                        int unnumbered = Integer.parseInt(aInTpId);\n                        tpAttrObj.setProperty(\"unnumbered-id\", unnumbered);\n                    }\n                    catch(NumberFormatException e) {\n                        tpAttrObj.setProperty(IP_ADDRESS, Arrays.asList(new String[]{aInTpId}));\n                    }\n                }\n                tpObj.setProperty(\"ietf-l3-unicast-topology:l3-termination-point-attributes\", tpAttrObj);\n\n                updateInDb(aInYangDB, tpObj, \"\", aInNodeIdentifier, TP_TYPE, CREATE, null, qp);\n\n                if(neId != null && portName != null) {\n                    String supportingTpRef = getSupportingTpRef(aInYangDB, qp, neId, portName);\n                    if (supportingTpRef != null) {\n                        String supportingTpIden = aInTpIdentifier + \"/\" + SUPPORTING_TP;\n                        if(!aInYangDB.exists(supportingTpIden, qp)) {\n                            createSupportingTp(aInYangDB, qp, aInNetworkId, aInNodeId, aInTpId, neId, supportingTpRef, aInTpIdentifier);\n                        }\n                    }\n                }\n            }\n            else {\n                // supporting port could have been created/deleted.\n                // node could have been managed/unmanaged.\n                String supportingTpIden = aInTpIdentifier + \"/\" + SUPPORTING_TP;\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"******------ - L3 -  SUPPORTING TP UPDATE {} {} \", neId, portName);\n                }\n                if(neId != null) {\n                    if(portName != null) {\n                        // ne could have been managed or port could have been created\n                        String supportingTpRef = getSupportingTpRef(aInYangDB, qp, neId, portName);\n                        if (supportingTpRef != null) {\n                            if(!aInYangDB.exists(supportingTpIden, qp)) {\n                                logger.debug(\"L3 - RESYNC TP - createSupportingTp {} , {}\", supportingTpIden, supportingTpRef);\n                                createSupportingTp(aInYangDB, qp, aInNetworkId, aInNodeId, aInTpId, neId, supportingTpRef, aInTpIdentifier);\n                            }\n                        }\n                    }\n                    else {\n                        // port could have been deleted\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"******------ - L3 -  PORT IS NULL - TRYING TO DELETE SUPPORTING TP {} \", supportingTpIden);\n                        }\n                        deleteSupportingTp(supportingTpIden, aInYangDB);\n                    }\n                }\n                else { //ne id will be null if the ne is unmanaged.\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"******------ - L3 - NE IS NULL - TRYING TO DELETE SUPPORTING TP {} \", supportingTpIden);\n                    }\n                    deleteSupportingTp(supportingTpIden, aInYangDB);\n                }\n            }\n            if(neId != null && portName != null) {\n                aInTpDetails.add(neId);\n                aInTpDetails.add(portName);\n            }\n            return true;\n        } else {\n            logger.warn(\"L3 - Couldn't create termination point \" + aInTpIdentifier + \" because node doesn't exist - \" + aInNodeIdentifier);\n            return false;\n        }\n    }\n\n    String createTeTerminationPoint(String aInNetworkId, IYangDB aInYangDB, String aInNodeId, String aInTpId) {\n        if(!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n        String teNetworkId = getTeNetworkId(aInNetworkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n        String teNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, aInNodeId);\n        String teTPPathIdentifier = teNodePathIdentifier + String.format(TP_PATH, aInTpId);\n\n        if (aInYangDB.exists(teNodePathIdentifier,qp) && !aInYangDB.exists(teTPPathIdentifier, qp)) {\n            logger.debug(\"TE Topology - creating new TP: {} on {}\", aInTpId, aInNodeId);\n            IYangObject tpObj = new YangObject();\n            tpObj.setProperty(NETWORK_ID, teNetworkId);\n            tpObj.setProperty(NODE_ID, aInNodeId);\n            tpObj.setProperty(TP_ID, aInTpId);\n            if(aInTpId.contains(\"%\")) {\n                tpObj.setProperty(\"te-tp-id\", aInTpId.split(\"%\")[1]);\n            }\n            else {\n                tpObj.setProperty(\"te-tp-id\", aInTpId);\n            }\n\n            updateInDb(aInYangDB, tpObj, \"\", teNodePathIdentifier, TP_TYPE, CREATE, null, qp);\n\n            //update the L3 to TE ref.\n            createTeTpRef(aInYangDB, getFilteredQueryParameters(null), aInNetworkId, aInNodeId, aInTpId, teNetworkPathIdentifier, teNodePathIdentifier, teTPPathIdentifier);\n            return teTPPathIdentifier;\n        }\n        return null;\n    }\n\n    void createLink(Map<String,Object> aInLink, IYangDB aInYangDB, IMdConverterFw aInConverterFw, String networkId, boolean aInCheckOppLink, String aInDstTpId) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n        logger.debug(\"Creating Link {}, \", aInLink.get(NAME));\n        Map<String, String> srcNode =  getLinkNodeDetails((String) aInLink.get(\"source-node\"));\n        Map<String, String> dstNode =  getLinkNodeDetails((String) aInLink.get(\"destination-node\"));\n        if(srcNode.isEmpty() || dstNode.isEmpty()) {\n            logger.warn(\"L3 - parsing error to get src node / dst node on the link {}\", aInLink.entrySet().toString());\n            return;\n        }\n        String srcNodeId = srcNode.get(ID);\n        String dstNodeId = dstNode.get(ID);\n        String srcTpId = (String) aInLink.get(IP_ADDRESS);\n        String dstTpId = null;\n\n        if(aInDstTpId != null) {\n            dstTpId = aInDstTpId;\n        }\n        else {\n            if (srcNode.get(NODE_TYPE).equals(SUBNET)) {\n                IYangObject nodeObj = aInYangDB.getSingle((String) aInLink.get(\"source-node\"),\n                        getFilteredQueryParameters(\"name;dr-ip-address\"));\n\n                if (nodeObj != null) {\n                    String subnetNodeId = (String) nodeObj.get(\"dr-ip-address\");\n                    if(subnetNodeId == null || subnetNodeId.isEmpty()) {\n                        srcNodeId = (String) nodeObj.get(NAME);\n                        String systemId = getSubnetSystemId(srcNodeId);\n                        subnetNodeId = InetAddresses.isInetAddress(systemId) ? systemId :\n                                getSubnetNodeIdFromDB(aInConverterFw.getYangDBConfig(), systemId, networkId);\n                    }\n                    srcNodeId = subnetNodeId == null ? srcNodeId : subnetNodeId + \"-\" + getSubnetPsnId(srcNodeId);\n                    dstTpId = srcTpId;\n                }\n                else {\n                    logger.warn(\"L3 - CreateLink - SUBNET IS NOT IN DB\" + aInLink.get(\"source-node\"));\n                }\n\n            } else if (dstNode.get(NODE_TYPE).equals(SUBNET)) {\n                IYangObject nodeObj = aInYangDB.getSingle((String) aInLink.get(\"destination-node\"),\n                        getFilteredQueryParameters(\"name;dr-ip-address\"));\n\n                if (nodeObj != null) {\n                    String subnetNodeId = (String) nodeObj.get(\"dr-ip-address\");\n                    if(subnetNodeId == null || subnetNodeId.isEmpty()) {\n                        dstNodeId = (String) nodeObj.get(NAME);\n                        String systemId = getSubnetSystemId(dstNodeId);\n                        subnetNodeId = InetAddresses.isInetAddress(systemId) ? systemId :\n                                getSubnetNodeIdFromDB(aInConverterFw.getYangDBConfig(), systemId, networkId);\n                    }\n                    dstNodeId = subnetNodeId == null ? dstNodeId : subnetNodeId + \"-\" + getSubnetPsnId(dstNodeId);\n                    dstTpId = srcTpId;\n                }\n                else {\n                    logger.warn(\"L3 - CreateLink - SUBNET IS NOT IN DB\" + aInLink.get(\"destination-node\"));\n                }\n            }\n\n            dstTpId = dstTpId == null ? getTerminationPointId((String) aInLink.get(\"opposite-link\"), aInYangDB, networkId) : dstTpId;\n        }\n        if(dstTpId == null) {\n            logger.warn(\"L3 - couldn't find opposite L3 link and destination TP for {} on {}\", aInLink.get(NAME), networkId);\n            oppLinkMap.put(srcNodeId + \":\" + srcTpId + \"--\" + dstNodeId, aInLink.get(NAME).toString());\n            return;\n        }\n        String isisLevel =  aInLink.get(\"protocol\").equals(\"isis\") ? (String) aInLink.get(\"isis-level\") : null;\n        String linkId = getLinkId(srcNodeId, dstNodeId, srcTpId, dstTpId, isisLevel);\n        String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n\n        if (!aInYangDB.exists(linkPathIdentifier, qp)) {\n            logger.debug(\"creating new L3 link: {} on {}\", linkId, networkId);\n            IYangObject linkObj = new YangObject();\n            linkObj.setProperty(NETWORK_ID, networkId);\n            linkObj.setProperty(LINK_ID, linkId);\n            IYangObject linkAttrObj = new YangObject();\n            linkAttrObj.setProperty(NETWORK_ID, networkId);\n            linkAttrObj.setProperty(NAME, aInLink.get(NAME));\n            linkAttrObj.setProperty(\"metric1\", aInLink.get(\"cost\"));\n            linkAttrObj.setProperty(\"metric2\", aInLink.get(\"te-metric\"));\n            linkAttrObj.setProperty(\"flag\", Collections.singletonList(\"nsp-ietf-network-topology:igp\"));\n            linkObj.setProperty(\"ietf-l3-unicast-topology:l3-link-attributes\", linkAttrObj);\n\n            //source-node\n\n            String srcNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, srcNodeId);\n            String srcNodeTPIdentifier = srcNodeIdentifier + String.format(TP_PATH, srcTpId);\n            List<String> srcTpDetails = new ArrayList<>();\n            if(!createTerminationPoint(aInYangDB, srcNodeIdentifier, aInConverterFw, srcNodeTPIdentifier, networkId, srcNodeId, srcTpId, srcTpDetails))\n            {\n                logger.warn(\"L3 - Termination point creation failed {}, {}\", srcNodeIdentifier, srcNodeTPIdentifier);\n                return;\n            }\n            YangObject srcObj = new YangObject();\n            srcObj.setProperty(NETWORK_ID, networkId);\n            srcObj.setProperty(LINK_ID, linkId);\n            srcObj.setProperty(\"source-node\", srcNodeIdentifier);\n            srcObj.setProperty(\"source-tp\", srcNodeTPIdentifier);\n            linkObj.setProperty(\"source\", srcObj);\n\n            //destination-node\n            String dstNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, dstNodeId);\n            String dstNodeTPIdentifier = dstNodeIdentifier + String.format(TP_PATH, dstTpId);\n            List<String> dstTpDetails = new ArrayList<>();\n            if(!createTerminationPoint(aInYangDB, dstNodeIdentifier, aInConverterFw, dstNodeTPIdentifier, networkId, dstNodeId, dstTpId, dstTpDetails))\n            {\n                logger.warn(\"L3 - Termination point creation failed {}, {}\", dstNodeIdentifier, dstNodeTPIdentifier);\n                return;\n            }\n            YangObject dstObj = new YangObject();\n            dstObj.setProperty(NETWORK_ID, networkId);\n            dstObj.setProperty(LINK_ID, linkId);\n            dstObj.setProperty(\"dest-node\", dstNodeIdentifier);\n            dstObj.setProperty(\"dest-tp\", dstNodeTPIdentifier);\n            linkObj.setProperty(\"destination\", dstObj);\n\n            updateInDb(aInYangDB, linkObj, \"\", networkPathIdentifier, LINK_TYPE, CREATE, null, qp);\n\n            //create sr mpls MSDs and SIDs\n            List<Map<String,Object>> msds = (List) aInLink.get(MSDS);\n            List<Map<String,Object>> sids = (List) aInLink.get(SIDS);\n\n            if(msds != null || sids != null) {\n                IYangObject srMplsObj = new YangObject();\n                srMplsObj.setProperty(NETWORK_ID, networkId);\n                srMplsObj.setProperty(LINK_ID, linkId);\n                if(msds != null) {\n                    IYangObject msdObj = new YangObject();\n                    msdObj.setProperty(NETWORK_ID, networkId);\n                    msdObj.setProperty(LINK_ID, linkId);\n                    srMplsObj.setProperty(MSDS, msdObj);\n                }\n\n                if(sids != null) {\n                    IYangObject sidObject = new YangObject();\n                    sidObject.setProperty(NETWORK_ID, networkId);\n                    sidObject.setProperty(LINK_ID, linkId);\n                    srMplsObj.setProperty(SIDS, sidObject);\n                }\n\n                String linkAttrIden = linkPathIdentifier + \"/ietf-l3-unicast-topology:l3-link-attributes\";\n                updateInDb(aInYangDB, srMplsObj, \"\", linkAttrIden, SR_MPLS_TYPE, CREATE, null, qp);\n\n                if(msds != null) {\n                    for (Map<String, Object> msd : msds) {\n                        IYangObject nodeMsdObj = new YangObject();\n                        nodeMsdObj.setProperty(NETWORK_ID, networkId);\n                        nodeMsdObj.setProperty(LINK_ID, linkId);\n                        nodeMsdObj.setProperty(MSD_TYPE, msd.get(MSD_TYPE));\n                        nodeMsdObj.setProperty(MSD_VALUE, msd.get(MSD_VALUE));\n                        updateInDb(aInYangDB, nodeMsdObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"link-msd\", CREATE, null, qp);\n                    }\n                }\n\n                if(sids != null) {\n                    Set<String> existingSids = new HashSet<>();\n                    for (Map<String, Object> sid : sids) {\n                        IYangObject nodeSidObj = new YangObject();\n                        nodeSidObj.setProperty(NETWORK_ID, networkId);\n                        nodeSidObj.setProperty(LINK_ID, linkId);\n                        nodeSidObj.setProperty(VALUE_TYPE, sid.get(VALUE_TYPE));\n                        nodeSidObj.setProperty(SID, sid.get(SID));\n                        nodeSidObj.setProperty(ADDRESS_FAMILY, sid.get(ADDRESS_FAMILY));\n                        nodeSidObj.setProperty(IS_ELG_PROT, sid.get(IS_ELG_PROT));\n                        nodeSidObj.setProperty(IS_LOCAL, sid.get(IS_LOCAL));\n                        nodeSidObj.setProperty(IS_PART_SET, sid.get(IS_PART_SET));\n                        nodeSidObj.setProperty(IS_PERS, sid.get(IS_PERS));\n                        nodeSidObj.setProperty(IS_ON_LAN, sid.get(IS_ON_LAN));\n                        nodeSidObj.setProperty(WEIGHT, sid.get(WEIGHT));\n\n                        String sidKey = sid.get(VALUE_TYPE).toString() +\"-\"+ sid.get(SID);\n                        if(!existingSids.contains(sidKey)) {\n                            updateInDb(aInYangDB, nodeSidObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids\", \"sid\", CREATE, null, qp);\n                            existingSids.add(sidKey);\n                        }\n                    }\n                }\n            }\n\n            //supporting link\n\n            if(!srcTpDetails.isEmpty() && srcTpDetails.size() >= 2 && !dstTpDetails.isEmpty() && dstTpDetails.size() >=2) {\n                String supportingLinkRef = getSupportingLinkRef(aInYangDB, qp,\n                        getLinkId(srcTpDetails.get(0), dstTpDetails.get(0), srcTpDetails.get(1), dstTpDetails.get(1), null));\n                if (supportingLinkRef != null) {\n                    String supportingLinkIden = linkPathIdentifier + \"/\" + SUPPORTING_LINK;\n                    if(!aInYangDB.exists(supportingLinkIden, qp)) {\n                        createSupportingLink(aInYangDB, qp, networkId, linkId, supportingLinkRef, linkPathIdentifier);\n                    }\n                }\n            }\n        }\n        else {\n            // link properties could have got updated.resync the updatable properties\n\n            IYangObject ietfLinkObj = aInYangDB.getSingle(linkPathIdentifier, qp);\n            if (ietfLinkObj != null) {\n                logger.debug(\"L3 - RESYNC LINK - updating link: {} on {}\", linkId, networkId);\n                IYangObject linkAttrObj = (YangObject) ietfLinkObj.get(\"ietf-l3-unicast-topology:l3-link-attributes\");\n                linkAttrObj.setProperty(\"metric1\", aInLink.get(\"cost\"));\n                linkAttrObj.setProperty(\"metric2\", aInLink.get(\"te-metric\"));\n                ietfLinkObj.setProperty(\"ietf-l3-unicast-topology:l3-link-attributes\", linkAttrObj);\n                ietfLinkObj.removeProperty(SUPPORTING_LINK);\n                updateInDb(aInYangDB, ietfLinkObj, linkPathIdentifier, null, null, UPDATE, null, getFilteredQueryParameters(null));\n            }\n\n            if(aInLink.get(SIDS) != null) {\n                updateSid(aInYangDB, qp, aInLink, linkPathIdentifier, networkId, linkId);\n            }\n\n            // update supporting link.\n\n            //source-node\n            String srcNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, srcNodeId);\n            String srcNodeTPIdentifier = srcNodeIdentifier + String.format(TP_PATH, srcTpId);\n            List<String> srcTpDetails = new ArrayList<>();\n            createTerminationPoint(aInYangDB, srcNodeIdentifier, aInConverterFw, srcNodeTPIdentifier, networkId, srcNodeId, srcTpId, srcTpDetails);\n\n            //destination-node\n            String dstNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, dstNodeId);\n            String dstNodeTPIdentifier = dstNodeIdentifier + String.format(TP_PATH, dstTpId);\n            List<String> dstTpDetails = new ArrayList<>();\n            createTerminationPoint(aInYangDB, dstNodeIdentifier, aInConverterFw, dstNodeTPIdentifier, networkId, dstNodeId, dstTpId, dstTpDetails);\n\n            String supportingLinkIden = linkPathIdentifier + \"/\" + SUPPORTING_LINK;\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"******------ - L3 -  SUPPORTING TP UPDATE {} {} \", supportingLinkIden, !srcTpDetails.isEmpty() && srcTpDetails.size() >= 2 && !dstTpDetails.isEmpty() && dstTpDetails.size() >= 2);\n            }\n            if(!srcTpDetails.isEmpty() && srcTpDetails.size() >= 2 && !dstTpDetails.isEmpty() && dstTpDetails.size() >=2) {\n                String supportingLinkRef = getSupportingLinkRef(aInYangDB, qp,\n                        getLinkId(srcTpDetails.get(0), dstTpDetails.get(0), srcTpDetails.get(1), dstTpDetails.get(1), null));\n                if (supportingLinkRef != null) {\n                    if(!aInYangDB.exists(supportingLinkIden, qp)) {\n                        logger.debug(\"L3 - RESYNC LINK - CREATING SUPPORTING LINK {} \", supportingLinkIden);\n                        createSupportingLink(aInYangDB, qp, networkId, linkId, supportingLinkRef, linkPathIdentifier);\n                    }\n                    else if(logger.isDebugEnabled()) {\n                        logger.debug(\"******------ - SUPPORTING LINK EXISTS {} \", supportingLinkIden);\n                    }\n                }\n                else {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"******------ - L3 TRYING TO DELETE SUPPORTING LINK {} \", supportingLinkIden);\n                    }\n                    deleteSupportingLink(supportingLinkIden, aInYangDB);\n                }\n\n            }\n            else if(aInYangDB.exists(supportingLinkIden, qp)) {\n               //delete supporting link ref\n                logger.debug(\"*********** - L3 TRYING TO DELETE SUPPORTING LINK {} \", supportingLinkIden);\n                deleteSupportingLink(supportingLinkIden, aInYangDB);\n            }\n        }\n\n        createTeLink(networkId, aInYangDB, aInLink, linkId, srcNodeId, srcTpId, dstNodeId, dstTpId);\n\n        // Sometimes during eventing, it happens that both the link is not in dmodel and so we failed to create the opp link earlier.\n        // so this is our second chance\n        if(aInCheckOppLink) {\n            String[] idSplits = linkId.split(\"--\");\n            String[] dstSplit = idSplits[0].split(\":\");\n            if(oppLinkMap.containsKey(idSplits[1] + \"--\" + dstSplit[0])) {\n                String name = oppLinkMap.remove(idSplits[1] + \"--\" + dstSplit[0]);\n                String oppLinkId = getOppIetfLinkId(linkId);\n                String oppLinkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, oppLinkId);\n                if (!aInYangDB.exists(oppLinkPathIdentifier, getFilteredQueryParameters(null))) {\n                    //create the opposite link\n                    logger.debug(\"L3 - CREATING OPP LINK with name: {} \", name);\n                    String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n                    IYangObject linkObj = aInYangDB.getSingle(nspServiceIpLinkIden, getFilteredQueryParameters(IP_LINK_FIELDS));\n\n                    if (linkObj != null) {\n                        createLink(linkObj.asMap(), aInYangDB, aInConverterFw, networkId, false, dstSplit[1]);\n                    }\n                }\n            }\n        }\n    }\n\n    String createTeLink(String aInNetworkId, IYangDB aInYangDB, Map<String,Object> aInLink, String aInLinkId,\n                      String aInSrcNodeId, String aInSrcTpId, String aInDstNodeId, String aInDstTpId) {\n        if (!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n\n        createTeTerminationPoint(aInNetworkId, aInYangDB, aInSrcNodeId, aInSrcTpId);\n        createTeTerminationPoint(aInNetworkId, aInYangDB, aInDstNodeId, aInDstTpId);\n\n        String teNetworkId = getTeNetworkId(aInNetworkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n        String teSrcNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, aInSrcNodeId);\n        String teSrcTPPathIdentifier = teSrcNodePathIdentifier + String.format(TP_PATH, aInSrcTpId);\n\n        String teDstNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, aInDstNodeId);\n        String teDstTPPathIdentifier = teDstNodePathIdentifier + String.format(TP_PATH, aInDstTpId);\n\n        String teLinkPathIdentifier = teNetworkPathIdentifier + String.format(LINK_PATH, aInLinkId);\n\n        if (!aInYangDB.exists(teLinkPathIdentifier, qp)) {\n            logger.debug(\"TE Topology - creating new Link: {} on {}\", aInLinkId, teNetworkId);\n            IYangObject linkObj = new YangObject();\n            linkObj.setProperty(NETWORK_ID, teNetworkId);\n            linkObj.setProperty(LINK_ID, aInLinkId);\n            YangObject srcObj = new YangObject();\n            srcObj.setProperty(NETWORK_ID, teNetworkId);\n            srcObj.setProperty(LINK_ID, aInLinkId);\n            srcObj.setProperty(\"source-node\", teSrcNodePathIdentifier);\n            srcObj.setProperty(\"source-tp\", teSrcTPPathIdentifier);\n            linkObj.setProperty(\"source\", srcObj);\n\n            YangObject dstObj = new YangObject();\n            dstObj.setProperty(NETWORK_ID, teNetworkId);\n            dstObj.setProperty(LINK_ID, aInLinkId);\n            dstObj.setProperty(\"dest-node\", teDstNodePathIdentifier);\n            dstObj.setProperty(\"dest-tp\", teDstTPPathIdentifier);\n            linkObj.setProperty(\"destination\", dstObj);\n\n            IYangObject teObj = new YangObject();\n            IYangObject linkAttrObj = new YangObject();\n            linkAttrObj.setProperty(NETWORK_ID, teNetworkId);\n            linkAttrObj.setProperty(LINK_ID, aInLinkId);\n            linkAttrObj.setProperty(\"te-default-metric\", aInLink.get(\"te-metric\"));\n            linkAttrObj.setProperty(\"te-delay-metric\", aInLink.get(\"latency\"));\n            linkAttrObj.setProperty(\"te-igp-metric\", aInLink.get(\"cost\"));\n\n            if(aInLink.get(\"bw\") != null) {\n\n                IYangObject maxLinkBandwidth = new YangObject();\n                maxLinkBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxLinkBandwidth.setProperty(LINK_ID, aInLinkId);\n                IYangObject maxLinkTeBandwidth = new YangObject();\n                maxLinkTeBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxLinkTeBandwidth.setProperty(LINK_ID, aInLinkId);\n                // convert kilo bits to bytes and then to IEEE 754 format.\n                maxLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes((Long) aInLink.get(\"bw\")))));\n                maxLinkBandwidth.setProperty(\"te-bandwidth\", maxLinkTeBandwidth);\n\n                IYangObject maxResvLinkBandwidth = new YangObject();\n                maxResvLinkBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxResvLinkBandwidth.setProperty(LINK_ID, aInLinkId);\n                IYangObject maxResvLinkTeBandwidth = new YangObject();\n                maxResvLinkTeBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxResvLinkTeBandwidth.setProperty(LINK_ID, aInLinkId);\n                maxResvLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes((Long) aInLink.get(\"bw\")))));\n                maxResvLinkBandwidth.setProperty(\"te-bandwidth\", maxResvLinkTeBandwidth);\n\n                linkAttrObj.setProperty(\"max-link-bandwidth\", maxLinkBandwidth);\n                linkAttrObj.setProperty(\"max-resv-link-bandwidth\", maxResvLinkBandwidth);\n            }\n\n            IYangObject tesrlgs = new YangObject();\n            tesrlgs.setProperty(\"value\", aInLink.get(\"srg-labels\"));\n            linkAttrObj.setProperty(\"te-srlgs\", tesrlgs);\n\n            IYangObject performanceMetricsOneWay = new YangObject();\n            performanceMetricsOneWay.setProperty(NETWORK_ID, teNetworkId);\n            performanceMetricsOneWay.setProperty(LINK_ID, aInLinkId);\n            performanceMetricsOneWay.setProperty(\"one-way-delay\", aInLink.get(\"latency\"));\n            performanceMetricsOneWay.setProperty(\"one-way-min-delay\", aInLink.get(\"one-way-min-delay\"));\n            performanceMetricsOneWay.setProperty(\"one-way-max-delay\", aInLink.get(\"one-way-max-delay\"));\n            if(aInLink.get(\"available-bw\") != null) {\n                performanceMetricsOneWay.setProperty(\"one-way-utilized-bandwidth\", String.format(\"%a\",\n                        Float.valueOf(convertKiloBitstoBytes((Long) aInLink.get(\"available-bw\")))));\n            }\n            linkAttrObj.setProperty(\"ietf-te-topology-packet:performance-metrics-one-way\", performanceMetricsOneWay);\n            linkAttrObj.setProperty(NAME, aInLink.get(NAME));\n\n            teObj.setProperty(\"te-link-attributes\", linkAttrObj);\n            teObj.setProperty(NETWORK_ID, teNetworkId);\n            teObj.setProperty(LINK_ID, aInLinkId);\n            linkObj.setProperty(\"ietf-te-topology:te\", teObj);\n\n            updateInDb(aInYangDB, linkObj, \"\", teNetworkPathIdentifier, LINK_TYPE, CREATE, null, qp);\n            createTeLinkRef(aInYangDB, getFilteredQueryParameters(null), aInNetworkId, aInLinkId, teNetworkPathIdentifier, teLinkPathIdentifier);\n\n            for(int i = 0 ; i <= 7 ; i++) {\n                IYangObject maxUnResvBandwidth = new YangObject();\n                maxUnResvBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxUnResvBandwidth.setProperty(LINK_ID, aInLinkId);\n                maxUnResvBandwidth.setProperty(\"priority\", i);\n                IYangObject maxUnResvTeBandwidth = new YangObject();\n                maxUnResvTeBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxUnResvTeBandwidth.setProperty(LINK_ID, aInLinkId);\n                maxUnResvTeBandwidth.setProperty(\"priority\", i);\n                Long unResvBw = (Long) aInLink.get(\"un-resv-bw\");\n                unResvBw = unResvBw == null ? 0 : unResvBw;\n                maxUnResvTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes(unResvBw))));\n                maxUnResvBandwidth.setProperty(\"te-bandwidth\", maxUnResvTeBandwidth);\n                updateInDb(aInYangDB, maxUnResvBandwidth, \"\", teLinkPathIdentifier + \"/ietf-te-topology:te/te-link-attributes\" , \"unreserved-bandwidth\", CREATE, null, qp);\n            }\n            return teLinkPathIdentifier;\n        }\n        else {\n            //TE link could have got updated. resync the properties.\n            if(updateTeLink(aInYangDB, qp, aInLink, teLinkPathIdentifier, teNetworkId, aInLinkId, true)) {\n                    updateTeLinkPriority(aInYangDB, aInLink, teLinkPathIdentifier);\n            }\n        }\n        return null;\n    }\n\n    long convertKiloBitstoBytes(long aInBW) {\n        return aInBW * 125;\n    }\n\n    private void createPrefix(IYangDB aInYangDB, QueryParameters aInQp, ObjectCreation aInEvent) {\n\n        String instanceId = aInEvent.getInstanceId();\n        String adminDomain = extractAdminDomain(instanceId);\n        String nodeId = StringUtils.substringBetween(instanceId, \"routing-instance[id='\", \"'\");\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n        nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, nodeId);\n        QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols\");\n        IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n\n        if (nodeObj != null) {\n            Map<String, Object> nodeMap = nodeObj.asMap();\n            String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n            if (networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                String ipAddress = (String) aInEvent.getEntity().get(IP_ADDRESS);\n                String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                if (aInYangDB.exists(nodePathIdentifier) && !aInYangDB.exists(prefixPathIden, aInQp)) {\n                    IYangObject prefixObj = new YangObject();\n                    prefixObj.setProperty(NETWORK_ID, networkId);\n                    prefixObj.setProperty(NODE_ID, nodeId);\n                    prefixObj.setProperty(PREFIX, ipAddress);\n                    prefixObj.setProperty(\"metric\", aInEvent.getEntity().get(\"metric\"));\n                    updateInDb(aInYangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, aInQp);\n                }\n            }\n        }\n    }\n\n    public void handleUpdateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectModification aInEvent,\n                                  String aInNeId, YangPluginMdConverterProvider aInMdResyncFw)\n    {\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n            logger.debug(\"---------------------------------------------------UPDATE---------------------------------------------------------------------------\");\n        }\n\n        IMdConverterFw converterFw = aInMdResyncFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n                logger.debug(\"L3 - handleUpdateEvent - UPDATE PREFIX\");\n                updatePrefix(yangDB, getFilteredQueryParameters(null), aInEvent);\n            }\n            else {\n                boolean isValidSrMplsUpdate = false;\n                for (ObjectModification.Change change : aInEvent.getChanges()) {\n                    if(MSDS.equals(change.getName())) {\n                        logger.debug(\"L3 - handleUpdateEvent - node MSD update\");\n                        Map<String, Object> node = aInEvent.getEntity().asMap();\n                        updateMsd(yangDB, StringUtils.substringBetween(aInEvent.getInstanceId(),\n                                \"routing-instance[id='\", \"'\"), node, getNetworkIdFromMeta(yangDB, node));\n                    }\n                    else if(ID.equals(change.getName())) {\n                        logger.debug(\"L3 - handleUpdateEvent - node ID update\");\n                        updateNodeAndLinks(yangDB, change.getOldValue().toString(), change.getNewValue().toString(),\n                                aInEvent.getInstanceId(), converterFw);\n                    }\n                }\n            }\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n            logger.debug(\"L3 - handleUpdateEvent - UPDATE LINK\");\n            updateLink(yangDB, aInEvent, converterFw);\n        }\n    }\n\n    private void updateNodeAndLinks(IYangDB aInYangDB, String aInOldRouterId, String aInNewRouterId, String aInInstanceId,\n                                    IMdConverterFw aInConverterFw) {\n        /*Router-id has changed due to correlation.\n        1. delete the old node/tps/links and subnet node if any.\n        2. create new node and the links, tps, etc.\n        */\n        YangDBConfig dbConfig = aInConverterFw.getYangDBConfig();\n        String adminDomain = extractAdminDomain(aInInstanceId);\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n        nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, aInNewRouterId);\n        QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols;id;name;router/ne;router-id;prefix(ip-address;metric)\");\n        IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n        if (nodeObj != null) {\n            Map<String, Object> nodeMap = nodeObj.asMap();\n            String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n            if (networkId != null) {\n                //There can be more than one nodes in IETF as there can be subnets on that node\n                List<Object> nodeIds = getNodeIds(aInYangDB, aInOldRouterId, networkId);\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"<><><><><> nodes: {}\", nodeIds.toString());\n                }\n                List<String> linkNames = new ArrayList<>();\n                Map<String,String> subnetNames = new HashMap<>();\n                if(CollectionUtils.isNotEmpty(nodeIds)) {\n                    nodeIds.forEach(node -> {\n                        String nodeId = node.toString();\n                        //get the links that originate or end on this nodeId\n                        List<Map<String,Object>> linkList = getLinkDetails(aInYangDB, nodeId, networkId);\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"<><><><><> links : {}\", linkList.toString());\n                        }\n                        if(CollectionUtils.isNotEmpty(linkList)) {\n                            linkList.forEach(linkMap -> {\n                                Object[] linkObj = new Object[2];\n                                linkObj[0] = linkMap.get(LINK_ID);\n                                linkObj[1] = networkId;\n                                List<Object> linkObjList = new ArrayList<>();\n                                linkObjList.add(linkObj);\n                                deleteLink(aInYangDB, getFilteredQueryParameters(null), linkMap, dbConfig, linkObjList);\n                                linkNames.add(linkMap.get(NAME).toString());\n                            });\n                        }\n                        if(nodeId.contains(\"psn\")) {\n                            List<Object> subnetName = getSubnetName(aInYangDB, nodeId, networkId);\n                            if(CollectionUtils.isNotEmpty(subnetName)) {\n                                subnetNames.put(nodeId, subnetName.get(0).toString());\n                            }\n                        }\n                        deleteNode(aInYangDB, getFilteredQueryParameters(null), null, dbConfig, networkId, nodeId);\n                    });\n                }\n\n                //Now create the new node and the links..\n                nodeIds.forEach(nodeId -> {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"<><><><><> creating equivalent node for {}\", nodeId);\n                    }\n\n                    if(nodeId.toString().contains(\"psn\")) {\n                        Map<String, Object> subnetMap = new HashMap<>();\n                        subnetMap.put(NAME, subnetNames.get(nodeId));\n                        createSubnet(nodeMap, aInYangDB, dbConfig, networkId, aInNewRouterId);\n                    }\n                    else {\n                        createRoutingInstance(nodeMap, aInYangDB, networkId);\n                    }\n                });\n\n                QueryParameters linkQp = getFilteredQueryParameters(IP_LINK_FIELDS);\n                //create links and tps.\n                linkNames.forEach(name -> {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"<><><><><> creating link : {}\", name);\n                    }\n                    String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n                    IYangObject linkObj = aInYangDB.getSingle(nspServiceIpLinkIden, linkQp);\n\n                    if(linkObj != null) {\n                        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                        if (aInYangDB.exists(networkPathIdentifier, qp)) {\n                            createLink(linkObj.asMap(), aInYangDB, aInConverterFw, networkId, true, null);\n                            return;\n                        } else {\n                            logger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", name);\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    private List<Object> getNodeIds(IYangDB aInYangDb, String aInNodeId, String aInNetworkId)\n    {\n        return execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT n.nodeId FROM ietf.ietf_network_networks_network_node n WHERE n.networkId = \" +\n                        \":networkId AND n.nodeId LIKE :pattern\")\n                .setParameter(\"networkId\", aInNetworkId)\n                .setParameter(\"pattern\", aInNodeId + \"%\")\n                .getResultList());\n\n    }\n\n    private List<Map<String,Object>> getLinkDetails(IYangDB aInYangDb, String aInNodeId, String aInNetworkId)\n    {\n        List<Object[]> linkDetails = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT la.linkId, la.name FROM ietf.ietf_241652239nk_ietf_l3_unicast_topology_l3_link_attributes la\" +\n                        \" WHERE la.networkId = :networkId AND la.linkId LIKE :linkId\")\n                .setParameter(\"networkId\", aInNetworkId)\n                .setParameter(\"linkId\", \"%\" + aInNodeId + \":%\")\n                .getResultList());\n\n       List<Map<String,Object>> linkList = new ArrayList<>();\n        if(CollectionUtils.isNotEmpty(linkDetails)) {\n            linkDetails.forEach(obj -> {\n                Map<String,Object> linkMap = new HashMap<>();\n                linkMap.put(LINK_ID, obj[0]);\n                linkMap.put(NAME, obj[1]);\n                linkList.add(linkMap);\n            });\n        }\n\n        return linkList;\n\n    }\n\n    private List<Object> getSubnetName(IYangDB aInYangDb, String aInNodeId, String aInNetworkId)\n    {\n        return execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT n.name FROM ietf.ietf_220877889de_ietf_l3_unicast_topology_l3_node_attributes n WHERE n.networkId = \" +\n                        \":networkId AND n.nodeId = :nodeId\")\n                .setParameter(\"networkId\", aInNetworkId)\n                .setParameter(\"nodeId\", aInNodeId)\n                .getResultList());\n\n    }\n\n    private void updatePrefix(IYangDB aInYangDB, QueryParameters aInQp, ObjectModification aInEvent) {\n\n        //if the changed property is not one of the properties that could change, ignore the event.\n\n        Set<String> updateableAttributes = new HashSet<>(Arrays.asList(\"metric\"));\n        Map<String, Object> prefix  = aInEvent.getEntity().asMap();\n        boolean isValidUpdate = false;\n        for (ObjectModification.Change change : aInEvent.getChanges()) {\n            if (updateableAttributes.contains(change.getName())) {\n                isValidUpdate = true;\n                break;\n            }\n        }\n\n        if(isValidUpdate) {\n            String instanceId = aInEvent.getInstanceId();\n            String adminDomain = extractAdminDomain(instanceId);\n            String nodeId = StringUtils.substringBetween(instanceId, \"routing-instance[id='\", \"'\");\n            String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n            nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, nodeId);\n            QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols\");\n            IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n\n            if (nodeObj != null) {\n                Map<String, Object> nodeMap = nodeObj.asMap();\n                String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n                if (networkId != null) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                    String ipAddress = (String) prefix.get(IP_ADDRESS);\n                    String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                    IYangObject prefixObj = aInYangDB.getSingle(prefixPathIden, aInQp);\n                    if (prefixObj != null) {\n                        int metric = (int) prefix.get(\"metric\");\n                        prefixObj.setProperty(\"metric\", metric);\n                        updateInDb(aInYangDB, prefixObj, prefixPathIden, null, null, UPDATE, null, aInQp);\n                    }\n                }\n            }\n\n        }\n    }\n\n    private void updateMsd(IYangDB aInYangDB, String aInNodeId, Map<String,Object> aInNode, String aInNetworkId) {\n\n        if (aInNode != null && aInNetworkId != null) {\n            QueryParameters qp = getFilteredQueryParameters(null);\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId);\n            String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, aInNodeId);\n            String nodeAttrIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\";\n            IYangObject srMplsObj = aInYangDB.getSingle(nodeAttrIden + \"/\" + SR_MPLS_TYPE);\n            Map<String, IYangObject> existingMsds = new HashMap<>();\n            if(srMplsObj != null) {\n                Collection<IYangObject> msdsList = ((IYangObject)srMplsObj.getProperty(MSDS)).getProperty(\"node-msd\");\n\n                if(msdsList != null && !msdsList.isEmpty()) {\n                    for(IYangObject msd : msdsList) {\n                        String[] msdIden = msd.get(MSD_TYPE).toString().split(\":\");\n                        existingMsds.put(msdIden.length == 2 ? msdIden[1]:msdIden[0], msd);\n                    }\n                }\n            }\n\n            List<Map> currentMsds = ((List)aInNode.get(MSDS));\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"L3 - EXISTING IETF MSDs - {}\", existingMsds.keySet().toString());\n                logger.debug(\"L3 - CURRENT NSP MSDs - {}\", currentMsds.toString());\n            }\n            if(currentMsds == null || currentMsds.isEmpty()) {\n                if(srMplsObj != null) {\n                    //delete the sr-mpls type.\n                    logger.debug(\"L3 - Update Node - delete msd sr mpls  {}\", nodeAttrIden);\n                    updateInDb(aInYangDB, null, nodeAttrIden + \"/\" + SR_MPLS_TYPE, null, null, DELETE, null, qp);\n                }\n            }\n            else {\n\n                for(Map msd : currentMsds) {\n                    String msdKey = msd.get(MSD_TYPE).toString();\n                    if(!existingMsds.containsKey(msdKey) && srMplsObj != null) {\n                        //creation\n                        IYangObject newMsdObj = getMsdYangObject(new YangObject(), msd, aInNetworkId, aInNodeId);\n                        updateInDb(aInYangDB, newMsdObj, \"\", nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"node-msd\", CREATE, null, qp);\n                        logger.debug(\"L3 - Update Node - create msd {}, {}\", msdKey, nodeAttrIden);\n                    }\n                    else if(!existingMsds.containsKey(msdKey) && srMplsObj == null) {\n                        srMplsObj = new YangObject();\n                        srMplsObj.setProperty(NETWORK_ID, aInNetworkId);\n                        srMplsObj.setProperty(NODE_ID, aInNodeId);\n\n                        IYangObject msdObj = new YangObject();\n                        msdObj.setProperty(NETWORK_ID, aInNetworkId);\n                        msdObj.setProperty(NODE_ID, aInNodeId);\n                        srMplsObj.setProperty(MSDS, msdObj);\n\n                        updateInDb(aInYangDB, srMplsObj, \"\", nodeAttrIden, SR_MPLS_TYPE, CREATE, null, qp);\n\n                        IYangObject newMsdObj = getMsdYangObject(new YangObject(), msd, aInNetworkId, aInNodeId);\n                        updateInDb(aInYangDB, newMsdObj, \"\", nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"node-msd\", CREATE, null, qp);\n                        logger.debug(\"L3 - Update Node - create msd {}, {}\", msdKey, nodeAttrIden);\n                    }\n                    else {\n                        //update\n                        IYangObject aInTargetMsd = existingMsds.get(msdKey);\n                        aInTargetMsd.setProperty(MSD_VALUE, msd.get(MSD_VALUE));\n                        logger.debug(\"L3 - Update Node - update msd {}, {}\", msdKey, nodeAttrIden);\n                        updateInDb(aInYangDB, srMplsObj, nodeAttrIden + \"/\" + SR_MPLS_TYPE, null, null, UPDATE, null, getFilteredQueryParameters(null));\n                        existingMsds.remove(msdKey);\n                    }\n                }\n                if(!existingMsds.isEmpty()) {\n                    //deletion\n                    for(IYangObject deleteMsd : existingMsds.values()) {\n                        String msdPath = String.format(nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds/node-msd[msd-type='%s']\",\n                                deleteMsd.get(MSD_TYPE));\n                        logger.debug(\"L3 - Update Node - delete msd {}\", msdPath);\n                        updateInDb(aInYangDB, null, msdPath, null, null, DELETE, null, getFilteredQueryParameters(null));\n                    }\n                }\n            }\n        }\n    }\n\n    private IYangObject getMsdYangObject(IYangObject aInTargetMsd, Map aInSourceMsd, String aInNetworkId, String aInNodeId) {\n        aInTargetMsd.setProperty(NETWORK_ID, aInNetworkId);\n        aInTargetMsd.setProperty(LINK_ID, aInNodeId);\n        aInTargetMsd.setProperty(MSD_TYPE, aInSourceMsd.get(MSD_TYPE));\n        aInTargetMsd.setProperty(MSD_VALUE, aInSourceMsd.get(MSD_VALUE));\n        return aInTargetMsd;\n    }\n\n    private void updateLink(IYangDB aInYangDB, ObjectModification aInEvent, IMdConverterFw aInConverterFw) {\n\n        //if the changed property is not one of the properties that could change, ignore the event.\n\n        Set<String> updateableAttributes = new HashSet<>(Arrays.asList(\"te-metric\", \"cost\"));\n        Set<String> updateableTeAttributes = new HashSet<>(Arrays.asList(\"te-metric\", \"cost\", \"latency\", \"isis-level\",\n                \"bw\", \"available-bw\", \"one-way-min-delay\", \"one-way-max-delay\", \"srg-labels\"));\n        Set<String> updatableSrMplsAttributes = new HashSet<>(Arrays.asList(SIDS));\n        Map<String, Object> link  = aInEvent.getEntity().asMap();\n        boolean isValidLinkUpdate = false;\n        boolean isValidTeLinkUpdate = false;\n        boolean isValidPriorityUpdate = false;\n        boolean isValidIpUpdate = false;\n        boolean isValidSrMplsUpdate = false;\n\n        for (ObjectModification.Change change : aInEvent.getChanges()) {\n            isValidLinkUpdate = updateableAttributes.contains(change.getName());\n            isValidSrMplsUpdate = updatableSrMplsAttributes.contains(change.getName());\n        }\n        if(TE_TOPOLOGY_ENABLED) {\n            isValidTeLinkUpdate = aInEvent.getChanges().size() == 1; // srlg changes are coming as empty.\n            for (ObjectModification.Change change : aInEvent.getChanges()) {\n                if (\"un-resv-bw\".equals(change.getName())) {\n                    isValidPriorityUpdate = true;\n                }\n                if (updateableTeAttributes.contains(change.getName())) {\n                    isValidTeLinkUpdate = true;\n                }\n                isValidIpUpdate = \"ip-address\".equals(change.getName());\n            }\n        }\n\n        // if ip-address is changed, the link needs to be created.\n        if(isValidIpUpdate) {\n            logger.debug(\"L3 - CREATE LINK FROM IP-ADDRESS UPDATE\");\n            String name = (String) link.get(NAME);\n            String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n            QueryParameters qp = getFilteredQueryParameters(IP_LINK_FIELDS);\n            IYangObject linkObj = aInYangDB.getSingle(nspServiceIpLinkIden, qp);\n\n            if(linkObj != null) {\n                String networkId = getNetworkIdFromLink((List<String>) linkObj.get(\"admin-domains\"), (String) linkObj.get(\"protocol\"));\n                if (networkId != null) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    if (aInYangDB.exists(networkPathIdentifier, qp)) {\n                        createLink(linkObj.asMap(), aInYangDB, aInConverterFw, networkId, true, null);\n                        return;\n                    } else {\n                        logger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", linkObj.get(NAME));\n                    }\n                }\n            }\n        }\n\n        if(isValidLinkUpdate || isValidTeLinkUpdate || isValidPriorityUpdate || isValidSrMplsUpdate) {\n            String name = (String) link.get(NAME);\n            List<Object> linkDetails = getLinkFromDb(name, aInConverterFw.getYangDBConfig());\n            if(linkDetails != null && !linkDetails.isEmpty()) {\n                String linkId = ((Object[])linkDetails.get(0))[0].toString();\n                String networkId = ((Object[])linkDetails.get(0))[1].toString();\n                if(isValidLinkUpdate || isValidSrMplsUpdate) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n                    QueryParameters qp = getFilteredQueryParameters(null);\n                    if(isValidLinkUpdate) {\n                        IYangObject ietfLinkObj = aInYangDB.getSingle(linkPathIdentifier, qp);\n                        if (ietfLinkObj != null) {\n                            logger.debug(\"L3 - updating link: {} on {}\", linkId, networkId);\n                            IYangObject linkAttrObj = (YangObject) ietfLinkObj.get(\"ietf-l3-unicast-topology:l3-link-attributes\");\n                            linkAttrObj.setProperty(\"metric1\", link.get(\"cost\"));\n                            linkAttrObj.setProperty(\"metric2\", link.get(\"te-metric\"));\n                            ietfLinkObj.setProperty(\"ietf-l3-unicast-topology:l3-link-attributes\", linkAttrObj);\n                            ietfLinkObj.removeProperty(SUPPORTING_LINK);\n                            updateInDb(aInYangDB, ietfLinkObj, linkPathIdentifier, null, null, UPDATE, null, getFilteredQueryParameters(null));\n                        } else {\n                            logger.debug(\"L3 - LINK changes ignored - link doesn't exist. {}\", linkPathIdentifier);\n                        }\n                    }\n\n                    if(isValidSrMplsUpdate) {\n                        updateSid(aInYangDB, qp, link, linkPathIdentifier, networkId, linkId);\n                    }\n                }\n\n                //Update TE Properties\n                if(TE_TOPOLOGY_ENABLED && (isValidTeLinkUpdate || isValidPriorityUpdate)) {\n                    String teNetworkId = getTeNetworkId(networkId);\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n                    String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n                    QueryParameters qp = getFilteredQueryParameters(null);\n                    if(updateTeLink(aInYangDB, qp, link, linkPathIdentifier, teNetworkId, linkId, isValidPriorityUpdate)) {\n                        if (isValidPriorityUpdate) {\n                            updateTeLinkPriority(aInYangDB, link, linkPathIdentifier);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            handleUpdateLogger.debug(\"L3 - LINK changes ignored - {} on {} \", aInEvent.getChanges(), link.toString());\n        }\n    }\n\n    private boolean updateTeLink(IYangDB aInYangDB,  QueryParameters aInQp, Map<String, Object> aInLink, String aInLinkPathIdentifier,\n                              String aInTeNetworkId, String aInLinkId, boolean isValidPriorityUpdate) {\n        IYangObject ietfTeLinkObj = aInYangDB.getSingle(aInLinkPathIdentifier, aInQp);\n        if (ietfTeLinkObj != null) {\n            logger.debug(\"L3 - updating TE link: {} on {}\", aInLinkId, aInTeNetworkId);\n            IYangObject teObj = (YangObject) ietfTeLinkObj.get(\"ietf-te-topology:te\");\n            IYangObject linkAttrObj = (YangObject) teObj.get(\"te-link-attributes\");\n            linkAttrObj.setProperty(\"te-default-metric\", aInLink.get(\"te-metric\"));\n            linkAttrObj.setProperty(\"te-delay-metric\", aInLink.get(\"latency\"));\n            linkAttrObj.setProperty(\"te-igp-metric\", aInLink.get(\"cost\"));\n            if(aInLink.get(\"bw\") != null) {\n                IYangObject maxLinkBandwidth = (YangObject) linkAttrObj.get(\"max-link-bandwidth\");\n                IYangObject maxLinkTeBandwidth = (YangObject) maxLinkBandwidth.get(\"te-bandwidth\");\n                // convert kilo bits to bytes and then to IEEE 754 format.\n                maxLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(\n                        convertKiloBitstoBytes(aInLink.get(\"bw\") instanceof Integer ? (Integer) aInLink.get(\"bw\") :\n                                (Long) aInLink.get(\"bw\")))));\n                maxLinkBandwidth.setProperty(\"te-bandwidth\", maxLinkTeBandwidth);\n\n                IYangObject maxResvLinkBandwidth = (YangObject) linkAttrObj.get(\"max-link-bandwidth\");\n                IYangObject maxResvLinkTeBandwidth = (YangObject) maxResvLinkBandwidth.get(\"te-bandwidth\");\n                maxResvLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(\n                        convertKiloBitstoBytes(aInLink.get(\"bw\") instanceof Integer ? (Integer) aInLink.get(\"bw\") :\n                                (Long) aInLink.get(\"bw\")))));\n                maxResvLinkBandwidth.setProperty(\"te-bandwidth\", maxResvLinkTeBandwidth);\n                linkAttrObj.setProperty(\"max-link-bandwidth\", maxLinkBandwidth);\n                linkAttrObj.setProperty(\"max-resv-link-bandwidth\", maxResvLinkBandwidth);\n            }\n            IYangObject tesrlgs = (YangObject) linkAttrObj.get(\"te-srlgs\");\n            tesrlgs.setProperty(\"value\", aInLink.get(\"srg-labels\"));\n\n            linkAttrObj.setProperty(\"te-srlgs\", tesrlgs);\n\n\n\n            IYangObject performanceMetricsOneWay = (YangObject) linkAttrObj.get(\"ietf-te-topology-packet:performance-metrics-one-way\");\n            performanceMetricsOneWay.setProperty(\"one-way-delay\", aInLink.get(\"latency\"));\n            performanceMetricsOneWay.setProperty(\"one-way-min-delay\", aInLink.get(\"one-way-min-delay\"));\n            performanceMetricsOneWay.setProperty(\"one-way-max-delay\", aInLink.get(\"one-way-max-delay\"));\n            if(aInLink.get(\"available-bw\") != null) {\n                performanceMetricsOneWay.setProperty(\"one-way-utilized-bandwidth\", String.format(\"%a\",\n                        Float.valueOf(convertKiloBitstoBytes(\n                                aInLink.get(\"available-bw\") instanceof Integer ?\n                                        (Integer) aInLink.get(\"available-bw\") : (Long) aInLink.get(\"available-bw\")))));\n            }\n            linkAttrObj.setProperty(\"ietf-te-topology-packet:performance-metrics-one-way\", performanceMetricsOneWay);\n            linkAttrObj.setProperty(NAME, aInLink.get(NAME));\n            if (!isValidPriorityUpdate) {\n                linkAttrObj.removeProperty(\"unreserved-bandwidth\");\n            }\n            teObj.setProperty(\"te-link-attributes\", linkAttrObj);\n            ietfTeLinkObj.setProperty(\"ietf-te-topology:te\", teObj);\n            updateInDb(aInYangDB, ietfTeLinkObj, aInLinkPathIdentifier, null, null, UPDATE, null, getFilteredQueryParameters(null));\n            return true;\n        }\n        else {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"L3 - TE LINK changes ignored - link doesn't exist. {}\", aInLinkPathIdentifier);\n            }\n        }\n        return false;\n    }\n\n    private void updateTeLinkPriority(IYangDB aInYangDB, Map<String, Object> aInLink, String aInLinkPathIdentifier) {\n        String teUnResvBwPathIdentifier = aInLinkPathIdentifier + \"/ietf-te-topology:te/te-link-attributes/unreserved-bandwidth\";\n        List<IYangObject> teUnResvBwObjList = aInYangDB.getMany(teUnResvBwPathIdentifier, getFilteredQueryParameters(null));\n        if (teUnResvBwObjList != null && !teUnResvBwObjList.isEmpty()) {\n            for (IYangObject teUnResvBwObj : teUnResvBwObjList) {\n                IYangObject maxUnResvTeBandwidth = (YangObject) teUnResvBwObj.get(\"te-bandwidth\");\n                Long unResvBw = aInLink.get(\"un-resv-bw\") instanceof Integer ?\n                        new Long((Integer)aInLink.get(\"un-resv-bw\")) : (Long) aInLink.get(\"un-resv-bw\") ;\n                unResvBw = unResvBw == null ? 0 : unResvBw;\n                maxUnResvTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes(unResvBw))));\n                teUnResvBwObj.setProperty(\"te-bandwidth\", maxUnResvTeBandwidth);\n                updateInDb(aInYangDB, teUnResvBwObj, teUnResvBwPathIdentifier + String.format(\"[priority='%s']\",\n                        teUnResvBwObj.get(\"priority\")), null, null, UPDATE, null, getFilteredQueryParameters(null));\n            }\n        }\n    }\n\n    private void updateSid(IYangDB aInYangDB,  QueryParameters aInQp, Map<String, Object> aInLink, String aInLinkPathIdentifier,\n                           String aInNetworkId, String aInLinkId) {\n        String linkAttrIden = aInLinkPathIdentifier + \"/ietf-l3-unicast-topology:l3-link-attributes\";\n        IYangObject srMplsObj = aInYangDB.getSingle(linkAttrIden + \"/\" + SR_MPLS_TYPE);\n        Map<String, IYangObject> existingSids = new HashMap<>();\n        if(srMplsObj != null) {\n            Collection<IYangObject> sidsList = ((IYangObject)srMplsObj.getProperty(SIDS)).getProperty(SID);\n\n            if(sidsList != null && !sidsList.isEmpty()) {\n                for(IYangObject sid : sidsList) {\n                    String sidKey = sid.get(VALUE_TYPE).toString() +\"-\"+ sid.get(SID);\n                    existingSids.put(sidKey, sid);\n                }\n            }\n        }\n\n        List<Map> currentSids = ((List)aInLink.get(SIDS));\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"EXISTING IETF SIDS - {}\", existingSids.keySet().toString());\n            logger.debug(\"CURRENT NSP SIDS - {}\", currentSids.toString());\n        }\n        if(currentSids == null || currentSids.isEmpty()) {\n            if(srMplsObj != null) {\n                //delete the sr-mpls type.\n                logger.debug(\"L3 - Update Link - delete sid sr mpls  {}\", linkAttrIden);\n                updateInDb(aInYangDB, null, linkAttrIden + \"/\" + SR_MPLS_TYPE, null, null, DELETE, null, aInQp);\n            }\n        }\n        else {\n\n            for(Map sid : currentSids) {\n                String sidKey = sid.get(VALUE_TYPE).toString() +\"-\"+ sid.get(SID);\n                if(!existingSids.containsKey(sidKey) && srMplsObj != null) {\n                    //creation\n                    IYangObject newSidObj = getSidYangObject(new YangObject(), sid, aInNetworkId, aInLinkId);\n                    updateInDb(aInYangDB, newSidObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids\", \"sid\", CREATE, null, aInQp);\n                    logger.debug(\"L3 - Update Link - sid added to existing sids {}, {}\", sidKey, linkAttrIden);\n                }\n                else if(!existingSids.containsKey(sidKey) && srMplsObj == null) {\n                    srMplsObj = new YangObject();\n                    srMplsObj.setProperty(NETWORK_ID, aInNetworkId);\n                    srMplsObj.setProperty(LINK_ID, aInLinkId);\n\n                    IYangObject sidObj = new YangObject();\n                    sidObj.setProperty(NETWORK_ID, aInNetworkId);\n                    sidObj.setProperty(LINK_ID, aInLinkId);\n                    srMplsObj.setProperty(SIDS, sidObj);\n\n                    updateInDb(aInYangDB, srMplsObj, \"\", linkAttrIden, SR_MPLS_TYPE, CREATE, null, aInQp);\n\n                    IYangObject newSidObj = getSidYangObject(new YangObject(), sid, aInNetworkId, aInLinkId);\n                    updateInDb(aInYangDB, newSidObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids\", \"sid\", CREATE, null, aInQp);\n                    logger.debug(\"L3 - Update Link - create sid {}, {}\", sidKey, linkAttrIden);\n                }\n                else {\n                    //update\n                    IYangObject aInTargetSid = existingSids.get(sidKey);\n                    aInTargetSid.setProperty(ADDRESS_FAMILY, sid.get(ADDRESS_FAMILY));\n                    aInTargetSid.setProperty(IS_ELG_PROT, sid.get(IS_ELG_PROT));\n                    aInTargetSid.setProperty(IS_LOCAL, sid.get(IS_LOCAL));\n                    aInTargetSid.setProperty(IS_PART_SET, sid.get(IS_PART_SET));\n                    aInTargetSid.setProperty(IS_PERS, sid.get(IS_PERS));\n                    aInTargetSid.setProperty(IS_ON_LAN, sid.get(IS_ON_LAN));\n                    aInTargetSid.setProperty(WEIGHT, sid.get(WEIGHT));\n                    logger.debug(\"L3 - Update Link - update sid {}, {}\", sidKey, linkAttrIden);\n                    updateInDb(aInYangDB, srMplsObj, linkAttrIden + \"/\" + SR_MPLS_TYPE, null, null, UPDATE, null, getFilteredQueryParameters(null));\n                    existingSids.remove(sidKey);\n                }\n            }\n            if(!existingSids.isEmpty()) {\n                //deletion\n                for(IYangObject deleteSid : existingSids.values()) {\n                    String sidPath = String.format(linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids/sid[value-type='%s'][sid='%s']\",\n                            deleteSid.get(VALUE_TYPE), deleteSid.get(SID));\n                    logger.debug(\"L3 - Update Link - delete sid {}\", sidPath);\n                    updateInDb(aInYangDB, null, sidPath, null, null, DELETE, null, getFilteredQueryParameters(null));\n                }\n            }\n        }\n    }\n\n    private IYangObject getSidYangObject(IYangObject aInTargetSid, Map aInSourceSid, String aInNetworkId, String aInLinkId) {\n        aInTargetSid.setProperty(NETWORK_ID, aInNetworkId);\n        aInTargetSid.setProperty(LINK_ID, aInLinkId);\n        aInTargetSid.setProperty(VALUE_TYPE, aInSourceSid.get(VALUE_TYPE));\n        aInTargetSid.setProperty(SID, aInSourceSid.get(SID));\n        aInTargetSid.setProperty(ADDRESS_FAMILY, aInSourceSid.get(ADDRESS_FAMILY));\n        aInTargetSid.setProperty(IS_ELG_PROT, aInSourceSid.get(IS_ELG_PROT));\n        aInTargetSid.setProperty(IS_LOCAL, aInSourceSid.get(IS_LOCAL));\n        aInTargetSid.setProperty(IS_PART_SET, aInSourceSid.get(IS_PART_SET));\n        aInTargetSid.setProperty(IS_PERS, aInSourceSid.get(IS_PERS));\n        aInTargetSid.setProperty(IS_ON_LAN, aInSourceSid.get(IS_ON_LAN));\n        aInTargetSid.setProperty(WEIGHT, aInSourceSid.get(WEIGHT));\n        return aInTargetSid;\n    }\n\n    public void handleDeleteEvent(SrcClass aInSrcClass,SyncClass aInSyncClass, ObjectDeletion aInEvent,\n                                  String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n\n        if(aInEvent.getInstanceId().contains(L2_NETWORK_PATH)) {\n            handleL2DeleteEvent(aInEvent, converterFw);\n            return;\n        }\n\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n            logger.debug(\"---------------------------------------------------DELETE---------------------------------------------------------------------------\");\n        }\n\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        QueryParameters qp = getFilteredQueryParameters(null);\n        Map<String, Object> srcObject  = aInEvent.getEntity().asMap();\n        Map<String, Object> meta = (Map) srcObject.get(\"@\");\n        if(meta == null) {\n            logger.warn(\"L3 - meta details are missing on the event\");\n        }\n        else if(((String) meta.get(\"nsp-model:identifier\")).contains(NETWORKS_PATH) &&\n                !((String) meta.get(\"nsp-model:identifier\")).contains(L2_NETWORK_PATH))\n        {\n            if (logger.isDebugEnabled())\n            {\n                logger.debug(\"L3 - DELETE IGNORED {}\", meta.get(\"nsp-model:identifier\"));\n            }\n            return; //sometimes the srcobject has ietf object details\n        }\n\n        if (aInSyncClass.getDestClassPath().equals(NETWORK_CLASS_PATH)) {\n\n            logger.debug(\"L3 - DELETE NETWORK\");\n            deleteNetwork(yangDB, qp, aInEvent.getEntity());\n        }\n        else if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n                logger.debug(\"L3 - DELETE PREFIX\");\n                String instanceId = aInEvent.getInstanceId();\n                String ipAddress = (String) aInEvent.getEntity().get(IP_ADDRESS);\n                deletePrefix(yangDB, getFilteredQueryParameters(null), instanceId, ipAddress);\n            }\n            else {\n                logger.debug(\"L3 - DELETE NODE\");\n                deleteNode(yangDB, qp, srcObject, dbConfig, null, null);\n            }\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n\n            logger.debug(\"L3 - DELETE LINK\");\n            deleteLink(yangDB, qp, srcObject, dbConfig, null);\n        }\n    }\n\n    private void deleteNetwork(IYangDB aInYangDB, QueryParameters aInQp, IYangObject aInSrcObject) {\n        String networkId = getNetworkId(aInYangDB, aInSrcObject);\n        if(networkId == null) {\n            //it could be one of isis or ospf.\n            String adminDomain = (String) aInSrcObject.get(NAME);\n            String ospfNetworkId = adminDomain + \"-ospf\";\n            String ospfNetworkPathIdentifier = String.format(L3_NETWORK_PATH, ospfNetworkId);\n            if(aInYangDB.exists(ospfNetworkPathIdentifier, aInQp))\n            {\n                networkId = ospfNetworkId;\n            }\n\n            String isisNetworkId = adminDomain + \"-isis\";\n            String isisNetworkPathIdentifier = String.format(L3_NETWORK_PATH, isisNetworkId);\n            if(aInYangDB.exists(isisNetworkPathIdentifier, aInQp)) {\n                // exit if both ospf and isis exists for the same admin domain\n                networkId = networkId == null ? isisNetworkId : null;\n            }\n        }\n\n        if(networkId != null) {\n            logger.debug(\"L3 - DELETING NETWORK {}\", networkId);\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            updateInDb(aInYangDB, null, networkPathIdentifier, networkId, null, DELETE, null, aInQp);\n            if(TE_TOPOLOGY_ENABLED) {\n                String teNetworkId = getTeNetworkId(networkId);\n                logger.debug(\"L3 - DELETING NETWORK {}\", teNetworkId);\n                updateInDb(aInYangDB, null, String.format(L3_NETWORK_PATH, teNetworkId), teNetworkId, null, DELETE, null, aInQp);\n            }\n        }\n        else {\n            logger.warn(\"L3 -  DELETING NETWORK - for admin domain {} failed. Couldn't find the right IETF network.\", aInSrcObject.get(NAME));\n        }\n    }\n\n    private void deleteNode(IYangDB aInYangDB, QueryParameters aInQp, Map<String,Object> aInSrcObject,\n                            YangDBConfig dbConfig, String aInNetworkId, String aInNodeId) {\n        String networkId =  aInNetworkId == null ? getNetworkIdFromMeta(aInYangDB, aInSrcObject) : aInNetworkId;\n        if(networkId != null) {\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            if(aInYangDB.exists(networkPathIdentifier, aInQp)) {\n                String nodeId = aInNodeId;\n                if(nodeId == null && SUBNET.equals(aInSrcObject.get(NODE_TYPE))) {\n                    String routerId = null;\n                    String systemId = getSubnetSystemId((String) aInSrcObject.get(NAME));\n                    if(systemId != null && systemId.contains(\"dr\")) {\n                        routerId = (String) aInSrcObject.get(\"dr-ip-address\");\n                    }\n                    routerId = routerId == null ? InetAddresses.isInetAddress(systemId) ? systemId : getSubnetNodeIdFromDB(dbConfig, systemId, networkId) : routerId;\n                    if(routerId == null) {\n                        logger.error(\"L3 - deleteNode - Couldn't delete the subnet node because router-id is null for {}\", systemId);\n                        return;\n                    }\n                    nodeId = routerId +\"-\"+getSubnetPsnId((String) aInSrcObject.get(NAME));\n                }\n                else if(nodeId == null) {\n                    nodeId = (String) aInSrcObject.get(ID);\n                }\n                String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                logger.debug(\"Deleting L3 node: {}\", nodePathIdentifier);\n                updateInDb(aInYangDB, null, nodePathIdentifier, null, null, DELETE, null, aInQp);\n                if(TE_TOPOLOGY_ENABLED) {\n                    String teNodePathIdentfier = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId)) + String.format(NODE_PATH, nodeId);\n                    if (aInYangDB.exists(teNodePathIdentfier, aInQp)) {\n                        logger.debug(\"Deleting TE node: {}\", teNodePathIdentfier);\n                        updateInDb(aInYangDB, null, teNodePathIdentfier, null, null, DELETE, null, aInQp);\n                    }\n                }\n            }\n        }\n    }\n\n    private void deletePrefix(IYangDB aInYangDB, QueryParameters aInQp, String aInInstanceId, String aInIpAddress) {\n\n        String adminDomain = extractAdminDomain(aInInstanceId);\n        String nodeId = StringUtils.substringBetween(aInInstanceId, \"routing-instance[id='\", \"'\");\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n        nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, nodeId);\n        QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols\");\n        IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n\n        if (nodeObj != null) {\n            Map<String, Object> nodeMap = nodeObj.asMap();\n            String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n            if (networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + aInIpAddress + \"']\";\n                if (aInYangDB.exists(prefixPathIden, aInQp)) {\n                    updateInDb(aInYangDB, null, prefixPathIden, null, null, DELETE, null, aInQp);\n                }\n            }\n        }\n    }\n\n    private void deleteLink(IYangDB aInYangDB, QueryParameters aInQp, Map<String,Object> aInLink, YangDBConfig aInDbConfig,\n                            List<Object> aInLinkDetails) {\n        String name = (String) aInLink.get(NAME);\n        List<Object> linkDetails = CollectionUtils.isEmpty(aInLinkDetails) ? getLinkFromDb(name, aInDbConfig) : aInLinkDetails;\n        if(linkDetails != null && !linkDetails.isEmpty()) {\n            String linkId = ((Object[])linkDetails.get(0))[0].toString();\n            String networkId = ((Object[])linkDetails.get(0))[1].toString();\n\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n            logger.debug(\"L3 - deleteLink {}\", linkPathIdentifier);\n            updateInDb(aInYangDB, null, linkPathIdentifier, null, null, DELETE, null, aInQp);\n\n            String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId));\n            //delete TE link\n            if(TE_TOPOLOGY_ENABLED) {\n                String teLinkPathIdentifier = teNetworkPathIdentifier + String.format(LINK_PATH, linkId);\n                logger.debug(\"L3 - deleteLink {}\", teLinkPathIdentifier);\n                updateInDb(aInYangDB, null, teLinkPathIdentifier, null, null, DELETE, null, aInQp);\n            }\n            //can delete source tp and destination tp?\n            String oppLinkId = getOppIetfLinkId(linkId);\n            String oppLinkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, oppLinkId);\n            if (!aInYangDB.exists(oppLinkPathIdentifier, aInQp)) {\n                // no other link is using the same source and destination. delete the TPs.\n                List<String> linkObjIds = getLinkObjIds(linkId);\n                String srcNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(0));\n                String srcNodeTPIdentifier = srcNodeIdentifier + String.format(TP_PATH, linkObjIds.get(1));\n                if(canDeleteTp(aInYangDB, \"%\" + linkObjIds.get(0) + \":\" + linkObjIds.get(1) + \"%\", networkId)) {\n                    deleteTerminationPoint(aInYangDB, aInQp, srcNodeIdentifier, srcNodeTPIdentifier);\n\n                    // delete TE src termination point\n                    if (TE_TOPOLOGY_ENABLED) {\n                        String teSrcNodeIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(0));\n                        String teSrcNodeTPIdentifier = teSrcNodeIdentifier + String.format(TP_PATH, linkObjIds.get(1));\n                        deleteTerminationPoint(aInYangDB, aInQp, teSrcNodeIdentifier, teSrcNodeTPIdentifier);\n                    }\n                }\n\n                String dstNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(2));\n                String dstNodeTPIdentifier = dstNodeIdentifier + String.format(TP_PATH, linkObjIds.get(3));\n                if(canDeleteTp(aInYangDB, \"%\" + linkObjIds.get(2) + \":\" + linkObjIds.get(3) + \"%\", networkId)) {\n                    deleteTerminationPoint(aInYangDB, aInQp, dstNodeIdentifier, dstNodeTPIdentifier);\n\n                    // delete TE dst termination point\n                    if (TE_TOPOLOGY_ENABLED) {\n                        String teDstNodeIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(2));\n                        String teDstNodeTPIdentifier = teDstNodeIdentifier + String.format(TP_PATH, linkObjIds.get(3));\n                        deleteTerminationPoint(aInYangDB, aInQp, teDstNodeIdentifier, teDstNodeTPIdentifier);\n                    }\n                }\n                //check whether the nodes has any more tps. if not delete the nodes as well.\n//                validateNode(aInYangDB, aInQp, srcNodeIdentifier, networkId);\n//                validateNode(aInYangDB, aInQp, dstNodeIdentifier, networkId);\n            }\n        }\n    }\n\n    @Override\n    public void handleReplaceEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectReplacement aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n        logger.debug(\"---------------------------------------------------REPLACE------------------------------------------------------------------\");\n    }\n\n//    void validateNode(IYangDB aInYangDB, QueryParameters aInQp, String aInNodeIdentifier, String networkId) {\n//        handleDeleteLogger.debug(\"VALIDATING NODE\");\n//        IYangObject nodeObj = aInYangDB.getSingle(aInNodeIdentifier, aInQp);\n//        if(nodeObj != null) {\n//            List tp = (List) nodeObj.get(\"ietf-network-topology:termination-point\");\n//            if(tp.isEmpty()) {\n//                handleDeleteLogger.debug(\"VALIDATING NODE - NO MORE TP. SO DELETING IT\");\n//                updateInDb(aInYangDB, null, aInNodeIdentifier, null, null, DELETE, null, aInQp);\n//            }\n//        }\n//    }\n\n    private void deleteTerminationPoint(IYangDB aInYangDB, QueryParameters aInQp, String aInSrcNodeIdentifier, String aInSrcNodeTPIdentifier) {\n        if(aInYangDB.exists(aInSrcNodeIdentifier, aInQp)) {\n            logger.debug(\"deleteTerminationPoint {}\", aInSrcNodeTPIdentifier);\n            updateInDb(aInYangDB, null, aInSrcNodeTPIdentifier, null, null, DELETE, null, aInQp);\n        }\n    }\n\n    public void handlePartialResync(SrcClass aInSrcClass, SyncClass aInSyncClass, long aInFromTime, String aInNeId, YangPluginMdConverterProvider aInYangPlugin) {\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n            logger.debug(\"---------------------------------------------------handlePartialResync-----------------------------------------------------------\");\n        }\n\n        IMdConverterFw converterFw = aInYangPlugin.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            logger.debug(\"L3 - handlePartialResync - UPDATE PREFIX after {}\", aInFromTime);\n            partialResyncPrefix(yangDB, aInFromTime);\n        }\n    }\n\n    void partialResyncPrefix(IYangDB yangDB, long aInFromTime) {\n        //get the prefixes that have changed after the timestamp.\n        QueryParameters  qp = getFilteredQueryParameters(null);\n        qp.setTimeField(TIME_FIELD_LAST_MODIFIED);\n        qp.setTimeFrom(aInFromTime);\n        List<IYangObject> prefixList = yangDB.getMany(NSP_SERVICE_GENERIC_PREFIX, qp);\n        if (prefixList != null && !prefixList.isEmpty()) {\n            prefixList.stream().forEach(prefix -> {\n                Map<String, Object> meta = (Map) prefix.asMap().get(\"@\"); //need to convert it to map to get the identifier\n                String identifier = (String) meta.get(\"nsp-model:identifier\");\n                String adminDomain = extractAdminDomain(identifier);\n                if(\"UnknownDomain\".equals(adminDomain) || adminDomain == null) {\n                    return;\n                }\n                String nodeId = StringUtils.substringBetween(identifier, \"routing-instance[id='\", \"'\");\n                String nodePath = extractNodePathFromPrefixPath(identifier);\n                IYangObject node = yangDB.getSingle(nodePath, getFilteredQueryParameters(\"protocols\"));\n                if(node != null) {\n                    String protocol = null;\n                    Collection<String> protocols = (Collection) node.get(\"protocols\");\n                    for (String p : protocols) {\n                        if(isValidProtocol(p)) {\n                            protocol = p;\n                            break;\n                        }\n                    }\n                    if(protocol == null) {\n                        return;\n                    }\n                    String networkId = adminDomain + \"-\" + protocol;\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                    String ipAddress = (String) prefix.get(IP_ADDRESS);\n                    String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                    QueryParameters queryParameters = getFilteredQueryParameters(null);\n                    if(yangDB.exists(prefixPathIden, queryParameters)) {\n                        //update\n                        logger.debug(\"L3 -  handlePartialResync - prefix - UPDATE {}\", prefixPathIden);\n                        IYangObject prefixObj = yangDB.getSingle(prefixPathIden, queryParameters);\n                        if (prefixObj != null) {\n                            int metric = (int) prefix.get(\"metric\");\n                            prefixObj.setProperty(\"metric\", metric);\n                            updateInDb(yangDB, prefixObj, prefixPathIden, null, null, UPDATE, null, queryParameters);\n                        }\n                    }\n                    else if (yangDB.exists(nodePathIdentifier)){\n                        //create\n                        logger.debug(\"L3 -  handlePartialResync - prefix - CREATE {}\", prefixPathIden);\n                        IYangObject prefixObj = new YangObject();\n                        prefixObj.setProperty(NETWORK_ID, networkId);\n                        prefixObj.setProperty(NODE_ID, nodeId);\n                        prefixObj.setProperty(PREFIX, ipAddress);\n                        prefixObj.setProperty(\"metric\", prefix.get(\"metric\"));\n                        updateInDb(yangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, queryParameters);\n\n                    }\n                }\n            });\n        }\n\n    }\n\n    private void updateInDb(IYangDB yangDB, IYangObject aInYangObject, String aInXPath, String aInParentPath,\n                            String aInChildType, String aInAction, ExecutionContext aInExecCtx, QueryParameters  aInQp) {\n\n        if (null != aInExecCtx) {\n            aInQp.setIExecutionContext(aInExecCtx);\n        }\n\n        if (null != aInAction) {\n            if (CREATE.equals(aInAction)) {\n                yangDB.createChild(aInParentPath, aInChildType, aInYangObject, aInQp);\n            } else if (\"UPDATE\".equals(aInAction)) {\n                yangDB.update(aInXPath, aInYangObject, aInQp);\n            } else {\n                yangDB.delete(aInXPath, aInQp);\n            }\n        }\n    }\n\n    List<String> getLinkObjIds(String aInLinkId) {\n        String[] idSplits = aInLinkId.split(\"--\");\n        String[] srcNodeSplits = idSplits[0].split(\":\");\n        String[] dstNodeSplits = idSplits[1].split(\":\");\n        List<String> linkObjIds = new ArrayList<>();\n        linkObjIds.add(srcNodeSplits[0]);\n        linkObjIds.add(srcNodeSplits[1]);\n        linkObjIds.add(dstNodeSplits[0]);\n        linkObjIds.add(dstNodeSplits[1]);\n        return linkObjIds;\n    }\n\n    String getOppIetfLinkId(String aInLinkId) {\n        String[] idSplits = aInLinkId.split(\"--\");\n        String oppLinkId = idSplits[1] + \"--\" + idSplits[0];\n        oppLinkId += (idSplits.length == 3) ? \"--\" + idSplits[2] : \"\";\n        return  oppLinkId;\n    }\n\n//    String getSubnetRouterId(String aInNodeId) {\n//        return aInNodeId.split(\"-psn\")[0];\n//    }\n\n    String getSubnetPsnId(String aInSubnetId) {\n        int fromIndex = aInSubnetId.indexOf(\"psn\");\n        if(fromIndex != -1 ) {\n            return(aInSubnetId.substring(fromIndex));\n        }\n        return aInSubnetId;\n    }\n\n    String getSubnetSystemId(String aInSubnetId) {\n        int toIndex = aInSubnetId.indexOf(\"-psn\");\n        if(toIndex != -1 ) {\n            return(aInSubnetId.substring(0, toIndex));\n        }\n\n        return aInSubnetId;\n    }\n\n    String getLinkId(String aInSrcNodeId, String aInDstNodeId, String aInSrcTpId, String aInDstTpId, String aInIsisLevel) {\n        String linkId = aInSrcNodeId + \":\" + aInSrcTpId + \"--\" + aInDstNodeId + \":\" + aInDstTpId;\n        if(aInIsisLevel != null) {\n            linkId = linkId + \"--\" + aInIsisLevel;\n        }\n        return linkId;\n    }\n\n    String getTerminationPointId( String aInOppLinkIdentifier, IYangDB aInYangDB, String aInNetworkId) {\n        logger.debug(\"Getting opposite link {}\", aInOppLinkIdentifier);\n        String dstTpId = null;\n        if(aInOppLinkIdentifier != null) {\n            QueryParameters qp = getFilteredQueryParameters(IP_ADDRESS);\n            List<IYangObject> oppLinkObjList = aInYangDB.getMany(aInOppLinkIdentifier, qp);\n            if(oppLinkObjList != null && !oppLinkObjList.isEmpty()) {\n                IYangObject oppLinkObj = oppLinkObjList.get(0);\n                dstTpId = (String) oppLinkObj.get(IP_ADDRESS);\n            }\n        }\n        return dstTpId;\n    }\n\n    Map<String,String> getLinkNodeDetails(String node) {\n        Map<String, String> nodeDetails = new HashMap<>();\n        if(node != null) {\n            String[] pathSplit = node.split(\"/\");\n            if (pathSplit.length > 0) {\n                String[] nodeSplit = pathSplit[pathSplit.length - 1].split(\"id=\");\n                if (nodeSplit.length > 1) {\n                    nodeDetails.put(NODE_TYPE, nodeSplit[0].substring(0, nodeSplit[0].length() - 1));\n                    nodeDetails.put(ID, nodeSplit[1].split(\"'\")[1]);\n                }\n            }\n        }\n        return nodeDetails;\n    }\n\n    String extractAdminDomain(String identifier) {\n        int fromIndex = identifier.indexOf(\"/admin-domain[name='\");\n        int toIndex = identifier.indexOf(\"'\", fromIndex+20);\n        return identifier.substring(fromIndex + 20, toIndex);\n    }\n\n    String extractNetworkIdFromIetfIdentifier(String identifier) {\n        return StringUtils.substringBetween(identifier, \"network-id='\", \"'\");\n    }\n\n    String extractLinkIdFromIetfIdentifier(String identifier) {\n        return StringUtils.substringBetween(identifier, \"link-id='\", \"'\");\n    }\n\n    String extractNodePathFromPrefixPath(String identifier) {\n        int fromIndex = 0;\n        int toIndex = identifier.indexOf(\"/prefix[\");\n        return identifier.substring(fromIndex, toIndex);\n    }\n\n    String getNetworkIdFromLink(List<String> aInDomains, String aInProtocol) {\n        String networkId = null;\n        if(aInDomains == null) {\n            logger.error(\"L3 - Link event missing admin domain info\");\n            return null;\n        }\n        for(String domain : aInDomains) {\n            String[] domainSplit = domain.split(\"'\");\n            networkId = domainSplit.length > 1 ? domainSplit[1] : null;\n            break;\n        }\n        if(networkId != null) {\n            if(aInProtocol.equals(\"ospf\") || aInProtocol.equals(\"isis\")) {\n                networkId = networkId + \"-\" + aInProtocol;\n                return networkId;\n            }\n        }\n        return null;\n    }\n\n    String getNetworkIdFromMeta(IYangDB aInYangDb, Map<String, Object> aInSrcObject) {\n        String networkId = null;\n        Map<String, Object> meta = (Map) aInSrcObject.get(\"@\");\n        String identifier = (String) meta.get(\"nsp-model:identifier\");\n        String adminDomain = extractAdminDomain(identifier);\n        if(\"UnknownDomain\".equals(adminDomain) || adminDomain == null) {\n            return null;\n        }\n        String protocol = null;\n        if(aInSrcObject.get(NODE_TYPE).equals(SUBNET)) {\n            protocol = (String) aInSrcObject.get(\"protocol\");\n        }\n        else {\n            Collection<String> protocols = (Collection) aInSrcObject.get(\"protocols\");\n            for (String p : protocols) {\n                if(isValidProtocol(p)) {\n                    protocol = p;\n                    break;\n                }\n            }\n        }\n\n        if(\"unknown\".equals(protocol) || protocol == null) {\n            protocol = getProtocolFromAdminDomain(aInYangDb, adminDomain);\n        }\n\n        if(isValidProtocol(protocol)) {\n            networkId = adminDomain + \"-\" + protocol;\n            return networkId;\n        }\n        else {\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"L3 - No valid protocol found for {}, {}\", adminDomain, protocol);\n            }\n        }\n\n        return networkId;\n\n    }\n\n    String getAdminDomainFromMeta(Map<String, Object> aInSrcObject) {\n        Map<String, Object> meta = (Map) aInSrcObject.get(\"@\");\n        String identifier = (String) meta.get(\"nsp-model:identifier\");\n        return extractAdminDomain(identifier);\n    }\n\n    String getNeIdFromRouterId(IYangDB aInYangDB, String aInNetworkId, String aInRouterId) {\n        if(aInRouterId.contains(\"psn\")) return null;\n        String[] domainSplit = aInNetworkId.split(\"-\");\n        String adminDomain = domainSplit[0] + \"-\" + domainSplit[1];\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain) + String.format(NSP_SERVICE_ROUTING_INS_PATH, aInRouterId);\n        QueryParameters qp = getFilteredQueryParameters(\"router/ne\");\n        List<IYangObject> nodeObjList = aInYangDB.getMany(nspServiceNodeIden, qp);\n        IYangObject nodeObj = (nodeObjList != null && !nodeObjList.isEmpty()) ? nodeObjList.get(0) : null;\n        if(nodeObj != null) {\n            IYangObject routerDetails = (IYangObject) nodeObj.get(\"router\");\n            if(routerDetails != null && routerDetails.get(\"ne\") != null) {\n                return extractNeId((String) routerDetails.get(\"ne\"));\n            }\n        }\n        return null;\n    }\n\n\n    boolean isValidProtocol(String protocol) {\n        return protocol != null && (protocol.equals(\"ospf\") || protocol.equals(\"isis\"));\n    }\n\n    String getNetworkId(IYangDB aInYangDb, IYangObject aInSrcObject) {\n        String networkId = (String) aInSrcObject.get(NAME);\n        if(networkId != null) {\n            String protocol = getProtocolFromAdminDomain(aInYangDb, networkId);\n            if (isValidProtocol(protocol)) {\n                networkId = networkId + \"-\" + protocol;\n                return networkId;\n            }\n        }\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"RETURNING NULL FOR {}\", networkId);\n        }\n        return null;\n    }\n\n    String getAdminDomainFromNetworkId(String aInNetworkId) {\n        String[] networkIds = aInNetworkId.split(\"-\");\n        return networkIds[0] + \"-\" + networkIds[1];\n    }\n\n    String getTeNetworkId(String networkId) {\n        return \"TE-\"+networkId;\n    }\n\n    String getSubnetNodeIdFromDB(YangDBConfig aInDbConfig, String aInSystemId, String aInNetworkId) {\n        String adminDomain = getAdminDomainFromNetworkId(aInNetworkId);\n\n        String lSql = \"SELECT id FROM service.routinginstance ri JOIN service.admindomain ad ON ad.dbid = ri.adminDomain_dbid\" +\n                    \" where systemId='\" + aInSystemId + \"' and ad.name = '\" + adminDomain + \"'\";\n        try {\n            final List<Object> query = aInDbConfig.getDb().selectQuery(lSql, new ArrayList<>(), new ArrayList<>(Arrays.asList(DBType.TEXT)));\n            if(query == null || query.isEmpty()) {\n                return null;\n            }\n            else {\n                return (String) query.get(0);\n            }\n        }\n        catch (Exception e)\n        {\n            logger.error(\"Exception when trying to get subnet-node-id for the system id: {} and admin domain: {}\", aInSystemId, adminDomain);\n        }\n        return null;\n    }\n\n    private List<Object> getLinkFromDb(String aInName, YangDBConfig aInDbConfig)\n    {\n        String lSql =  \"SELECT linkId, networkId FROM ietf.ietf_241652239nk_ietf_l3_unicast_topology_l3_link_attributes where name = '\" + aInName + \"'\";\n        try {\n            final List<Object> query = aInDbConfig.getDb().selectQuery(lSql, new ArrayList<>(), new ArrayList<>(Arrays.asList(DBType.TEXT, DBType.TEXT)));\n            return query;\n        }\n        catch (Exception e)\n        {\n            logger.error(\"Exception when trying to get the link {}\", aInName);\n        }\n        return null;\n    }\n\n    private String getPortDetailsFromDb(String aInTpId, IYangDB aInYangDb, String aInNeId)\n    {\n        List<Object> resourceList =  execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT erb.resource FROM service.endpointaddress ea JOIN service.endpointresourcebinding erb\" +\n                        \" ON ea.detailsParent_dbId = erb.endpoint_dbId WHERE ea.address = :address and erb.layer = 5\")\n                .setParameter(\"address\", aInTpId)\n                .getResultList());\n        if(resourceList == null || resourceList.isEmpty()) {\n            return null;\n        }\n        List<Long> dbIds = resourceList.stream().map(resource -> ModelFdnUtil.getId(ModelFdn.decode(resource.toString()))).collect(Collectors.toList());\n\n        if (dbIds != null && !dbIds.isEmpty()) {\n            try {\n                List<Object[]> portDetails = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                        .createQuery(\"SELECT eq.neId, eq.name FROM equipment_Equipment eq WHERE eq.dbId IN :dbids\")\n                        .setParameter(\"dbids\", dbIds)\n                        .getResultList());\n                if (!portDetails.isEmpty()) {\n                    for(Object[] portDetail : portDetails) {\n                        if(aInNeId.equals(portDetail[0])) {\n                            return (String) portDetail[1];\n                        }\n                    }\n                }\n            }\n            catch(Exception e) {\n                logger.error(\"L3 - Exception when finding the port name for the TP-ID: \" + aInTpId + \" and equipment dbIds: \" + dbIds.toString(), e);\n            }\n        }\n        return null;\n    }\n\n    private String getProtocolFromAdminDomain(IYangDB aInYangDb, String aInAdminDomain) {\n\n        try {\n            List<Object> protocols = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                    .createNativeQuery(\"SELECT rp.protocols FROM service.routinginstance ri \" +\n                            \"JOIN service.admindomain ad ON ri.admindomain_dbid = ad.dbid \" +\n                            \"JOIN service.routinginstance_protocols rp ON ri.dbid = rp.dbid \" +\n                            \"WHERE ad.name = :name AND ri.operstate = 1\")\n                    .setParameter(\"name\", aInAdminDomain)\n                    .getResultList());\n\n            if (!protocols.isEmpty()) {\n                for(Object protocol : protocols) {\n                    if((int)protocol == 1 || (int)protocol == 2) {\n                        return ((int)protocol == 1) ? \"isis\" : \"ospf\";\n                    }\n                }\n                return null;\n            }\n            else {\n                logger.warn(\"L3 - getProtocolFromAdminDomain - protocol is empty for {}\", aInAdminDomain);\n            }\n        }\n        catch (Exception e) {\n            return null;\n        }\n        return null;\n    }\n\n    private List<List<String>> getRouterDetailsFromNeId(IYangDB aInYangDb, String aInNeId)\n    {\n        List<Long> dbList =  execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createQuery(\"SELECT eq.dbId FROM equipment_NetworkElement eq WHERE eq.neId = :neId\")\n                .setParameter(\"neId\", aInNeId)\n                .getResultList());\n        if(dbList == null || dbList.isEmpty()) {\n            return null;\n        }\n\n        List<String> modelFdns = dbList.stream().map(dbId -> ModelFdn.encode(ModelFdnUtil.modelFdn(\"equipment.NetworkElement\", dbId))).collect(Collectors.toList());\n        List<List<String>> routerDetailsList = new ArrayList<>();\n        if (modelFdns != null && !modelFdns.isEmpty()) {\n            try {\n                List<Object[]> routerDetails = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                        .createNativeQuery(\"SELECT ri.id, ad.name, rp.protocols FROM service.routinginstance ri \" +\n                                \"JOIN service.admindomain ad ON ri.admindomain_dbid = ad.dbid \" +\n                                \"JOIN service.routinginstance_protocols rp ON ri.dbid = rp.dbid \" +\n                                \"JOIN service.router rr ON ri.router_dbid = rr.dbid \" +\n                                \"WHERE rr.ne IN :fdns OR rr.ne LIKE :pattern\")\n                        .setParameter(\"fdns\", modelFdns)\n                        /* sometimes when a node is re-managed, NRCP takes some time to update the router.ne field with the proper NE fdn.\n                         Until then it has one of the sources. Meanwhile we get the L2 correlation events and so we end up ignoring it.\n                         This pattern search will fix it */\n                        .setParameter(\"pattern\", \"%\" + aInNeId + \"%\")\n                        .getResultList());\n\n                if (routerDetails != null && !routerDetails.isEmpty()) {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - ROUTER DETAILS for NE-ID: {} are {}\", aInNeId, routerDetails.toString());\n                    }\n                    for(Object[] router : routerDetails) {\n                        int protocol = (int) router[2];\n                        String protocolName = (protocol == 1) ? \"isis\" : (protocol == 2) ? \"ospf\" : null;\n                        if(protocolName != null) {\n                            List<String> routerProps = new ArrayList<>();\n                            routerProps.add((String) router[0]);\n                            routerProps.add((String) router[1]);\n                            routerProps.add(protocolName);\n                            routerDetailsList.add(routerProps);\n                        }\n                    }\n                }\n                return routerDetailsList;\n            }\n            catch(Exception e) {\n                logger.error(\"L3 - Exception when finding the router ID for the NE-ID: \" + aInNeId, e);\n            }\n        }\n        return routerDetailsList;\n    }\n\n    public <T> T execute(IDB db, Function<ITransactionContext, T> fn) {\n        try {\n            if (Transactor.isInTransaction()) {\n                return fn.apply(Transactor.getContext());\n            } else {\n                return Transactor.execute(db, fn, true);\n            }\n        } catch (DBRuntimeException e) {\n            logger.error(\"L3 - DB ACCESS ERROR: \", e);\n            return null;\n        }\n    }\n\n\n    private String getSupportingNetworkRef(IYangDB aInYangDb, QueryParameters aInQp) {\n        return aInYangDb.exists(L2_NETWORK_PATH, aInQp) ? L2_NETWORK_PATH : null;\n    }\n\n    private String getSupportingNodeRef(IYangDB aInYangDb, QueryParameters aInQp, String aInNodeId) {\n        String supportingNodeRef = L2_NETWORK_PATH + String.format(NODE_PATH, aInNodeId);\n        supportingNodeRef = aInYangDb.exists(supportingNodeRef, aInQp) ? supportingNodeRef : null;\n        return supportingNodeRef;\n    }\n\n    private String getSupportingTpRef(IYangDB aInYangDb, QueryParameters aInQp, String aInNodeId, String aInTpId) {\n        String supportingTpRef = L2_NETWORK_PATH + String.format(NODE_PATH, aInNodeId)\n                + String.format(TP_PATH, aInTpId);\n        supportingTpRef = aInYangDb.exists(supportingTpRef, aInQp) ? supportingTpRef : null;\n        return supportingTpRef;\n    }\n\n    private String getSupportingLinkRef(IYangDB aInYangDb, QueryParameters aInQp, String aInLinkId) {\n        String supportingLinkRef = L2_NETWORK_PATH + String.format(LINK_PATH, aInLinkId);\n        supportingLinkRef = aInYangDb.exists(supportingLinkRef, aInQp) ? supportingLinkRef : null;\n        return supportingLinkRef;\n    }\n\n    String extractNeId(String identifier) {\n        if(identifier != null) {\n            int fromIndex = identifier.indexOf(\"ne-id='\");\n            if(fromIndex != -1) {\n                int toIndex = identifier.indexOf(\"'\", fromIndex + 7);\n                return identifier.substring(fromIndex + 7, toIndex);\n            }\n        }\n        return null;\n    }\n\n    public Map<String, String> getSubInterfacePortMap(String aInNodeId, IMdConverterFw aInConverterFw) {\n        String subInterfacePath = String.format(SUBINTERFACE_FILTER, aInNodeId);\n        Map<String, String> portInterfaceMap = new HashMap<>();\n        try {\n            IRestConfClient restConfClient = aInConverterFw.getRestConfClient();\n            Map<String,Object> lResponse = restConfClient.xpathGetData(subInterfacePath, \"fields=openconfig-if-ip:ipv4;config&depth=5\");\n            if (lResponse != null && !lResponse.isEmpty()) {\n                List<Map> subInterfaces = (List<Map>) lResponse.get(\"openconfig-interfaces:subinterface\");\n                if(subInterfaces != null) {\n                    for (Map subInterface : subInterfaces) {\n                        String ip = extractIpFromSubInterface((Map) subInterface.get(\"openconfig-if-ip:ipv4\"));\n                        if(ip != null) {\n                            String port = extractPortFromSubInterface((Map) subInterface.get(\"config\"));\n                            portInterfaceMap.put(ip, getPortNameFromOpenConfigPortName(port));\n                        }\n                    }\n                }\n            }\n        }\n        catch(Exception e) {\n            logger.warn(\"L3 - RestconfApi cannot get subinterfaces.\");\n        }\n        return portInterfaceMap;\n    }\n\n    public String getSubInterfaces(String aInNodeId, IMdConverterFw aInConverterFw, String ip) {\n         /* Getting errors when tried to query the parent based on the child attributes.\n           java.lang.IllegalArgumentException: only simple xpaths are supported - failing with this error message\n           So we have to get all the network interfaces on the node and find the matching one. Ideal filter below\n           /nsp-network:network/node[node-id='%s']/node-root/\" +\n           \"openconfig-interfaces:interfaces/interface/subinterfaces/subinterface\" +\n           \"[boolean(openconfig-if-ip:ipv4/addresses/address[ip='%s'])]\"\n         */\n        String subInterfacePath = String.format(SUBINTERFACE_FILTER, aInNodeId);\n        Integer unnumbered = Ints.tryParse(ip);\n        String unnumberedInterface = ip.contains(\"%\") ? ip.split(\"%\")[1] : unnumbered == null ? null : unnumbered.toString();\n        if(unnumberedInterface != null && !unnumberedInterface.isEmpty()) {\n            subInterfacePath += String.format(SUBINTERFACE_UNNUM_FILTER, unnumberedInterface);\n        }\n        try {\n            IRestConfClient restConfClient = aInConverterFw.getRestConfClient();\n            Map<String,Object> lResponse = restConfClient.xpathGetData(subInterfacePath, \"fields=openconfig-if-ip:ipv4;config&depth=5\");\n            if (lResponse != null && !lResponse.isEmpty()) {\n                List<Map> subInterfaces = (List<Map>) lResponse.get(\"openconfig-interfaces:subinterface\");\n                if(subInterfaces != null) {\n                    for (Map subInterface : subInterfaces) {\n                        if (!unnumberedInterface.isEmpty() || ip.equals(extractIpFromSubInterface((Map) subInterface.get(\"openconfig-if-ip:ipv4\")))){\n                            String port = extractPortFromSubInterface((Map) subInterface.get(\"config\"));\n                            return getPortNameFromOpenConfigPortName(port);\n                        }\n                    }\n                }\n            }\n        }\n        catch(Exception e) {\n            logger.warn(\"L3 - RestconfApi cannot get subinterfaces.\");\n        }\n        return null;\n    }\n\n    private String extractIpFromSubInterface(Map aInIpMap) {\n        if(aInIpMap != null) {\n            Map addresses = (Map) aInIpMap.get(\"addresses\");\n            if (addresses != null) {\n                List<Map> addressList = (List) addresses.get(\"address\");\n                if (addressList != null) {\n                    for (Map ipMap : addressList) {\n                        return (String) ipMap.getOrDefault(\"ip\", null);\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    private String extractPortFromSubInterface(Map aInConfigMap) {\n        if(aInConfigMap != null) {\n            return (String) aInConfigMap.getOrDefault(\"nsp-openconfig-interfaces-augments:port\", null);\n        }\n        return null;\n    }\n\n    private String getPortNameFromOpenConfigPortName(String portName) {\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - Port Name from openConfig api: {}\",portName);\n        }\n        if(portName == null) return null;\n\n//        if(portName.contains(\"GigabitEthernet\")) {\n//            //cisco\n//            String[] port = portName.split(\"GigabitEthernet\");\n//            return \"GigabitEthernet Port \" + port[1];\n//        }\n\n        if(portName.contains(\":\")) {\n            String[] port = portName.split(\":\");\n            return port[0];\n        }\n        else {\n            return portName;\n        }\n    }\n\n    private boolean canDeleteTp(IYangDB aInYangDb, String aInPattern, String aInNetworkId) {\n        BigInteger count = (BigInteger) execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT count(*) FROM \" +\n                        \"ietf.ietf_network_networks_network_ietf_network_topology_link sl WHERE sl.linkId LIKE :pattern \" +\n                        \"AND sl.networkId = :networkId\")\n                .setParameter(\"pattern\", aInPattern)\n                .setParameter(\"networkId\", aInNetworkId)\n                .getSingleResult());\n        return count != null && count.longValue() == 0;\n    }\n\n    private void createSupportingNetwork(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInSupportingNetworkRef) {\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId);\n        IYangObject supportingNetworkobj = new YangObject();\n        supportingNetworkobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingNetworkobj.setProperty(NETWORK_REF, aInSupportingNetworkRef);\n        updateInDb(aInYangDB, supportingNetworkobj, \"\", networkPathIdentifier, SUPPORTING_NETWORK, CREATE, null, aInQp);\n    }\n\n    private void createSupportingNode(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                                      String aInSupportingNodeRef, String aInNodePathIdentifier) {\n        IYangObject supportingNodeobj = new YangObject();\n        supportingNodeobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingNodeobj.setProperty(NODE_ID, aInNodeId);\n        supportingNodeobj.setProperty(NETWORK_REF, L2_NETWORK_PATH);\n        supportingNodeobj.setProperty(NODE_REF, aInSupportingNodeRef);\n        updateInDb(aInYangDB, supportingNodeobj, \"\", aInNodePathIdentifier, SUPPORTING_NODE, CREATE, null, aInQp);\n        if(supportingNodeMap.containsKey(aInSupportingNodeRef)) {\n            supportingNodeMap.get(aInSupportingNodeRef).add(aInNodePathIdentifier);\n        }\n        else {\n            supportingNodeMap.put(aInSupportingNodeRef, new HashSet<>(Arrays.asList(aInNodePathIdentifier)));\n        }\n    }\n\n    private void createSupportingTp(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                                    String aInTpId, String aInNeId, String aInSupportingTpRef, String aInTpPathIdentifier) {\n        IYangObject supportingTpobj = new YangObject();\n        supportingTpobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingTpobj.setProperty(NODE_ID, aInNodeId);\n        supportingTpobj.setProperty(TP_ID, aInTpId);\n        supportingTpobj.setProperty(NETWORK_REF, L2_NETWORK_PATH);\n        supportingTpobj.setProperty(NODE_REF, L2_NETWORK_PATH + String.format(NODE_PATH, aInNeId));\n        supportingTpobj.setProperty(TP_REF, aInSupportingTpRef);\n        updateInDb(aInYangDB, supportingTpobj, \"\", aInTpPathIdentifier, SUPPORTING_TP, CREATE, null, aInQp);\n        supportingTpMap.put(aInSupportingTpRef, aInTpPathIdentifier);\n        if(l2TpCreateEvents.containsKey(aInNeId)) {\n            l2TpCreateEvents.get(aInNeId).portsToAdd.remove(StringUtils.substringBetween(aInSupportingTpRef, \"[tp-id='\", \"']\"));\n        }\n    }\n\n    private void deleteSupportingTp(String aInSupportingTpIden, IYangDB aInYangDB) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInYangDB.exists(aInSupportingTpIden, qp)) {\n            IYangObject supportingTpObj = aInYangDB.getSingle(aInSupportingTpIden, qp);\n            String l2TpRef = (String) supportingTpObj.get(TP_REF);\n            logger.debug(\"L3 - RESYNC TP - deleteSupportingTp {} , {}\", aInSupportingTpIden, l2TpRef);\n            updateInDb(aInYangDB, null, aInSupportingTpIden, null, null, DELETE, null, qp);\n            supportingTpMap.remove(l2TpRef);\n        }\n    }\n\n    private void createSupportingLink(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInLinkId,\n                                      String aInSupportingLinkRef, String aInLinkIdentifier) {\n        IYangObject supportingLinkobj = new YangObject();\n        supportingLinkobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingLinkobj.setProperty(LINK_ID, aInLinkId);\n        supportingLinkobj.setProperty(NETWORK_REF, L2_NETWORK_PATH);\n        supportingLinkobj.setProperty(LINK_REF, aInSupportingLinkRef);\n        updateInDb(aInYangDB, supportingLinkobj, \"\", aInLinkIdentifier, SUPPORTING_LINK, CREATE, null, aInQp);\n        supportingLinkMap.put(aInSupportingLinkRef, aInLinkIdentifier);\n        l2LinkCreateEvents.remove(aInSupportingLinkRef);\n    }\n\n    private void deleteSupportingLink(String aInSupportingLinkIden, IYangDB aInYangDB) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInYangDB.exists(aInSupportingLinkIden, qp)) {\n            IYangObject supportingLinkObj = aInYangDB.getSingle(aInSupportingLinkIden, qp);\n            String l2TpRef = (String) supportingLinkObj.get(LINK_REF);\n            logger.debug(\"L3 - RESYNC LINK - deleteSupportingLink {} , {}\", aInSupportingLinkIden, l2TpRef);\n            updateInDb(aInYangDB, null, aInSupportingLinkIden, null, null, DELETE, null, qp);\n            supportingLinkMap.remove(l2TpRef);\n        }\n    }\n\n    private void createTeNetworkRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInTeNetworkRef) {\n        String networkTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) +\n                \"/ietf-l3-unicast-topology:l3-topology-attributes\";\n        if(!aInYangDB.exists(networkTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-topology-attributes\", aInQp)) {\n            IYangObject teNetworkRefObj = new YangObject();\n            teNetworkRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teNetworkRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            updateInDb(aInYangDB, teNetworkRefObj, \"\", networkTopoAttrIdentifier,\n                    \"ietf-l3-te-topology:l3-te-topology-attributes\", CREATE, null, aInQp);\n        }\n    }\n\n    private void createTeNodeRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                                 String aInTeNetworkRef, String aInTeNodeRef) {\n        String nodeTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) +\n                String.format(NODE_PATH, aInNodeId) + \"/ietf-l3-unicast-topology:l3-node-attributes\";\n        if(!aInYangDB.exists(nodeTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-node-attributes\", aInQp)) {\n            IYangObject teNodeRefObj = new YangObject();\n            teNodeRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teNodeRefObj.setProperty(NODE_ID, aInNodeId);\n            teNodeRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            teNodeRefObj.setProperty(NODE_REF, aInTeNodeRef);\n            updateInDb(aInYangDB, teNodeRefObj, \"\", nodeTopoAttrIdentifier,\n                    \"ietf-l3-te-topology:l3-te-node-attributes\", CREATE, null, aInQp);\n        }\n    }\n\n    private void createTeTpRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                               String aInTpId, String aInTeNetworkRef, String aInTeNodeRef, String aInTeTpRef) {\n        String tpTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) +\n                String.format(NODE_PATH, aInNodeId) + String.format(TP_PATH, aInTpId) +\n                \"/ietf-l3-unicast-topology:l3-termination-point-attributes\";\n        if(!aInYangDB.exists(tpTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-tp-attributes\", aInQp)) {\n            IYangObject teTpRefObj = new YangObject();\n            teTpRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teTpRefObj.setProperty(NODE_ID, aInNodeId);\n            teTpRefObj.setProperty(TP_ID, aInTpId);\n            teTpRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            teTpRefObj.setProperty(NODE_REF, aInTeNodeRef);\n            teTpRefObj.setProperty(TP_REF, aInTeTpRef);\n            updateInDb(aInYangDB, teTpRefObj, \"\", tpTopoAttrIdentifier, \"ietf-l3-te-topology:l3-te-tp-attributes\",\n                    CREATE, null, aInQp);\n        }\n    }\n\n    private void createTeLinkRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInLinkId,\n                               String aInTeNetworkRef, String aInTeLinkRef) {\n        String linkTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) + String.format(LINK_PATH, aInLinkId)\n                + \"/ietf-l3-unicast-topology:l3-link-attributes\";\n        if(!aInYangDB.exists(linkTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-link-attributes\", aInQp)) {\n            IYangObject teLinkRefObj = new YangObject();\n            teLinkRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teLinkRefObj.setProperty(LINK_ID, aInLinkId);\n            teLinkRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            teLinkRefObj.setProperty(LINK_REF, aInTeLinkRef);\n            updateInDb(aInYangDB, teLinkRefObj, \"\", linkTopoAttrIdentifier, \"ietf-l3-te-topology:l3-te-link-attributes\",\n                    CREATE, null, aInQp);\n        }\n    }\n\n    private QueryParameters getFilteredQueryParameters (String fields) {\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n        if(fields != null) {\n            qp.setFields(Fields.parse(fields));\n        }\n        return qp;\n    }\n\n    private void populateSuportingNodeMap(IYangDB aInYangDb) {\n        List<Object[]> nodeList = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT sn.networkId, sn.nodeId, sn.nodeRef FROM \" +\n                        \"ietf.ietf_network_networks_network_node_supporting_node sn WHERE sn.networkId LIKE :pattern1 \" +\n                        \"OR sn.networkId LIKE :pattern2\")\n                .setParameter(\"pattern1\", \"%ospf%\")\n                .setParameter(\"pattern2\", \"%isis%\")\n                .getResultList());\n        if (nodeList == null || nodeList.isEmpty()) {\n            return;\n        }\n\n        for(Object[] nodeInfo : nodeList) {\n            if(nodeInfo.length == 3) {\n                String l3NodeIden = String.format(L3_NETWORK_PATH, nodeInfo[0]) + String.format(NODE_PATH, nodeInfo[1]);\n                if (supportingNodeMap.containsKey(nodeInfo[2])) {\n                    supportingNodeMap.get(nodeInfo[2]).add(l3NodeIden);\n                } else {\n                    supportingNodeMap.put(nodeInfo[2].toString(), new HashSet<>(Arrays.asList(l3NodeIden)));\n                }\n            }\n        }\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(supportingNodeMap.toString());\n        }\n    }\n\n    private void populateSuportingTpMap(IYangDB aInYangDb) {\n        List<Object[]> tpList = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT sp.networkId, sp.nodeId, sp.tpId, sp.tpRef FROM \" +\n                        \"ietf.ietf_90278165_termination_point_supporting_termination_point sp WHERE sp.networkId LIKE :pattern1 \" +\n                        \"OR sp.networkId LIKE :pattern2\")\n                .setParameter(\"pattern1\", \"%ospf%\")\n                .setParameter(\"pattern2\", \"%isis%\")\n                .getResultList());\n        if (tpList == null || tpList.isEmpty()) {\n            return;\n        }\n\n        for(Object[] tpInfo : tpList) {\n            if(tpInfo.length == 4) {\n                String l3TpIden = String.format(L3_NETWORK_PATH, tpInfo[0]) + String.format(NODE_PATH, tpInfo[1]) +\n                        String.format(TP_PATH, tpInfo[2]);\n                supportingTpMap.put(tpInfo[3].toString(), l3TpIden);\n            }\n        }\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(supportingTpMap.toString());\n        }\n    }\n\n    private void populateSuportingLinkMap(IYangDB aInYangDb) {\n        List<Object[]> linkListInfo = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT sl.networkId, sl.linkId, sl.linkRef FROM \" +\n                        \"ietf.ietf_139678392ork_ietf_network_topology_link_supporting_link sl WHERE sl.networkId LIKE :pattern1 \" +\n                        \"OR sl.networkId LIKE :pattern2\")\n                .setParameter(\"pattern1\", \"%ospf%\")\n                .setParameter(\"pattern2\", \"%isis%\")\n                .getResultList());\n        if (linkListInfo == null || linkListInfo.isEmpty()) {\n            return;\n        }\n\n        for(Object[] linkInfo : linkListInfo) {\n            if(linkInfo.length == 3) {\n                String l3LinkIden = String.format(L3_NETWORK_PATH, linkInfo[0]) + String.format(LINK_PATH, linkInfo[1]);\n                supportingLinkMap.put(linkInfo[2].toString(), l3LinkIden);\n            }\n        }\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(supportingLinkMap.toString());\n        }\n    }\n\n    private void startCorrelationService() {\n        synchronized (this) {\n            if (correlationService == null || correlationService.isShutdown()) {\n                logger.debug(\"L3 - L2 - Correlation - correlationService has been started that will run periodically until correlation is complete\");\n                correlationService = Executors.newScheduledThreadPool(1,\n                        new ThreadFactoryBuilder().setNameFormat(\"L3-CorrelationHandler-to-L2\").build());\n                correlationService.scheduleAtFixedRate(() -> correlateTpsAndLinks(), 2, 2, TimeUnit.MINUTES);\n            }\n        }\n    }\n\n    @SuppressFBWarnings(\"WMI_WRONG_MAP_ITERATOR\")\n    class L2TpCreateTask implements Runnable {\n        String neId;\n        Map<String, Integer> portsToAdd = new HashMap<>();\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n\n        L2TpCreateTask(String neId, String portToAdd,  IMdConverterFw converterFw ) {\n            this.neId = neId;\n            if(portToAdd != null && !portToAdd.isEmpty()) {\n                portsToAdd.put(portToAdd, 1);\n            }\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(!portsToAdd.isEmpty()) {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"Trying to add correlation for ports {} on {}\", portsToAdd.entrySet().toString(), neId);\n                }\n                List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n                if(routers == null || routers.isEmpty()) {\n                    logger.debug(\"******** L3 - Correlation - no router found for the NE ID {}\", neId);\n                    return;\n                }\n                Map<String, String> portInterfaceMap = null;\n                for(List<String> router: routers) {\n                    String networkId = router.get(1) + \"-\" + router.get(2);\n                    String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                    QueryParameters qp = getFilteredQueryParameters(\"tp-id;\"+SUPPORTING_TP);\n                    qp.setDepth(2);\n\n                    /*\n                      1. call the openconfig subinterface query and get the map of port and interfaces for the NE ID\n                      2. For each router, get all the TPs\n                      3. If supporting tp is null\n                      3.1 If the map contains the TP, add correlation.\n                      3.2 If not, try to get the nfmp way or unnumbered interface way and add correlation\n                      3.3 remove the ports from the portsToadd list.\n                      4.If there is any port remaining, retry them (3 times).\n                    */\n\n                    List<IYangObject> tpList = yangDB.getMany(nodeIdentifer + \"/\" + TP_TYPE, qp);\n                    if(tpList != null && !tpList.isEmpty()) {\n                        for(IYangObject tp : tpList) {\n                            if(tp.get(SUPPORTING_TP) == null) {\n                                if(portInterfaceMap == null) {\n                                    portInterfaceMap = getSubInterfacePortMap(neId, converterFw);\n                                    if(logger.isDebugEnabled()) {\n                                        logger.debug(\"L3 - correlation mdm port interface map {} for {}\", portInterfaceMap.toString(), neId);\n                                    }\n                                }\n                                String tpId = (String) tp.get(\"tp-id\");\n                                String portName = portInterfaceMap.get(tpId);\n\n                                if(portName == null) {\n                                    portName = getPortDetailsFromDb(tpId, yangDB, neId);\n                                    if(portName == null && tpId.contains(\"%\")) {\n                                        portName = getSubInterfaces(neId, converterFw, tpId);\n                                        if(logger.isDebugEnabled() && portName == null) {\n                                            logger.debug(\"portName is still null for {} and {}\", tpId, neId);\n                                        }\n                                    }\n                                }\n\n                                if(portName != null && portsToAdd.containsKey(portName)) {\n                                    String tpIden = nodeIdentifer + String.format(TP_PATH, tpId);\n                                    String supportingTpIden = tpIden + \"/\" + SUPPORTING_TP;\n                                    if(!yangDB.exists(supportingTpIden)) {\n                                        String instanceId = L2_NETWORK_PATH + String.format(NODE_PATH, neId)\n                                                + String.format(TP_PATH, portName);\n                                        logger.debug(\"L3 - createSupportingTp {}\", instanceId);\n                                        qp = getFilteredQueryParameters(null);\n                                        createSupportingTp(yangDB, qp, networkId, router.get(0), tpId, neId, instanceId, tpIden);\n                                        portsToAdd.remove(portName);\n                                    }\n                                }\n                            }\n                        }\n                        // the remaining ports in portsToAdd can be re-tried.\n                        for(String port : portsToAdd.keySet()) {\n                            portsToAdd.put(port, portsToAdd.get(port) + 1);\n                        }\n                        //remove after 3 attempts.\n                        portsToAdd.entrySet().removeIf(e -> e.getValue() > 3);\n\n                    }\n                    else {\n                        portsToAdd.clear();\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - NO TP for {}\", nodeIdentifer + \"/\" + TP_TYPE);\n                        }\n                    }\n                }\n            }\n\n            //for retries\n            if(!portsToAdd.isEmpty()) {\n                portsToAdd.entrySet().removeIf(e -> supportingTpMap.containsKey(L2_NETWORK_PATH +\n                        String.format(NODE_PATH, neId) + String.format(TP_PATH, e.getKey())));\n\n                if(l2TpCreateEvents.containsKey(neId)) {\n                    for(Map.Entry<String,Integer> port : portsToAdd.entrySet()) {\n                        l2TpCreateEvents.get(neId).portsToAdd.put(port.getKey(), port.getValue());\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - correlation - retrying for port {} on {}\", port.getKey(), neId);\n                        }\n                    }\n                }\n                else {\n                    l2TpCreateEvents.put(neId, this);\n                }\n                startCorrelationService();\n            }\n        }\n    }\n\n    @SuppressFBWarnings(\"URF_UNREAD_FIELD\")\n    class L2TpDeleteTask implements Runnable {\n        String neId;\n        List<String> portsToDelete = new ArrayList<>();\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n\n        L2TpDeleteTask(String neId, String portToDelete, IMdConverterFw converterFw ) {\n            this.neId = neId;\n            if(portToDelete != null && !portToDelete.isEmpty()) {\n                portsToDelete.add(portToDelete);\n            }\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(!portsToDelete.isEmpty()) {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"correlation delete tp task is running\");\n                }\n                deleteL2SupportingTps(portsToDelete, neId, yangDB);\n                portsToDelete.clear();\n            }\n        }\n    }\n\n    class L2LinkCreateTask implements Runnable {\n        String instanceId;\n        String linkId;\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n        int retryAttempt = 1;\n\n        L2LinkCreateTask(String instanceId, IMdConverterFw converterFw) {\n            this.instanceId = instanceId;\n            this.linkId = StringUtils.substringBetween(instanceId, \"[link-id='\", \"']\");\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(linkId != null) {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"L3- correlation - Trying to correlate link {}\", linkId);\n                }\n                String[] tps = linkId.split(\"--\");\n                if(tps != null && tps.length == 2) {\n                    List<String> networkDetails = new ArrayList<>();\n                    List<String> l3SourceTps = getTpDetails(tps[0].split(\":\"), yangDB, converterFw, networkDetails);\n                    if(!l3SourceTps.isEmpty()) {\n                        List<String> l3DstTps = getTpDetails(tps[1].split(\":\"), yangDB, converterFw, null);\n                        if(!l3DstTps.isEmpty()) {\n                            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkDetails.get(0));\n                            for(String sourceTp : l3SourceTps) {\n                                for (String dstTp : l3DstTps ) {\n                                    if(logger.isDebugEnabled()) {\n                                        logger.debug(\"L3 - correlation exists for L3 source and destination tps for {}\", linkId);\n                                    }\n                                    String l3LinkId = sourceTp + \"--\" + dstTp;\n                                    String linkIdentifier = networkPathIdentifier + String.format(LINK_PATH, l3LinkId);\n                                    String supportingLinkIden = linkIdentifier + \"/\" + SUPPORTING_LINK;\n                                    QueryParameters qp = getFilteredQueryParameters(null);\n                                    if(networkDetails.get(0).contains(\"isis\")) {\n                                        String l3IsisLinkId = l3LinkId + \"--l1\";\n                                        linkIdentifier = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId);\n                                        supportingLinkIden = linkIdentifier + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(linkIdentifier, qp) && !yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - createSupportingLink {}\", instanceId);\n                                            createSupportingLink(yangDB, qp, networkDetails.get(0), l3IsisLinkId, instanceId, linkIdentifier);\n                                        }\n\n                                        l3IsisLinkId = l3LinkId + \"--l2\";\n                                        linkIdentifier = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId);\n                                        supportingLinkIden = linkIdentifier + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(linkIdentifier, qp) && !yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - createSupportingLink {}\", instanceId);\n                                            createSupportingLink(yangDB, qp, networkDetails.get(0), l3IsisLinkId, instanceId, linkIdentifier);\n                                        }\n                                    }\n                                    else if(yangDB.exists(linkIdentifier, qp) && !yangDB.exists(supportingLinkIden, qp)) {\n                                        logger.debug(\"L3 - createSupportingLink {}\", instanceId);\n                                        createSupportingLink(yangDB, qp, networkDetails.get(0), l3LinkId, instanceId, linkIdentifier);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - correlation - link retrying because destination tp is not correlated for {}\", this.linkId);\n                            }\n                            if(retryAttempt < 3 && !supportingLinkMap.containsKey(this.instanceId)) {\n                                this.retryAttempt++;\n                                l2LinkCreateEvents.put(this.instanceId, this);\n                                startCorrelationService();\n                            }\n\n                        }\n                    }\n                    else {\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - correlation - link retrying because source tp is not correlated for {}\", this.linkId);\n                        }\n                        if(retryAttempt < 3 && !supportingLinkMap.containsKey(this.instanceId)) {\n                            this.retryAttempt++;\n                            l2LinkCreateEvents.put(this.instanceId, this);\n                            startCorrelationService();\n                        }\n                    }\n                }\n            }\n\n        }\n    }\n\n    class L2LinkDeleteTask implements Runnable {\n        String instanceId;\n        String linkId;\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n\n        L2LinkDeleteTask(String instanceId, IMdConverterFw converterFw) {\n            this.instanceId = instanceId;\n            this.linkId = StringUtils.substringBetween(instanceId, \"[link-id='\", \"']\");\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"correlation link delete task is running\");\n            }\n            List<String> linksDeleted = new ArrayList<>();\n            if(supportingLinkMap.containsKey(instanceId)) {\n                String supportingLinkIden = supportingLinkMap.get(instanceId) + \"/\" + SUPPORTING_LINK;\n                if(yangDB.exists(supportingLinkIden)) {\n                    logger.debug(\"L3 - deleteSupportingLink {}\", supportingLinkIden);\n                    updateInDb(yangDB, null, supportingLinkIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                }\n                linksDeleted.add(supportingLinkMap.get(instanceId));\n                supportingLinkMap.remove(instanceId);\n            }\n            else if(linkId != null) {\n                String[] tps = linkId.split(\"--\");\n                if(tps != null && tps.length == 2) {\n                    List<String> networkDetails = new ArrayList<>();\n                    List<String> l3SourceTps = getTpDetails(tps[0].split(\":\"), yangDB, converterFw, networkDetails);\n                    if(!l3SourceTps.isEmpty()) {\n                        List<String> l3DstTps = getTpDetails(tps[1].split(\":\"), yangDB, converterFw, null);\n                        if(!l3DstTps.isEmpty()) {\n                            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkDetails.get(0));\n                            for(String sourceTp : l3SourceTps) {\n                                for (String dstTp : l3DstTps ) {\n                                    String l3LinkId = sourceTp + \"--\" + dstTp;\n                                    QueryParameters qp = getFilteredQueryParameters(null);\n                                    if(networkDetails.get(0).contains(\"isis\")) {\n                                        String l3IsisLinkId = l3LinkId + \"--l1\";\n                                        String supportingLinkIden = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId) + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - deleteSupportingLink {}\", supportingLinkIden);\n                                            updateInDb(yangDB, null, supportingLinkIden, null, null, DELETE, null, qp);\n                                            linksDeleted.add(networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId));\n                                        }\n\n                                        l3IsisLinkId = l3LinkId + \"--l2\";\n                                        supportingLinkIden = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId) + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - deleteSupportingLink {}\", supportingLinkIden);\n                                            updateInDb(yangDB, null, supportingLinkIden, null, null, DELETE, null, qp);\n                                            linksDeleted.add(networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId));\n                                        }\n                                    }\n                                    else {\n                                        String supporingLinkIden = networkPathIdentifier + String.format(LINK_PATH, l3LinkId) + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(supporingLinkIden, qp)) {\n                                            logger.debug(\"L3 - deleteSupportingLink {}\", supporingLinkIden);\n                                            updateInDb(yangDB, null, supporingLinkIden, null, null, DELETE, null, qp);\n                                            linksDeleted.add(networkPathIdentifier + String.format(LINK_PATH, l3LinkId));\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                }\n            }\n\n            //Delete the related correlated TPs for the deleted links.\n            if(!linksDeleted.isEmpty()) {\n                for(String l3Link : linksDeleted) {\n                    String l3LinkId = extractLinkIdFromIetfIdentifier(l3Link);\n                    String l3NetworkId = extractNetworkIdFromIetfIdentifier(l3Link);\n\n                    // build tp identifier and check for supporting identifier and delete it.\n                    String l3NetworkPathIdentifier = String.format(L3_NETWORK_PATH, l3NetworkId);\n                    String[] l3Tp = l3LinkId.split(\"--\");\n                    for(int i = 0; i < l3Tp.length; i++) {\n                        String[] tpDetails = l3Tp[i].split(\":\");\n                        if (tpDetails.length == 2) {\n                            String supportingTpIden = l3NetworkPathIdentifier + String.format(NODE_PATH, tpDetails[0])\n                                    + String.format(TP_PATH, tpDetails[1]) + \"/\" + SUPPORTING_TP;\n                            if(yangDB.exists(supportingTpIden)) {\n                                logger.debug(\"L3 - deleteSupportingTp {}\", supportingTpIden);\n                                updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                            }\n                        }\n                    }\n\n                    // build the port identifier and delete it from cache.\n\n                    String[] l2Tp = instanceId.split(\"--\");\n                    for(int i = 0; i < l2Tp.length - 1; i++) {\n                        String[] l2TpDetails = l2Tp[i].split(\":\");\n                        String l2TpIden = L2_NETWORK_PATH + String.format(NODE_PATH, l2TpDetails[0])\n                                + String.format(TP_PATH, l2TpDetails[1]);\n                        supportingTpMap.remove(l2TpIden);\n                    }\n                }\n            }\n        }\n    }\n}\n"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "java-class-path": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                        "version": "1.0.1",
                        "java-code": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler/java-code",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/tracking-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler']/java-code[page-number='1']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "page-number": 1,
                            "page": "package com.nokia.nsp.md.converter.yang.plugin;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.nokia.nsp.md.common.notif.ObjectCreation;\nimport com.nokia.nsp.md.common.notif.ObjectDeletion;\nimport com.nokia.nsp.md.common.notif.ObjectModification;\nimport com.nokia.nsp.md.common.notif.ObjectReplacement;\nimport com.nokia.nsp.md.converter.api.IMdConverterFw;\nimport com.nokia.nsp.md.converter.yang.plugin.common.ICustomHandler;\nimport com.nokia.nsp.md.converter.yang.plugin.common.IHandleDeleteTracking;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SrcClass;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SyncClass;\n\nimport com.nokia.nsp.md.db.yang.api.QueryParameters;\nimport com.nokia.nsp.md.common.IYangObject;\nimport com.nokia.nsp.md.common.YangObject;\nimport com.nokia.nsp.md.db.yang.api.ExecutionContext;\nimport com.nokia.nsp.md.ifg.yang.api.Fields;\nimport com.nokia.nspos.persistence.impl.db.transaction.DBRuntimeException;\nimport com.nokia.nspos.persistence.yang.api.IYangDB;\n\nimport com.nokia.nspos.persistence.impl.db.transaction.ITransactionContext;\nimport com.nokia.nspos.persistence.impl.db.transaction.Transactor;\nimport com.nokia.nspos.persistence.api.IDB;\n\nimport com.nokia.nspos.model.domain.service.types.Layer;\nimport com.nokia.nspos.model.domain.service.types.ServiceType;\nimport com.nokia.nspos.model.domain.service.types.EndpointType;\nimport com.nokia.nspos.model.domain.service.types.Direction;\n\nimport org.apache.commons.lang.StringUtils;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\n\npublic class L2TopologyHandler implements ICustomHandler, IHandleDeleteTracking\n{\n    private static final org.slf4j.Logger handleResyncLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleResync\");\n    private static final org.slf4j.Logger handlePostResyncDeleteLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".postResyncDelete\");\n    private static final org.slf4j.Logger handleCreateEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleCreateEvent\");\n    private static final org.slf4j.Logger handleUpdateEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleUpdateEvent\");\n    private static final org.slf4j.Logger handleReplaceEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleReplaceEvent\");\n    private static final org.slf4j.Logger handleDeleteEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleDeleteEvent\");\n    private static final org.slf4j.Logger handleNodeLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleNode\");\n    private static final org.slf4j.Logger handleTpLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleTp\");\n    private static final org.slf4j.Logger handlePortLagLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handlePortLag\");\n    private static final org.slf4j.Logger handleLinkLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleLink\");\n    private static final org.slf4j.Logger dataBaseAccessLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".dataBaseAccess\");\n    private static final org.slf4j.Logger handleTrackedDeleteLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleTrackedDelete\");\n\n    private static final String IETF_L2_NETWORK_ID = \"L2Topology\";\n    private static final String IETF_L2_NETWORK_PATH = String.format(\"/ietf-network:networks/network[network-id='%s']\", IETF_L2_NETWORK_ID);\n    private static final String IETF_L2_NODE_PATH = IETF_L2_NETWORK_PATH + \"/node[node-id='%s']\";\n    private static final String IETF_L2_TP_PATH = IETF_L2_NODE_PATH + \"/ietf-network-topology:termination-point[tp-id='%s']\";\n    private static final String IETF_L2_LINK_PATH = IETF_L2_NETWORK_PATH + \"/ietf-network-topology:link[link-id='%s']\";\n    private static final String IETF_NODE_TYPE = \"node\";\n    private static final String IETF_TP_TYPE = \"ietf-network-topology:termination-point\";\n    private static final String IETF_LINK_TYPE = \"ietf-network-topology:link\";\n\n    private static final String IETF_NETWORK_CLASS = \"ietf-network:/networks/network\";\n    private static final String IETF_NODE_CLASS = IETF_NETWORK_CLASS + \"/\" + IETF_NODE_TYPE;\n    private static final String IETF_TP_CLASS = IETF_NODE_CLASS + \"/\" + IETF_TP_TYPE;\n    private static final String IETF_LINK_CLASS = IETF_NETWORK_CLASS + \"/\" + IETF_LINK_TYPE;\n\n    private static final String NSP_SERVICE_CABLE_CLASS = \"nsp-service:/services/physical-layer/cable\";\n    private static final String NSP_ENDPOINT_CABLE_CLASS = \"nsp-service:/services/physical-layer/cable/link-endpoint\";\n    private static final String NSP_SERVICE_RADIO_CLASS = \"nsp-service:/services/physical-layer/radio-link\";\n    private static final String NSP_ENDPOINT_RADIO_CLASS = \"nsp-service:/services/physical-layer/radio-link/link-endpoint\";\n    private static final String NSP_EQUIPMENT_PORT_CLASS = \"nsp-equipment:/network/network-element/hardware-component/port\";\n    private static final String NSP_EQUIPMENT_PORT_DETAILS_CLASS = \"nsp-equipment:/network/network-element/hardware-component/port/port-details\";\n    private static final String NSP_EQUIPMENT_LAG_CLASS = \"nsp-equipment:/network/network-element/lag\";\n\n    private static final String NSP_SERVICE_PATH = \"/nsp-service:services/physical-layer/%s[id='%s']\";\n    private static final String NSP_ENDPOINT_PATH = \"/nsp-service:services/physical-layer/%s[id='%s']/link-endpoint[site-id='%s'][endpoint-id='%s']\";\n    private static final String nokia_nsp_network_management_ELEMENT_PATH = \"/nsp-equipment:network/network-element[ne-id='%s']\";\n\n    private static final String NSP_ENDPOINT_TABLE = \"service_Endpoint\";\n    private static final String NSP_SERVICE_TABLE = \"service_Service\";\n    private static final Layer NSP_L2_LAYER = Layer.physical;\n    private static final Set<ServiceType> NSP_L2_SERVICE_TYPES = ImmutableSet.of(ServiceType.cable, ServiceType.radioLink);\n\n    private static final String IETF_MEMBER_LINK_TP_TABLE = \"ietf.ietf_204762653l2_termination_point_attributes_member_link_tp\";\n    private static final String IETF_LINK_NSP_ATTR_TABLE = \"ietf.ietf_19924911ibutes_nsp_ietf_network_topology_nsp_attributes\";\n    private static final String IETF_TP_NSP_ATTR_TABLE = \"ietf.ietf_48789230ibutes_nsp_ietf_network_topology_nsp_attributes\";\n\n    public static final Fields nokia_nsp_network_management_ELEMENT_READ_FIELDS = Fields.parse(\"ne-name;mac-address;ip-address\");\n    public static final Fields NSP_ENDPOINT_READ_FIELDS = Fields.parse(\"endpoint-id;site-id;type;port-bindings/resource\");\n    public static final Fields NSP_SERVICE_READ_FIELDS = Fields.parse(\"link-endpoint(endpoint-id;site-id;type;port-bindings/resource);id;name;latency;direction\");\n    public static final Fields NSP_SERVICE_READ_FIELDS_REDUCED = Fields.parse(\"name;latency\");\n    public static final Fields NSP_PORT_READ_FIELDS_FOR_TP = Fields.parse(\"name;ne-id;hw-mac-address;port-details(encap-type;port-index)\");\n    public static final Fields NSP_PORT_READ_FIELDS_FOR_LAG_MEMBER = Fields.parse(\"name\");\n    public static final Fields NSP_PORT_DETAILS_READ_FIELDS_FOR_TP = Fields.parse(\"encap-type;port-index\");\n    public static final Fields NSP_PORT_DETAILS_READ_FIELDS_FOR_LINK = Fields.parse(\"actual-rate;actual-rate-units;operational-duplex;auto-negotiate\");\n    public static final Fields NSP_LAG_READ_FIELDS = Fields.parse(\"name;configured-address;encap-type;lag-index;members\");\n    public static final Fields NSP_LAG_READ_FIELDS_MEMBERS = Fields.parse(\"members\");\n    public static final Fields IETF_LINK_ATTR_READ_FIELDS = Fields.parse(\"name;nsp-ietf-network-topology:nsp-attributes\");\n    public static final Fields IETF_TP_ATTR_READ_FIELDS = Fields.parse(\"nsp-ietf-network-topology:nsp-attributes\");\n    public static final Fields IETF_TP_READ_FIELDS = Fields.parse(\"ietf-l2-topology:l2-termination-point-attributes/nsp-ietf-network-topology:nsp-attributes\");\n    public static final Fields IETF_TP_MEMBERS_READ_FIELDS = Fields.parse(\"ietf-l2-topology:l2-termination-point-attributes/member-link-tp\");\n\n    private enum IetfL2EncapType\n    {\n        ETHERNET(\"ietf-l2-topology:ethernet\"),\n        VLAN(\"ietf-l2-topology:vlan\"),\n        QINQ(\"ietf-l2-topology:qinq\"),\n        PBB(\"ietf-l2-topology:pbb\"),\n        TRILL(\"ietf-l2-topology:trill\"),\n        VPLS(\"ietf-l2-topology:vpls\"),\n        VXLAN(\"ietf-l2-topology:vxlan\");\n\n        public final String value;\n        private IetfL2EncapType(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private enum IetfDuplexMode\n    {\n        FULL(\"full-duplex\"),\n        HALF(\"half-duplex\");\n\n        public final String value;\n        private IetfDuplexMode(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private static final Pattern MAC_ADDRESS_PATTERN = Pattern.compile(\"[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}\");\n    private static final Pattern RAW_MAC_ADDRESS_PATTERN = Pattern.compile(\"[0-9a-fA-F]{12}\");\n\n\n    @Override\n    public void handlePostResyncDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handlePostResyncDeleteLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId);\n    }\n\n    @Override\n    public int readSrcObjectDepth(String aInSrcClassPath)\n    {\n        if(aInSrcClassPath.equals(NSP_ENDPOINT_CABLE_CLASS)\n           || aInSrcClassPath.equals(NSP_ENDPOINT_RADIO_CLASS))\n        {\n            return 3;\n        }\n        else if(aInSrcClassPath.equals(NSP_SERVICE_CABLE_CLASS)\n            || aInSrcClassPath.equals(NSP_SERVICE_RADIO_CLASS))\n        {\n            return 4;\n        }\n        return 2;\n    }\n\n    @Override\n    public Fields srcFilterFieldsToInclude(String aInSrcClassPath)\n    {\n        if(aInSrcClassPath.equals(NSP_ENDPOINT_CABLE_CLASS)\n           || aInSrcClassPath.equals(NSP_ENDPOINT_RADIO_CLASS))\n        {\n            return NSP_ENDPOINT_READ_FIELDS;\n        }\n        else if(aInSrcClassPath.equals(NSP_SERVICE_CABLE_CLASS)\n            || aInSrcClassPath.equals(NSP_SERVICE_RADIO_CLASS))\n        {\n            return NSP_SERVICE_READ_FIELDS;\n        }\n        return null;\n    }\n\n    @Override\n    public void handleTrackedDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, String aInIdentifier, Map<String, Object> aInData,  YangPluginMdConverterProvider aInYangPlugin) {\n        if (handleTrackedDeleteLogger.isDebugEnabled()) {\n            handleTrackedDeleteLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInIdentifier:{}, aInData:{}\", aInSrcClass, aInSyncClass, aInIdentifier, aInData);\n        }\n\n        if(aInSrcClass.getSrcClassPath().equals(NSP_SERVICE_CABLE_CLASS)\n                || aInSrcClass.getSrcClassPath().equals(NSP_SERVICE_RADIO_CLASS)) {\n\n            IYangDB yangDB = aInYangPlugin.getiMdConverterFw().getIYangDB();\n\n            final QueryParameters qp = new QueryParameters();\n            qp.setSuperUser(true);\n            qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n            String linkId = StringUtils.substringBetween(aInIdentifier, \"[id='\", \"'\");\n            IYangObject yangObj = new YangObject();\n            yangObj.setProperty(\"name\", aInData.get(\"name\"));\n            yangObj.setProperty(\"id\", linkId);\n            handleTrackedDeleteLogger.debug(\" L2 tracked deletion for link {}\", linkId);\n            deleteLink(yangObj, yangDB, qp);\n        }\n    }\n\n    @Override\n    public void handleResync(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInExistingObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleResyncLogger.debug(\"aInSrcIdentifier:{}, aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcObject.getIdentifier(), aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId);\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                //don't sync ports and lags, only care for their updates\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    break;\n                }\n                handleResyncLogger.debug(\"TP SYNC\");\n                if(isValidEndpoint(aInSrcObject, yangDB)) {\n                    handleTP(aInSrcObject, yangDB, qp, null);\n                }\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleResyncLogger.debug(\"LINK SYNC\");\n                handleLink(aInSrcObject, false, false, yangDB, qp);\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void handleCreateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectCreation aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleCreateEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId:{}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        IYangObject lSrcObject = aInEvent.getEntity();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                // need to listen for create port/lag as link can be created first in the managing scenario\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS)){\n                    //wait for port-details\n                    break;\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS)){\n                    handleCreateEventLogger.debug(\"PORT DETAILS CREATE\");\n                    String portPath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/port-details\"));\n                    lSrcObject = yangDB.getSingle(portPath, getFilteredQueryParameters(NSP_PORT_READ_FIELDS_FOR_TP) );\n                    handlePortLag(lSrcObject, EndpointType.physicalPort, yangDB, qp);\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    handleCreateEventLogger.debug(\"LAG CREATE\");\n                    handlePortLag(lSrcObject, EndpointType.lag, yangDB, qp);\n                }\n                else {\n                    handleCreateEventLogger.debug(\"TP CREATE\");\n                    if(isValidEndpoint(lSrcObject, yangDB)) {\n                        handleTP(lSrcObject, yangDB, qp, null);\n\n                        //create link on TP event - on target endpoint event only\n                        if (lSrcObject.get(\"type\").toString().equals(\"physical-port\")) {\n                            List<?> nspEpSources = (List<?>) ((YangObject) lSrcObject).getExtraDatas().get(\"sources\");\n                            for (Object epSource : nspEpSources) {\n                                if (epSource.toString().contains(\"@endpointB\")) {\n                                    String servicePath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/link-endpoint[\"));\n                                    IYangObject lLinkSourceObj = getSingleFromYangDb(\n                                            yangDB, servicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n                                    if (lLinkSourceObj != null) {\n                                        handleLink(lLinkSourceObj, false, false, yangDB, qp);\n                                    }\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleCreateEventLogger.debug(\"LINK CREATE\");\n                //link is created on tp event\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void handleUpdateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectModification aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleUpdateEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId:{}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        IYangObject lSrcObject = aInEvent.getEntity();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS)){\n                    handleUpdateEventLogger.debug(\"PORT UPDATE\");\n                    boolean shouldUpdate = false;\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"hw-mac-address\")) {\n                            shouldUpdate = true;\n                            break;\n                        }\n                    }\n                    if(shouldUpdate){\n                        handlePortLag(lSrcObject, EndpointType.physicalPort, yangDB, qp);\n                    }\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS)){\n                    handleUpdateEventLogger.debug(\"PORT DETAILS UPDATE\");\n                    boolean shouldUpdate = false;\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"encap-type\") || change.getName().equals(\"actual-rate\") ||\n                           change.getName().equals(\"operational-duplex\") || change.getName().equals(\"auto-negotiate\")) {\n                            shouldUpdate = true;\n                            break;\n                        }\n                    }\n                    if(shouldUpdate){\n                        String portPath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/port-details\"));\n                        lSrcObject = yangDB.getSingle(portPath, getFilteredQueryParameters(NSP_PORT_READ_FIELDS_FOR_TP));\n                        handlePortLag(lSrcObject, EndpointType.physicalPort, yangDB, qp);\n                    }\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    handleUpdateEventLogger.debug(\"LAG UPDATE\");\n                    boolean shouldUpdate = false;\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"encap-type\") || change.getName().equals(\"configured-address\")) {\n                            shouldUpdate = true;\n                            break;\n                        }\n                    }\n                    if(shouldUpdate){\n                        handlePortLag(lSrcObject, EndpointType.lag, yangDB, qp);\n                    }\n                }\n                else {\n                    handleUpdateEventLogger.debug(\"TP UPDATE\");\n                    boolean isManageTypeChange = false;\n                    boolean isLagEndpointObjectDetailsChange = false;\n                    int changesSize = aInEvent.getChanges().size();\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"type\")){\n                            if(change.getNewValue().toString().equals(EndpointType.physicalPort.getAltName())) {\n                                isManageTypeChange = true;\n                            }\n                            break;\n                        }\n                        // looking for objectDetails update - starting 23.4, aInEvent.getChanges() will have \"last-modified-time\" change\n                        else if(change.getName().equals(\"last-modified-time\")\n                                && lSrcObject.get(\"type\").toString().equals(\"lag\")\n                                && changesSize == 1) {\n                            isLagEndpointObjectDetailsChange = true;\n                            break;\n                        }\n                    }\n                    if(isManageTypeChange || isLagEndpointObjectDetailsChange) {\n                        //on managing ne - link is created on link update event\n                        //but the opposite(already managed) endpoint doesn't get any events - need to handle it to create tp/node\n                        String servicePath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/link-endpoint[\"));\n                        IYangObject lLinkSourceObj = getSingleFromYangDb(\n                                yangDB, servicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n                        if(lLinkSourceObj != null) {\n                            List<?> endpoints = (List<?>)lLinkSourceObj.get(\"link-endpoint\");\n                            if (endpoints != null && !endpoints.isEmpty()) {\n                                if (isManageTypeChange && isValidLinkEndpoints(endpoints)) {\n                                    handleUpdateEventLogger.debug(\"TP MANAGE CHANGE\");\n                                    endpoints.forEach(endpoint -> handleTP((IYangObject) endpoint, yangDB, qp, null));\n                                }\n                                else if (isLagEndpointObjectDetailsChange && isValidLagEndpoints(endpoints)\n                                         && isValidLinkType(lLinkSourceObj.get(\"id\").toString(), yangDB)) {\n                                    //handle update for lag tps - needed for add/remove member scenario\n                                    handleUpdateEventLogger.debug(\"TP LAG ENDPOINT CHANGE\");\n                                    endpoints.forEach(endpoint -> handleTP((IYangObject) endpoint, yangDB, qp, null));\n                                }\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleUpdateEventLogger.debug(\"LINK UPDATE\");\n                boolean isUnManageChange = false;\n                boolean ignoreUpdate = false;\n                boolean isNameUpdate = false;\n                int changesSize = aInEvent.getChanges().size();\n                for(ObjectModification.Change change : aInEvent.getChanges()) {\n                    if(change.getName().equals(\"name\")){\n                        if(change.getNewValue().toString().contains(\"Unmanaged-Ne\")) {\n                            handleUpdateEventLogger.debug(\"LINK UN-MANAGE CHANGE\");\n                            isUnManageChange = true;\n                        }\n                        else {\n                            //update on any other link name change - needed for nfmp managing scenario\n                            isNameUpdate = true;\n                            ignoreUpdate = false;\n                            break;\n                        }\n                    }\n                    else if(change.getName().equals(\"oper-state\") ||\n                            (change.getName().equals(\"last-modified-time\") && changesSize == 1)){ //todo: other link changes to ignore?\n                        ignoreUpdate = true;\n                    }\n                }\n                if(isUnManageChange) {\n                    deleteLink(lSrcObject, yangDB, qp);\n                }\n                else if (!ignoreUpdate) {\n                    handleLink(lSrcObject, isNameUpdate, false, yangDB, qp);\n                }\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void handleReplaceEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectReplacement aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleReplaceEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n    }\n\n    @Override\n    public void handleDeleteEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectDeletion aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleDeleteEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        IYangObject lSrcObject = aInEvent.getEntity();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                //don't delete ports and lags, only care for their updates\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    break;\n                }\n                handleDeleteEventLogger.debug(\"TP DELETE\");\n                //endpoint delete event is not sent for nfmp and lldp links\n                //both node/tp are deleted on the link delete event\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleDeleteEventLogger.debug(\"LINK DELETE\");\n                deleteLink(lSrcObject, yangDB, qp);\n                break;\n            }\n        }\n    }\n\n    private boolean canDeleteNode (String nodeId, IYangDB yangDB) {\n        String endpointTableNative = \"service.Endpoint\";\n        String serviceTableNative = \"service.Service\";\n        String subquery = String.format(\"SELECT DISTINCT svc.dbId FROM %s e JOIN %s svc ON e.service_dbId = svc.dbId \"\n                                        + \"WHERE e.siteId=:siteId AND e.type = :endpointType \"\n                                        + \"AND svc.layer=:layer AND svc.type IN :serviceTypes\",\n                                        endpointTableNative, serviceTableNative);\n        String query = String.format(\"SELECT count(*) FROM (SELECT count(e.dbId) FROM %s e \"\n                                     + \"WHERE e.type=:endpointType AND e.service_dbId IN (%s) \"\n                                     + \"GROUP BY e.service_dbId) AS g WHERE g.count = 2\", endpointTableNative, subquery);\n        Object count = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(query)\n                .setParameter(\"siteId\", nodeId)\n                .setParameter(\"endpointType\", EndpointType.physicalPort.getValue())\n                .setParameter(\"layer\", Layer.physical.getValue())\n                .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable.getValue(), ServiceType.radioLink.getValue()))\n                .getSingleResult());\n        return count != null && ((BigInteger) count).longValue() == 0;\n    }\n\n    private boolean canDeleteTp (String nodeId, String tpId, boolean isLagTp, boolean isLagMember, IYangDB yangDB) {\n        int endpointType = isLagTp ? EndpointType.lag.getValue() : EndpointType.physicalPort.getValue();\n        String endpointTableNative = \"service.Endpoint\";\n        String serviceTableNative = \"service.Service\";\n        String subquery = String.format(\"SELECT DISTINCT svc.dbId FROM %s e JOIN %s svc ON e.service_dbId = svc.dbId \"\n                                        + (isLagTp ? \"JOIN service.Service_objectDetails sod ON (sod.dbId = svc.dbId AND sod.objectDetails_key = 'linkType') \" : \"\") //linkType is not set on manual lag links\n                                        + (isLagMember ? \"JOIN service.Service_objectDetails sod ON (sod.dbId = svc.dbId AND sod.objectDetails_key = 'isLagMember') \" : \"\")\n                                        + \"WHERE e.id=:endpointId AND e.siteId=:siteId AND e.type=:endpointType \"\n                                        + \"AND svc.layer=:layer AND svc.type IN :serviceTypes\"\n                                        + (isLagMember ? \" AND sod.objectDetails = 'true'\" : \"\"),\n                                        endpointTableNative, serviceTableNative);\n        String query = String.format(\"SELECT count(*) FROM (SELECT count(e.dbId) FROM %s e \"\n                                     + \"WHERE e.type=:endpointType AND e.service_dbId IN (%s) \"\n                                     + \"GROUP BY e.service_dbId) AS g WHERE g.count = 2\", endpointTableNative, subquery);\n        Object count = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(query)\n                .setParameter(\"endpointId\", tpId)\n                .setParameter(\"siteId\", nodeId)\n                .setParameter(\"endpointType\", endpointType)\n                .setParameter(\"layer\", Layer.physical.getValue())\n                .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable.getValue(), ServiceType.radioLink.getValue()))\n                .getSingleResult());\n        return count != null && ((BigInteger) count).longValue() == 0;\n    }\n\n    private boolean canDeleteLink (Object sourceTpPath, Object destTpPath, IYangDB yangDB) {\n        if (sourceTpPath != null && destTpPath != null) {\n            String sourceTpId = getTpIdFromTpPath(sourceTpPath.toString());\n            String sourceNodeId = getNodeIdFromTpPath(sourceTpPath.toString());\n            String destTpId = getTpIdFromTpPath(destTpPath.toString());\n            String destNodeId = getNodeIdFromTpPath(destTpPath.toString());\n            boolean canDelete = runCanDeleteLink(sourceTpId, sourceNodeId, destTpId, destNodeId, false, yangDB);\n            if(canDelete) {\n                canDelete = runCanDeleteLink(destTpId, destNodeId, sourceTpId, sourceNodeId,true, yangDB);\n            }\n            return canDelete;\n        }\n        return true;\n    }\n\n    private boolean runCanDeleteLink (String sourceTpId, String sourceNodeId, String destTpId, String destNodeId,\n                                      boolean shouldIncludeDirection, IYangDB yangDB) {\n        String subquery = String.format(\"SELECT svc FROM %s e JOIN e.service svc \"\n                                        + \"JOIN e.objectDetails eod ON (KEY(eod) = :objectDetailsSource) \"\n                                        + \"WHERE e.id=:endpointIdSource AND e.siteId=:siteIdSource \"\n                                        + \"AND e.type=:endpointType AND svc.layer=:layer \"\n                                        + (shouldIncludeDirection ? \"AND svc.direction=:direction \" : \"\")\n                                        + \"AND svc.type IN :serviceTypes\", NSP_ENDPOINT_TABLE);\n        String query = String.format(\"SELECT count(e.dbId) FROM %s e \"\n                                     + \"JOIN e.objectDetails eod ON (KEY(eod) = :objectDetailsTarget) \"\n                                     + \"WHERE e.id=:endpointIdTarget AND e.siteId=:siteIdTarget \"\n                                     + \"AND e.type = :endpointType AND e.service IN (%s)\",\n                                     NSP_ENDPOINT_TABLE, subquery);\n        Long count = execute(yangDB.getDb(), tx -> {\n            javax.persistence.Query lQuery = tx.getEntityManager().createQuery(query)\n                .setParameter(\"objectDetailsSource\", \"isSource\")\n                .setParameter(\"endpointIdSource\", sourceTpId)\n                .setParameter(\"siteIdSource\", sourceNodeId)\n                .setParameter(\"endpointType\", EndpointType.physicalPort)\n                .setParameter(\"layer\", NSP_L2_LAYER)\n                .setParameter(\"serviceTypes\", NSP_L2_SERVICE_TYPES)\n                .setParameter(\"objectDetailsTarget\", \"isTarget\")\n                .setParameter(\"endpointIdTarget\", destTpId)\n                .setParameter(\"siteIdTarget\", destNodeId);\n            if(shouldIncludeDirection) {\n                lQuery.setParameter(\"direction\", Direction.biDirectional);\n            }\n           return (Long)lQuery.getSingleResult();\n        });\n        return count != null && count.intValue() == 0;\n    }\n\n    private void deleteLink (IYangObject aInSrcObject, IYangDB yangDB, QueryParameters qp) {\n\n        String nspServiceId = aInSrcObject.get(\"id\").toString();\n\n        // note: objectDetails.linkType won't help with manual link as linkType is not set\n\n        List<?> linkList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(String.format(\n                        \"SELECT linkid FROM %s WHERE nspietfnetworktopologynspattributes = :nspServiceId\",\n                        IETF_LINK_NSP_ATTR_TABLE))\n                .setParameter(\"nspServiceId\", nspServiceId)\n                .getResultList());\n        if (linkList != null && !linkList.isEmpty()) {\n            for(Object link : linkList) {\n                String linkId = (String) link;\n                String ietfLinkPath = String.format(IETF_L2_LINK_PATH, linkId);\n                IYangObject ietfLink = yangDB.getSingle(ietfLinkPath, qp);\n                if (ietfLink != null) {\n                    String lSourceTpPath = null, lDestTpPath = null;\n                    IYangObject lSourceYangObj = (YangObject) ietfLink.get(\"source\");\n                    if (lSourceYangObj.get(\"source-tp\") != null) {\n                        lSourceTpPath = lSourceYangObj.get(\"source-tp\").toString();\n                        String lSourceNodeId = getNodeIdFromTpPath(lSourceTpPath);\n                        String lSourceTpId = getTpIdFromTpPath(lSourceTpPath);\n                        if (canDeleteNode(lSourceNodeId, yangDB) && lSourceYangObj.get(\"source-node\") != null) {\n                            String lSourceNodePath = lSourceYangObj.get(\"source-node\").toString();\n                            handleDeleteEventLogger.debug(\"DELETING NODE \" + lSourceNodePath);\n                            yangDB.delete(lSourceNodePath, qp);\n                        }\n                        else if (canDeleteTp(lSourceNodeId, lSourceTpId, false, false, yangDB)) {\n                            handleDeleteEventLogger.debug(\"DELETING TP \" + lSourceTpPath);\n                            yangDB.delete(lSourceTpPath, qp);\n                            updateLagTpOnMemberDeleteEvent(lSourceTpPath, yangDB, qp);\n                        }\n                    }\n                    IYangObject lDestYangObj = (YangObject) ietfLink.get(\"destination\");\n                    if (lDestYangObj.get(\"dest-tp\") != null) {\n                        lDestTpPath = lDestYangObj.get(\"dest-tp\").toString();\n                        String lDestNodeId = getNodeIdFromTpPath(lDestTpPath);\n                        String lDestTpId = getTpIdFromTpPath(lDestTpPath);\n                        if (canDeleteNode(lDestNodeId, yangDB) && lDestYangObj.get(\"dest-node\") != null) {\n                            String lDestNodePath = lDestYangObj.get(\"dest-node\").toString();\n                            handleDeleteEventLogger.debug(\"DELETING NODE \" + lDestNodePath);\n                            yangDB.delete(lDestNodePath, qp);\n                        }\n                        else if (canDeleteTp(lDestNodeId, lDestTpId, false, false, yangDB)) {\n                            handleDeleteEventLogger.debug(\"DELETING TP \" + lDestTpPath);\n                            yangDB.delete(lDestTpPath, qp);\n                            updateLagTpOnMemberDeleteEvent(lDestTpPath, yangDB, qp);\n                        }\n                    }\n\n                    if (lSourceTpPath == null || lDestTpPath == null || canDeleteLink(lSourceTpPath, lDestTpPath, yangDB)) {\n                        handleDeleteEventLogger.debug(\"DELETING LINK \" + ietfLinkPath);\n                        yangDB.delete(ietfLinkPath, qp);\n                    }\n                    else {\n                        //remove nspServiceId from the nsp-attributes list\n                        IYangObject linkAttributes = (YangObject) ietfLink.get(\"ietf-l2-topology:l2-link-attributes\");\n                        List<?> linkNspAttrs = (List<?>) linkAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                        List<String> lNewNspServiceIdList = new ArrayList<>();\n                        linkNspAttrs.stream()\n                                .filter(attr -> !attr.equals(nspServiceId))\n                                .forEach(attr -> lNewNspServiceIdList.add(attr.toString()));\n                        linkAttributes.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", lNewNspServiceIdList);\n\n                        // if the current ietf link name is the same as the deleted link name, then update it\n                        // the lNewNspServiceIdList should never be empty, if so, canDelete*** logic is wrong...\n                        if(linkAttributes.get(\"name\").equals(aInSrcObject.get(\"name\")) && !lNewNspServiceIdList.isEmpty()){\n                            //fetch name/delay of the first remaining nspServiceId in the list\n                            String lRemainingNspServiceId = lNewNspServiceIdList.get(0);\n                            String lLinkType = ((List<?>) linkAttributes.get(\"flags\")).get(0).toString().split(\":\")[1];\n                            String lServicePath = String.format(NSP_SERVICE_PATH, lLinkType, lRemainingNspServiceId);\n                            IYangObject lService = getSingleFromYangDb(yangDB, lServicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS_REDUCED));\n                            if(lService != null){\n                                linkAttributes.setProperty(\"name\", lService.get(\"name\"));\n                                linkAttributes.setProperty(\"delay\", lService.get(\"latency\"));\n                            }\n                        }\n                        handleDeleteEventLogger.debug(\"UPDATING LINK ATTRIBUTES\" + ietfLinkPath);\n                        yangDB.update(linkAttributes.getIdentifier(), linkAttributes, qp);\n                    }\n                }\n            }\n            return; //ietf link is found, return from the method\n        }\n\n\n        //this could be lag link being deleted - check if lag tp should be deleted/updated\n\n        List<?> lagTpList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(String.format(\n                        \"SELECT nodeid, tpid FROM %s WHERE nspietfnetworktopologynspattributes = :nspServiceId\",\n                        IETF_TP_NSP_ATTR_TABLE))\n                .setParameter(\"nspServiceId\", nspServiceId)\n                .getResultList());\n        if (lagTpList != null && !lagTpList.isEmpty()) {\n            for(Object lagTp : lagTpList){\n                Object[] tuple = (Object[]) lagTp;\n                String nodeId = tuple[0] != null ? tuple[0].toString() : StringUtils.EMPTY;\n                String tpId = tuple[1] != null ? tuple[1].toString() : StringUtils.EMPTY;\n                String tpPath = String.format(IETF_L2_TP_PATH, nodeId, tpId);\n                if(canDeleteNode(nodeId, yangDB)) {\n                    String nodePath = String.format(IETF_L2_NODE_PATH, nodeId);\n                    handleDeleteEventLogger.debug(\"DELETING NODE \" + nodePath);\n                    yangDB.delete(nodePath, qp);\n                }\n                else if(canDeleteTp(nodeId, tpId, true, false, yangDB)) {\n                    handleDeleteEventLogger.debug(\"DELETING TP \" + tpPath);\n                    yangDB.delete(tpPath, qp);\n                }\n                else {\n                    //remove nspServiceId from the nsp-attributes list - is this executed ever?\n                    IYangObject tp = yangDB.getSingle(tpPath, getFilteredQueryParameters(IETF_TP_READ_FIELDS));\n                    if(tp != null) {\n                        IYangObject tpAttributes = (IYangObject)tp.get(\"ietf-l2-topology:l2-termination-point-attributes\");\n                        List<?> tpNspAttrs = (List<?>)tpAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                        List<String> nspServiceIdList = new ArrayList<>();\n                        tpNspAttrs.stream()\n                                .filter(attr -> !attr.equals(nspServiceId))\n                                .forEach(attr -> nspServiceIdList.add(attr.toString()));\n                        tpAttributes.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                        handleDeleteEventLogger.debug(\"UPDATING TP ATTRIBUTES \" + tpPath);\n                        yangDB.update(tpAttributes.getIdentifier(), tpAttributes, qp);\n                    }\n                }\n            }\n        }\n    }\n\n    private void updateLagTpOnMemberDeleteEvent (String deletedMemberTpPath, IYangDB yangDB, QueryParameters qp){\n        List<?> lagTpList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(String.format(\n                        \"SELECT nodeid, tpid, count(*) FROM %s WHERE fkparent = (SELECT fkparent FROM %s WHERE memberlinktp = :memberlinktp) GROUP BY nodeid, tpid\",\n                        IETF_MEMBER_LINK_TP_TABLE, IETF_MEMBER_LINK_TP_TABLE))\n                .setParameter(\"memberlinktp\", deletedMemberTpPath)\n                .getResultList());\n        if (lagTpList != null && !lagTpList.isEmpty()) {\n            Object[] tuple = (Object[]) lagTpList.get(0);\n            String nodeId = tuple[0] != null ? tuple[0].toString() : StringUtils.EMPTY;\n            String tpId = tuple[1] != null ? tuple[1].toString() : StringUtils.EMPTY;\n            long count = tuple[2] != null ? ((BigInteger)tuple[2]).longValue() : 0;\n            String lagTpPath = String.format(IETF_L2_TP_PATH, nodeId, tpId);\n            if(count <= 1 && canDeleteTp(nodeId, tpId, true, false, yangDB))\n            {\n                //delete this lag tp as last member is deleted\n                handleDeleteEventLogger.debug(\"DELETING TP \" + lagTpPath);\n                yangDB.delete(lagTpPath, qp);\n            }\n            else {\n                //update this lag tp member-link-tp list\n                if(yangDB.exists(lagTpPath, qp)){\n                    String lagTpAttributesPath = lagTpPath + \"/ietf-l2-topology:l2-termination-point-attributes\";\n                    IYangObject lagTpAttributesObj = yangDB.getSingle(lagTpAttributesPath, getFilteredQueryParameters(IETF_TP_MEMBERS_READ_FIELDS));\n                    if(lagTpAttributesObj != null) {\n                        List<String> newMemberList = new ArrayList<>();\n                        List<?> lagTpMembers = (List<?>)lagTpAttributesObj.get(\"member-link-tp\");\n                        lagTpMembers.stream()\n                                .filter(memberTp -> !memberTp.equals(deletedMemberTpPath))\n                                .forEach(memberTp -> newMemberList.add(memberTp.toString()));\n                        lagTpAttributesObj.setProperty(\"member-link-tp\", newMemberList);\n                        handleDeleteEventLogger.debug(\"UPDATING TP \" + lagTpPath);\n                        yangDB.update(lagTpAttributesPath, lagTpAttributesObj, qp);\n                    }\n                }\n            }\n        }\n    }\n\n    private IYangObject buildNodeConfig(String siteId, IYangDB yangDB) {\n        IYangObject lNodeObj = new YangObject();\n        lNodeObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lNodeObj.setProperty(\"node-id\", siteId);\n\n        //l2-node-attributes\n        IYangObject lNodeAttrObj = new YangObject();\n        lNodeAttrObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lNodeAttrObj.setProperty(\"node-id\", siteId);\n\n        String lNePath = String.format(nokia_nsp_network_management_ELEMENT_PATH, siteId);\n        IYangObject lNe = yangDB.getSingle(lNePath, getFilteredQueryParameters(nokia_nsp_network_management_ELEMENT_READ_FIELDS));\n        if(lNe != null) {\n            if(lNe.get(\"ne-name\") != null){\n                lNodeAttrObj.setProperty(\"name\", lNe.get(\"ne-name\"));\n            }\n            if(lNe.get(\"mac-address\") != null){\n                String macAddress = convertMacAddress(lNe.get(\"mac-address\").toString());\n                if (macAddress != null) {\n                    lNodeAttrObj.setProperty(\"management-mac\", macAddress);\n                }\n            }\n            if(lNe.get(\"ip-address\") != null){\n                lNodeAttrObj.setProperty(\"management-address\", Collections.singletonList(lNe.get(\"ip-address\")));\n            }\n        }\n        lNodeObj.setProperty(\"ietf-l2-topology:l2-node-attributes\", lNodeAttrObj);\n        return lNodeObj;\n    }\n\n    private void handlePortLag(IYangObject aInSrcObject, EndpointType type, IYangDB yangDB, QueryParameters qp) {\n        //rely on equipment.name == endpoint.id, lag.name == endpoint.id\n        String lName = aInSrcObject.get(\"name\").toString();\n        String lNeId = aInSrcObject.get(\"ne-id\").toString();\n        List<?> resultList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createQuery(String.format(\"SELECT svc.id, svc.type FROM %s e JOIN e.service svc \"\n                                           + (type.equals(EndpointType.lag) ? \"JOIN svc.objectDetails sod ON (KEY(sod) = 'linkType') \" : \"\") //linkType is not set on manual lag links\n                                           + \"WHERE e.id=:endpointId AND e.siteId=:siteId AND e.type = :endpointType \"\n                                           + \"AND svc.layer=:layer AND svc.type in :serviceTypes\", NSP_ENDPOINT_TABLE))\n                .setParameter(\"endpointId\", lName)\n                .setParameter(\"siteId\", lNeId)\n                .setParameter(\"endpointType\", type)\n                .setParameter(\"layer\", NSP_L2_LAYER)\n                .setParameter(\"serviceTypes\", NSP_L2_SERVICE_TYPES)\n                .getResultList());\n        if (resultList != null && !resultList.isEmpty()) {\n            Object[] tuple = (Object[]) resultList.get(0); //get first result, don't care for duplicates\n            String lLinkId = tuple[0] != null ? tuple[0].toString() : StringUtils.EMPTY;\n            ServiceType lSvcType = tuple[1] instanceof ServiceType ? ((ServiceType) tuple[1]) : ServiceType.unknown;\n            String lLinkType = lSvcType.equals(ServiceType.cable) ? \"cable\" : (lSvcType.equals(ServiceType.radioLink) ? \"radio-link\" : StringUtils.EMPTY);\n            String lEndpointPath = String.format(NSP_ENDPOINT_PATH, lLinkType, lLinkId, lNeId, lName);\n            IYangObject endpoint = getSingleFromYangDb(yangDB, lEndpointPath, getFilteredQueryParameters(NSP_ENDPOINT_READ_FIELDS));\n            if(endpoint != null && isValidEndpoint(endpoint, yangDB)) {\n                handlePortLagLogger.debug(\"HANDLE PORT/LAG ENDPOINT FOUND: {}\", lEndpointPath);\n                handleTP(endpoint, yangDB, qp, aInSrcObject);\n                if(endpoint.get(\"type\").toString().equals(\"physical-port\")) {\n                    String servicePath = endpoint.getIdentifier().substring(0, endpoint.getIdentifier().indexOf(\"/link-endpoint[\"));\n                    IYangObject lLinkSourceObj = getSingleFromYangDb(\n                            yangDB, servicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n                    if (lLinkSourceObj != null) {\n                        handlePortLagLogger.debug(\"HANDLE PORT SERVICE FOUND: {}\", servicePath);\n                        handleLink(lLinkSourceObj, false, true, yangDB, qp);\n                    }\n                }\n            }\n        }\n    }\n\n    private boolean isValidEndpoint(IYangObject aInEndpoint, IYangDB yangDB) {\n        String endpointId = aInEndpoint.get(\"endpoint-id\").toString();\n        String siteId = getSiteIdForEndpoint(aInEndpoint);\n        boolean isLag = aInEndpoint.get(\"type\").toString().equals(\"lag\");\n        if(isLag) {\n            String nspServiceId = getServiceIdFromEndpointPath(aInEndpoint.getIdentifier());\n            return isValidLagEndpoint(aInEndpoint) && isValidLinkType(nspServiceId, yangDB)\n                   && !canDeleteTp(siteId, endpointId, isLag, false, yangDB);\n        }\n        return isValidPortEndpoint(aInEndpoint) && !canDeleteTp(siteId, endpointId, isLag, false, yangDB);\n    }\n\n    private void handleTP(IYangObject aInEndpoint, IYangDB yangDB, QueryParameters qp, IYangObject aInResource) {\n        String endpointId = aInEndpoint.get(\"endpoint-id\").toString();\n        String siteId = getSiteIdForEndpoint(aInEndpoint);\n        String lTpPath = String.format(IETF_L2_TP_PATH, siteId, endpointId);\n        boolean isLag = aInEndpoint.get(\"type\").toString().equals(\"lag\");\n        String lNodePath = String.format(IETF_L2_NODE_PATH, siteId);\n        IYangObject lTpObj = buildTpConfig(aInEndpoint, siteId, endpointId, isLag, yangDB, aInResource);\n        if(lTpObj != null) {\n            if (!yangDB.exists(lNodePath, qp)) {\n                handleNodeLogger.debug(\"CREATING NODE \" + lNodePath);\n                IYangObject lNodeObj = buildNodeConfig(siteId, yangDB);\n                yangDB.createChild(IETF_L2_NETWORK_PATH, IETF_NODE_TYPE, lNodeObj, qp);\n            }\n            if (!yangDB.exists(lTpPath, qp)) {\n                handleTpLogger.debug(\"CREATING TP \" + lTpPath);\n                yangDB.createChild(lNodePath, IETF_TP_TYPE, lTpObj, qp);\n            } else {\n                handleTpLogger.debug(\"UPDATING TP \" + lTpPath);\n                yangDB.update(lTpPath, lTpObj, qp);\n            }\n        }\n    }\n\n    private IYangObject buildTpConfig(IYangObject aInEndpoint, String siteId, String endpointId, boolean isLag, IYangDB yangDB, IYangObject resource) {\n        IYangObject lTpObj = new YangObject();\n        lTpObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lTpObj.setProperty(\"node-id\", siteId);\n        lTpObj.setProperty(\"tp-id\", endpointId);\n\n        //l2-termination-point-attributes\n        IYangObject lTPAttrObj = new YangObject();\n        lTPAttrObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lTPAttrObj.setProperty(\"node-id\", siteId);\n        lTPAttrObj.setProperty(\"tp-id\", endpointId);\n        lTPAttrObj.setProperty(\"lag\", isLag);\n\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        if (resource == null) {\n            Object resourcePath = null;\n            if(aInEndpoint.get(\"port-bindings\") != null && !((List<?>) aInEndpoint.get(\"port-bindings\")).isEmpty()) {\n                resourcePath = ((YangObject) ((List<?>) aInEndpoint.get(\"port-bindings\")).get(0)).get(\"resource\");\n            }\n            else {\n                IYangObject lEndpointObj = getSingleFromYangDb(yangDB, aInEndpoint.getIdentifier(), setFilterOnQueryParameters(qp, NSP_ENDPOINT_READ_FIELDS));\n                if(lEndpointObj != null) {\n                    if(lEndpointObj.get(\"port-bindings\") != null && !((List<?>) lEndpointObj.get(\"port-bindings\")).isEmpty()) {\n                        resourcePath = ((YangObject) ((List<?>) lEndpointObj.get(\"port-bindings\")).get(0)).get(\"resource\");\n                    }\n                }\n            }\n            if (resourcePath != null && isValidYangPath(resourcePath.toString())) {\n                if(isLag) {\n                    resource = yangDB.getSingle(resourcePath.toString(), setFilterOnQueryParameters(qp, NSP_LAG_READ_FIELDS));\n                }\n                else {\n                    resource = yangDB.getSingle(resourcePath.toString(), setFilterOnQueryParameters(qp, NSP_PORT_READ_FIELDS_FOR_TP));\n                }\n            }\n        }\n        if (resource != null) {\n            lTPAttrObj.setProperty(\"interface-name\", resource.get(\"name\").toString());\n            if (isLag) {\n                if(resource.get(\"configured-address\") != null) {\n                    String macAddress = convertMacAddress(resource.get(\"configured-address\").toString());\n                    if (macAddress != null) {\n                        lTPAttrObj.setProperty(\"mac-address\", macAddress);\n                    }\n                }\n                if (resource.get(\"encap-type\") != null) {\n                    String encapType = convertEncapType(resource.get(\"encap-type\").toString());\n                    if (encapType != null) {\n                        lTPAttrObj.setProperty(\"encapsulation-type\", encapType);\n                    }\n                }\n                if (resource.get(\"lag-index\") != null) {\n                    lTPAttrObj.setProperty(\"unnumbered-id\", Collections.singletonList(resource.get(\"lag-index\")));\n                }\n                List<Object> members = new ArrayList<>();\n                List<?> resourceMembers = Collections.EMPTY_LIST;\n                if(resource.get(\"members\") != null) {\n                    resourceMembers = (List<?>)resource.get(\"members\");\n                }\n                else {\n                    resource = yangDB.getSingle(resource.getIdentifier(), setFilterOnQueryParameters(qp, NSP_LAG_READ_FIELDS_MEMBERS));\n                    if(resource != null && resource.get(\"members\") != null) {\n                        resourceMembers = (List<?>) resource.get(\"members\");\n                    }\n                }\n                resourceMembers.forEach(member -> {\n                    String memberPath = ((String) member).substring(0, ((String) member).indexOf(\"/lag-member-details\"));\n                    IYangObject lMemberObj = yangDB.getSingle(memberPath, setFilterOnQueryParameters(qp, NSP_PORT_READ_FIELDS_FOR_LAG_MEMBER));\n                    if (lMemberObj != null) {\n                        //memberPath is the identifier of the port, not link endpoint\n                        //need to find endpoint because there could be no link on the lag member port, or unmanaged link\n                        //also look for the link with objectDetails.isLagMember=true\n                        String memberName = lMemberObj.get(\"name\").toString();\n                        if(!canDeleteTp(siteId, memberName, false, true, yangDB)) {\n                            members.add(String.format(IETF_L2_TP_PATH, siteId, memberName));\n                        }\n                    }\n                });\n                if (!members.isEmpty()) {\n                    lTPAttrObj.setProperty(\"member-link-tp\", members);\n                }\n                else {\n                    return null; //don't sync this lag endpoint to ietf\n                }\n                //set nsp-ietf-network-topology:nsp-attributes\n                String nspServiceId = getServiceIdFromEndpointPath(aInEndpoint.getIdentifier());\n                List<String> nspServiceIdList = new ArrayList<>();\n                String lTpPath = String.format(IETF_L2_TP_PATH, siteId, endpointId);\n                if(yangDB.exists(lTpPath)) {\n                    String tpAttrPath = lTpPath + \"/ietf-l2-topology:l2-termination-point-attributes\";\n                    IYangObject tpAttributes = yangDB.getSingle(tpAttrPath, setFilterOnQueryParameters(qp, IETF_TP_ATTR_READ_FIELDS));\n                    if(tpAttributes != null) {\n                        List<?> existingNspAttr = (List<?>)tpAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                        if(!existingNspAttr.contains(nspServiceId)){\n                            existingNspAttr.forEach(attr -> nspServiceIdList.add(attr.toString()));\n                            nspServiceIdList.add(nspServiceId);\n                            lTPAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                        }\n                    }\n                }\n                else {\n                    nspServiceIdList.add(nspServiceId);\n                    lTPAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                }\n            } else {\n                if(resource.get(\"hw-mac-address\") != null) {\n                    String macAddress = convertMacAddress(resource.get(\"hw-mac-address\").toString());\n                    if (macAddress != null) {\n                        lTPAttrObj.setProperty(\"mac-address\", macAddress);\n                    }\n                }\n                IYangObject lPortDetails = null;\n                if (resource.get(\"port-details\") != null && !((List<?>) resource.get(\"port-details\")).isEmpty()) {\n                    lPortDetails = (IYangObject) ((List<?>) resource.get(\"port-details\")).get(0);\n                }\n                else {\n                    String portDetailsPath = resource.getIdentifier() + \"/port-details\";\n                    lPortDetails = yangDB.getSingle(portDetailsPath, setFilterOnQueryParameters(qp, NSP_PORT_DETAILS_READ_FIELDS_FOR_TP));\n                }\n                if (lPortDetails != null) {\n                    if (lPortDetails.get(\"encap-type\") != null) {\n                        String encapType = convertEncapType(lPortDetails.get(\"encap-type\").toString());\n                        if (encapType != null) {\n                            lTPAttrObj.setProperty(\"encapsulation-type\", encapType);\n                        }\n                    }\n                    if (lPortDetails.get(\"port-index\") != null) {\n                        lTPAttrObj.setProperty(\"unnumbered-id\", Collections.singletonList(lPortDetails.get(\"port-index\")));\n                    }\n                }\n            }\n        }\n        else {\n            handleTpLogger.debug(\"RESOURCE MISSING FOR TP \" + String.format(IETF_L2_TP_PATH, siteId, endpointId));\n            return null; //don't create/update tp, wait for another event\n        }\n        lTpObj.setProperty(\"ietf-l2-topology:l2-termination-point-attributes\", lTPAttrObj);\n        return lTpObj;\n    }\n\n    private void handleLink(IYangObject aInSrcObject, boolean isNameUpdate, boolean isPortUpdate, IYangDB yangDB, QueryParameters qp) {\n\n        String nspServiceId = aInSrcObject.get(\"id\").toString();\n\n        List<?> endpoints = (List<?>)aInSrcObject.get(\"link-endpoint\");\n        if (endpoints == null || endpoints.isEmpty()) {\n            IYangObject lSourceObj = getSingleFromYangDb(\n                    yangDB, aInSrcObject.getIdentifier(), getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n            if (lSourceObj != null) {\n                endpoints = (List<?>)lSourceObj.get(\"link-endpoint\");\n            }\n        }\n\n        if(endpoints == null || endpoints.size() != 2 || !isValidLinkEndpoints(endpoints)) {\n            deleteLink(aInSrcObject, yangDB, qp); //delete if the link is already in ietf\n            return; //do not sync this link to ietf\n        }\n\n        final Map<String,String> linkExtraProps = new HashMap<>(); //will hold source, destination, port-details props\n        getLinkExtraFromEndpoints(endpoints, linkExtraProps, yangDB);\n        if (linkExtraProps.get(\"srcNodeId\") == null || linkExtraProps.get(\"srcTpId\") == null ||\n            linkExtraProps.get(\"destNodeId\") == null || linkExtraProps.get(\"destTpId\") == null) {\n\n            handleLinkLogger.warn(\"ENDPOINTS MISCONFIGURED - CANNOT PROCESS LINK ID: \" + nspServiceId);\n            return; //cannot proceed without valid endpoints info\n        }\n        String ietfLinkId = getIetfLinkId(linkExtraProps.get(\"srcNodeId\"), linkExtraProps.get(\"srcTpId\"),\n                                          linkExtraProps.get(\"destNodeId\"), linkExtraProps.get(\"destTpId\"));\n        doHandleLink(aInSrcObject, linkExtraProps, nspServiceId, isNameUpdate, isPortUpdate, ietfLinkId,\n                     linkExtraProps.get(\"srcNode\"), linkExtraProps.get(\"srcTp\"),\n                     linkExtraProps.get(\"destNode\"), linkExtraProps.get(\"destTp\"), yangDB, qp);\n\n        if(aInSrcObject.get(\"direction\").toString().equals(\"bi-directional\"))\n        {\n            ietfLinkId = getIetfLinkId(linkExtraProps.get(\"destNodeId\"), linkExtraProps.get(\"destTpId\"),\n                                       linkExtraProps.get(\"srcNodeId\"), linkExtraProps.get(\"srcTpId\"));\n            doHandleLink(aInSrcObject, linkExtraProps, nspServiceId, isNameUpdate, isPortUpdate, ietfLinkId,\n                         linkExtraProps.get(\"destNode\"), linkExtraProps.get(\"destTp\"),\n                         linkExtraProps.get(\"srcNode\"), linkExtraProps.get(\"srcTp\"), yangDB, qp);\n        }\n    }\n\n    private void doHandleLink(IYangObject aInSrcObject, Map<String,String> linkExtraProps, String nspServiceId, boolean isNameUpdate, boolean isPortUpdate,\n                              String ietfLinkId, String srcNode, String srcTp, String destNode, String destTp, IYangDB yangDB, QueryParameters qp)\n    {\n\n        IYangObject lLinkObject = new YangObject();\n        lLinkObject.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lLinkObject.setProperty(\"link-id\", ietfLinkId);\n\n        //source\n        IYangObject lSrcObject = new YangObject();\n        lSrcObject.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lSrcObject.setProperty(\"link-id\", ietfLinkId);\n        lSrcObject.setProperty(\"source-node\", srcNode);\n        lSrcObject.setProperty(\"source-tp\", srcTp);\n        lLinkObject.setProperty(\"source\", lSrcObject);\n\n        //destination\n        IYangObject lDestObject = new YangObject();\n        lDestObject.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lDestObject.setProperty(\"link-id\", ietfLinkId);\n        lDestObject.setProperty(\"dest-node\", destNode);\n        lDestObject.setProperty(\"dest-tp\", destTp);\n        lLinkObject.setProperty(\"destination\", lDestObject);\n\n        //link-attributes\n        IYangObject lLinkAttrObj = new YangObject();\n        lLinkAttrObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lLinkAttrObj.setProperty(\"link-id\", ietfLinkId);\n        if(linkExtraProps.get(\"rate\") != null) {\n            lLinkAttrObj.setProperty(\"rate\", Math.round(Float.parseFloat(linkExtraProps.get(\"rate\"))));\n        }\n        if(linkExtraProps.get(\"duplex\") != null) {\n            lLinkAttrObj.setProperty(\"duplex\", linkExtraProps.get(\"duplex\"));\n        }\n        if(linkExtraProps.get(\"auto-nego\") != null) {\n            lLinkAttrObj.setProperty(\"auto-nego\", linkExtraProps.get(\"auto-nego\").equals(\"enabled\"));\n        }\n\n        String lLinkPath = String.format(IETF_L2_LINK_PATH, ietfLinkId);\n        List<String> nspServiceIdList = new ArrayList<>();\n        boolean isLinkExists = false;\n        if(yangDB.exists(lLinkPath, qp)) {\n            isLinkExists = true;\n            String linkAttrPath = lLinkPath + \"/ietf-l2-topology:l2-link-attributes\";\n            IYangObject linkAttributes = yangDB.getSingle(linkAttrPath, getFilteredQueryParameters(IETF_LINK_ATTR_READ_FIELDS));\n            if(linkAttributes != null) {\n                List<?> existingNspAttr = (List<?>)linkAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                if(!existingNspAttr.contains(nspServiceId)){\n                    existingNspAttr.forEach(attr -> nspServiceIdList.add(attr.toString()));\n                    nspServiceIdList.add(nspServiceId);\n                    lLinkAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                }\n\n                //below logic is needed for nfmp managing scenario when link name is updated multiple times\n                //how to decide if ietf link name should be updated??\n                //try comparing nspServiceId with the first in the existing list\n                if(isNameUpdate && nspServiceId.equals(existingNspAttr.get(0).toString())) {\n                    lLinkAttrObj.setProperty(\"name\", aInSrcObject.get(\"name\"));\n                }\n\n                //if name is the same, then update delay\n                if(linkAttributes.get(\"name\").equals(aInSrcObject.get(\"name\"))) {\n                    lLinkAttrObj.setProperty(\"delay\", aInSrcObject.get(\"latency\"));\n                }\n            }\n        }\n        else {\n            //set name only on create and don't overwrite by duplicates\n            lLinkAttrObj.setProperty(\"name\", aInSrcObject.get(\"name\"));\n            lLinkAttrObj.setProperty(\"delay\", aInSrcObject.get(\"latency\"));\n            nspServiceIdList.add(nspServiceId);\n            lLinkAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n            lLinkAttrObj.setProperty(\"flags\", Collections.singletonList(\"nsp-ietf-network-topology:\" + getServiceTypeFromPath(aInSrcObject.getIdentifier())));\n        }\n        lLinkObject.setProperty(\"ietf-l2-topology:l2-link-attributes\", lLinkAttrObj);\n\n        if (!isLinkExists) {\n            if(!isPortUpdate){\n                handleLinkLogger.debug(\"CREATING LINK \" + lLinkPath);\n                yangDB.createChild(IETF_L2_NETWORK_PATH, IETF_LINK_TYPE, lLinkObject, qp);\n            }\n        } else {\n            handleLinkLogger.debug(\"UPDATING LINK \" + lLinkPath);\n            yangDB.update(lLinkPath, lLinkObject, qp);\n        }\n    }\n\n    private void getLinkExtraFromEndpoints (List<?> endpoints, Map<String,String> linkExtraProps, IYangDB yangDB) {\n        endpoints.forEach(endpoint -> {\n            String endpointId = ((IYangObject) endpoint).get(\"endpoint-id\").toString();\n            String siteId = getSiteIdForEndpoint((IYangObject) endpoint);\n            String lNodePath = String.format(IETF_L2_NODE_PATH, siteId);\n            String lTpPath = String.format(IETF_L2_TP_PATH, siteId, endpointId);\n            List<?> nspSources = (List<?>)((YangObject) endpoint).getExtraDatas().get(\"sources\");\n            nspSources.forEach(source -> {\n                if (source.toString().contains(\"@endpointA\")) {\n                    linkExtraProps.put(\"srcNode\", lNodePath);\n                    linkExtraProps.put(\"srcTp\", lTpPath);\n                    linkExtraProps.put(\"srcNodeId\", siteId);\n                    linkExtraProps.put(\"srcTpId\", endpointId);\n                }\n                else if (source.toString().contains(\"@endpointB\")) {\n                    linkExtraProps.put(\"destNode\", lNodePath);\n                    linkExtraProps.put(\"destTp\", lTpPath);\n                    linkExtraProps.put(\"destNodeId\", siteId);\n                    linkExtraProps.put(\"destTpId\", endpointId);\n                }\n            });\n            if (((YangObject) endpoint).get(\"port-bindings\") != null && !((List<?>) ((YangObject) endpoint).get(\"port-bindings\")).isEmpty()) {\n                Object resource = ((YangObject) ((List<?>) ((YangObject) endpoint).get(\"port-bindings\")).get(0)).get(\"resource\");\n                if (resource != null && isValidYangPath(resource.toString())) {\n                    String portDetailsPath = resource + \"/port-details\";\n                    IYangObject lPortDetails = yangDB.getSingle(\n                            portDetailsPath,\n                            getFilteredQueryParameters(NSP_PORT_DETAILS_READ_FIELDS_FOR_LINK));\n                    if (lPortDetails != null) {\n                        if (lPortDetails.get(\"actual-rate\") != null && lPortDetails.get(\"actual-rate-units\") != null) {\n                            double rate = Double.parseDouble(lPortDetails.get(\"actual-rate\").toString());\n                            String units = lPortDetails.get(\"actual-rate-units\").toString();\n                            if(units.equals(\"mbps\")) {\n                                rate *= 1000;\n                            }\n                            else if(!units.equals(\"kbps\")) {\n                                rate = 0;\n                            }\n                            linkExtraProps.put(\"rate\", String.valueOf(rate));\n                        }\n                        if (lPortDetails.get(\"operational-duplex\") != null) {\n                            String duplex = convertDuplex(lPortDetails.get(\"operational-duplex\").toString());\n                            if (duplex != null) {\n                                linkExtraProps.put(\"duplex\", lPortDetails.get(\"operational-duplex\").toString());\n                            }\n                        }\n                        if (lPortDetails.get(\"auto-negotiate\") != null) {\n                            linkExtraProps.put(\"auto-nego\", lPortDetails.get(\"auto-negotiate\").toString());\n                        }\n                    }\n                }\n            }\n            else {\n                handleLinkLogger.debug(\"LINK PORT-BINDINGS MISSING {}, {}\", endpointId, siteId);\n            }\n        });\n    }\n\n    private String getServiceIdFromEndpointPath(String endpointPath) {\n        String idKey = \"[id='\";\n        return endpointPath.substring(endpointPath.indexOf(idKey) + idKey.length(), endpointPath.indexOf(\"']/link-endpoint\"));\n    }\n\n    private String getServiceTypeFromPath(String servicePath) {\n        return servicePath.substring(\"/nsp-service:services/physical-layer/\".length(), servicePath.indexOf(\"[id=\"));\n    }\n\n    private String getNodeIdFromTpPath(String tpPath) {\n        String nodeIdKey = \"[node-id='\";\n        return tpPath.substring(tpPath.indexOf(nodeIdKey) + nodeIdKey.length(), tpPath.indexOf(\"']/ietf\"));\n    }\n\n    private String getTpIdFromTpPath(String tpPath) {\n        String tpIdKey = \"[tp-id='\";\n        return tpPath.substring(tpPath.indexOf(tpIdKey) + tpIdKey.length(), tpPath.lastIndexOf(\"']\"));\n    }\n\n    private String getIetfLinkId (String srcNodeId, String srcTpId, String destNodeId, String destTpId) {\n        return srcNodeId + \":\" + srcTpId + \"--\" + destNodeId + \":\" + destTpId;\n    }\n\n    //this is a way to filter out manual lag links\n    //check if objectDetails.linkType is set - manually created links don't have linkType entry\n    private boolean isValidLinkType (String nspServiceId, IYangDB yangDB) {\n        String query = String.format(\"SELECT count(s.dbId) FROM %s s JOIN s.objectDetails sod ON (KEY(sod) = :sodKey) \"\n                                     + \"WHERE s.id = :nspServiceId\", NSP_SERVICE_TABLE);\n        Long count = execute(yangDB.getDb(), tx -> (Long)tx.getEntityManager()\n                .createQuery(query)\n                .setParameter(\"sodKey\", \"linkType\")\n                .setParameter(\"nspServiceId\", nspServiceId)\n                .getSingleResult());\n        return !(count != null && count.intValue() == 0);\n    }\n\n    //Filtering out links terminating on NE, Lag, Bundle, GNI, unmanaged\n    private boolean isValidLinkEndpoints (List<?> endpoints) {\n        boolean isValidEndpoint = true;\n        for(Object endpoint : endpoints) {\n            isValidEndpoint &= isValidPortEndpoint((IYangObject)endpoint);\n        }\n        return isValidEndpoint;\n    }\n\n    private boolean isValidLagEndpoints (List<?> endpoints) {\n        boolean isValidEndpoint = true;\n        for(Object endpoint : endpoints) {\n            isValidEndpoint &= isValidLagEndpoint((IYangObject)endpoint);\n        }\n        return isValidEndpoint;\n    }\n\n    private boolean isValidPortEndpoint (IYangObject aInEndpointObject) {\n        return isValidId(aInEndpointObject.get(\"endpoint-id\").toString())\n               && isValidSiteId(getSiteIdForEndpoint(aInEndpointObject))\n               && (aInEndpointObject.get(\"type\").toString().equals(\"physical-port\"));\n    }\n\n    private boolean isValidLagEndpoint (IYangObject aInEndpointObject) {\n        return isValidId(aInEndpointObject.get(\"endpoint-id\").toString())\n               && isValidSiteId(getSiteIdForEndpoint(aInEndpointObject))\n               && aInEndpointObject.get(\"type\").toString().equals(\"lag\");\n    }\n\n    private String getSiteIdForEndpoint (IYangObject aInEndpointObject) {\n        return aInEndpointObject.get(\"site-id\") != null\n               ? aInEndpointObject.get(\"site-id\").toString() : \"0.0.0.0\";\n    }\n\n    private boolean isValidSiteId (String siteId) {\n        return isValidId(siteId) && !(\"0.0.0.0\").equals(siteId);\n    }\n\n    private boolean isValidId (String id) {\n        return (null != id) && (0 != id.length());\n    }\n\n    private boolean isValidYangPath (String path) {\n        return path.startsWith(\"/nsp-equipment:\")\n               || path.startsWith(\"/nsp-service:\")\n               || path.startsWith(\"/ietf-network:\");\n    }\n\n    //todo: map encap-type?? ietf-l2-topology encap-types: ethernet, vlan, qinq, pbb, trill, vpls, vxlan\n    private String convertEncapType (String encapType) {\n        switch (encapType) {\n            case \"qinq\":\n                return IetfL2EncapType.QINQ.value;\n            case \"dot1q\":\n                return IetfL2EncapType.VLAN.value;//?\n            case \"null-encap\":\n                return IetfL2EncapType.ETHERNET.value;//?\n            default:\n                return null;\n        }\n    }\n\n    private String convertDuplex (String duplex) {\n        switch (duplex) {\n            case \"full-duplex\":\n                return IetfDuplexMode.FULL.value;\n            case \"half-duplex\":\n                return IetfDuplexMode.HALF.value;\n            default:\n                return null;\n        }\n    }\n\n    private String convertMacAddress (String aInMacAddress) {\n        String macAddress = aInMacAddress.replace(\"-\", \":\").replace(\".\", \"\");\n        if (MAC_ADDRESS_PATTERN.matcher(macAddress).matches()) {\n            return macAddress;\n        }\n        if (RAW_MAC_ADDRESS_PATTERN.matcher(macAddress).matches()) {\n            StringBuilder macAddressSB = new StringBuilder(macAddress);\n            macAddressSB.insert(10, ':')\n                    .insert(8, ':')\n                    .insert(6, ':')\n                    .insert(4, ':')\n                    .insert(2, ':');\n            return macAddressSB.toString();\n        }\n        return null;\n    }\n\n    private QueryParameters getFilteredQueryParameters (Fields fields) {\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n        return setFilterOnQueryParameters(qp, fields);\n    }\n\n    private QueryParameters setFilterOnQueryParameters (QueryParameters qp, Fields fields) {\n        qp.setFields(fields);\n        return qp;\n    }\n\n    private IYangObject getSingleFromYangDb(IYangDB yangDB, String path, QueryParameters qp) {\n        List<IYangObject> list = yangDB.getMany(path, qp);\n        if(list != null && !list.isEmpty()){\n            return list.get(0);\n        }\n        return null;\n    }\n\n    private <T> T execute(IDB db, Function<ITransactionContext, T> fn) {\n        try {\n            if (Transactor.isInTransaction()) {\n                return fn.apply(Transactor.getContext());\n            } else {\n                return Transactor.execute(db, fn, true);\n            }\n        } catch (DBRuntimeException e) {\n            dataBaseAccessLogger.error(\"DB ACCESS ERROR: \", e);\n            return null;\n        }\n    }\n\n}\n"
                          }
                        ]
                      }
                    ],
                    "sync-classes": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "dest-class-path": "ietf-network:/networks/network",
                        "version": "1.0",
                        "is-root-class": true,
                        "dest-ne-id-field-name": "",
                        "dest-ne-id-field-step": "",
                        "support-creation": true,
                        "support-deletion": true,
                        "delete-object-filter-ref": "com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter",
                        "support-create-on-modify-event": false,
                        "default-instances": [
                          "{\"network-id\": \"SAPTopology\",\"network-types\": {\"ietf-sap-ntw:sap-network\": {\"service-type\": [\"ietf-vpn-common:vpws\",\"ietf-vpn-common:vpls\",\"ietf-vpn-common:l3vpn\"]}}}",
                          "{\"network-id\": \"L2Topology\",\"network-types\": {\"ietf-l2-topology:l2-topology\": {}},\"ietf-l2-topology:l2-topology-attributes\": {\"name\": \"L2Topology\"}}"
                        ],
                        "src-classes": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network']/src-classes[src-class-path='nsp-service:/services/igp-layer/admin-domain']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/igp-layer/admin-domain",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "tracking-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network']/src-classes[src-class-path='nsp-service:/services/igp-layer/admin-domain']/full-resync-search-by-fields[step='network']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "network",
                                "expression": "network-id!='L2Topology' and network-id!='SAPTopology'",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network']/src-classes[src-class-path='ietf-network:/networks/network']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "ietf-network:/networks/network",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "dest-class-path": "ietf-network:/networks/network/node",
                        "version": "1.0",
                        "is-root-class": true,
                        "dest-ne-id-field-name": "node-id",
                        "dest-ne-id-field-step": "",
                        "depends-on": "ietf-network:/networks/network",
                        "support-creation": true,
                        "support-deletion": true,
                        "delete-object-filter-ref": "com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter",
                        "support-create-on-modify-event": false,
                        "default-instances": [],
                        "src-classes": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='nsp-equipment:/network/network-element']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element",
                            "is-global": false,
                            "ne-id-field-name": "ne-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.IetfNodeHandlerForNSPNetworkElement",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='nsp-equipment:/network/network-element']/full-resync-search-by-fields[step='network']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "network",
                                "expression": "network-id='L2Topology' or network-id='SAPTopology'",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='nsp-service:/services/igp-layer/admin-domain/routing-instance']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/igp-layer/admin-domain/routing-instance",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='nsp-service:/services/igp-layer/admin-domain/routing-instance']/full-resync-search-by-fields[step='node']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "node",
                                "expression": "boolean(ietf-l3-unicast-topology:l3-node-attributes[equalsIgnoreCase(flag,'nsp-ietf-network-topology:routing-instance')])",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='nsp-service:/services/igp-layer/admin-domain/subnet']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/igp-layer/admin-domain/subnet",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "tracking-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [
                              "node-type",
                              "protocol",
                              "id",
                              "dr-ip-address"
                            ],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='nsp-service:/services/igp-layer/admin-domain/subnet']/full-resync-search-by-fields[step='node']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "node",
                                "expression": "boolean(ietf-l3-unicast-topology:l3-node-attributes[equalsIgnoreCase(flag,'nsp-ietf-network-topology:subnet')])",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='nsp-service:/services/igp-layer/admin-domain/routing-instance/prefix']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/igp-layer/admin-domain/routing-instance/prefix",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "tracking-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": false,
                            "support-deletion": true,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node']/src-classes[src-class-path='ietf-network:/networks/network/node']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "ietf-network:/networks/network/node",
                            "is-global": true,
                            "ne-id-field-name": "node-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "dest-class-path": "ietf-network:/networks/network/ietf-network-topology:link",
                        "version": "1.0",
                        "is-root-class": true,
                        "dest-ne-id-field-name": "",
                        "dest-ne-id-field-step": "",
                        "depends-on": "ietf-network:/networks/network/node",
                        "support-creation": true,
                        "support-deletion": true,
                        "delete-object-filter-ref": "com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter",
                        "support-create-on-modify-event": false,
                        "default-instances": [],
                        "src-classes": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']/src-classes[src-class-path='nsp-service:/services/physical-layer/cable']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/physical-layer/cable",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "tracking-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [
                              "name"
                            ],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']/src-classes[src-class-path='nsp-service:/services/physical-layer/cable']/full-resync-search-by-fields[step='ietf-network-topology:link']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-network-topology:link",
                                "expression": "boolean(ietf-l2-topology:l2-link-attributes[equalsIgnoreCase(flags,'nsp-ietf-network-topology:cable')])",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']/src-classes[src-class-path='nsp-service:/services/physical-layer/radio-link']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/physical-layer/radio-link",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "tracking-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [
                              "name"
                            ],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']/src-classes[src-class-path='nsp-service:/services/physical-layer/radio-link']/full-resync-search-by-fields[step='ietf-network-topology:link']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-network-topology:link",
                                "expression": "boolean(ietf-l2-topology:l2-link-attributes[equalsIgnoreCase(flags,'nsp-ietf-network-topology:radio-link')])",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']/src-classes[src-class-path='nsp-service:/services/igp-layer/ip-links']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/igp-layer/ip-links",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "tracking-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']/src-classes[src-class-path='nsp-service:/services/igp-layer/ip-links']/full-resync-search-by-fields[step='ietf-network-topology:link']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-network-topology:link",
                                "expression": "boolean(ietf-l3-unicast-topology:l3-link-attributes[equalsIgnoreCase(flag,'nsp-ietf-network-topology:igp')])",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/ietf-network-topology:link']/src-classes[src-class-path='ietf-network:/networks/network/ietf-network-topology:link']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "ietf-network:/networks/network/ietf-network-topology:link",
                            "is-global": true,
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "dest-class-path": "ietf-network:/networks/network/node/ietf-network-topology:termination-point",
                        "version": "1.0",
                        "is-root-class": true,
                        "dest-ne-id-field-name": "node-id",
                        "dest-ne-id-field-step": "ietf-network:node",
                        "depends-on": "ietf-network:/networks/network/node",
                        "support-creation": true,
                        "support-deletion": true,
                        "delete-object-filter-ref": "com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter",
                        "support-create-on-modify-event": false,
                        "default-instances": [],
                        "src-classes": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']/src-classes[src-class-path='nsp-service:/services/physical-layer/cable/link-endpoint']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/physical-layer/cable/link-endpoint",
                            "is-global": false,
                            "ne-id-field-name": "site-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']/src-classes[src-class-path='nsp-service:/services/physical-layer/radio-link/link-endpoint']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/physical-layer/radio-link/link-endpoint",
                            "is-global": false,
                            "ne-id-field-name": "site-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']/src-classes[src-class-path='nsp-equipment:/network/network-element/hardware-component/port']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element/hardware-component/port",
                            "is-global": false,
                            "ne-id-field-name": "ne-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "is-resync": false,
                            "support-deletion": true,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']/src-classes[src-class-path='nsp-equipment:/network/network-element/hardware-component/port/port-details']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element/hardware-component/port/port-details",
                            "is-global": false,
                            "ne-id-from-identifier-parser-ref": "port-details.neId.parser",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "is-resync": false,
                            "support-deletion": true,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']/src-classes[src-class-path='nsp-equipment:/network/network-element/lag']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element/lag",
                            "is-global": false,
                            "ne-id-field-name": "ne-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                            "is-resync": false,
                            "support-deletion": true,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']/src-classes[src-class-path='ietf-network:/networks/network/node/ietf-network-topology:termination-point']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "ietf-network:/networks/network/node/ietf-network-topology:termination-point",
                            "is-global": false,
                            "ne-id-field-name": "node-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "dest-class-path": "ietf-network:/networks/network/node/ietf-sap-ntw:service/sap",
                        "version": "2311.0.3",
                        "is-root-class": true,
                        "dest-ne-id-field-name": "node-id",
                        "dest-ne-id-field-step": "ietf-network:node",
                        "depends-on": "ietf-network:/networks/network/node",
                        "support-creation": true,
                        "support-deletion": true,
                        "delete-object-filter-ref": "com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter",
                        "support-create-on-modify-event": false,
                        "default-instances": [],
                        "src-classes": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/hardware-component/port']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element/hardware-component/port",
                            "is-global": false,
                            "ne-id-field-name": "ne-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/hardware-component/port']/full-resync-search-by-fields[step='ietf-sap-ntw:sap']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:sap",
                                "expression": "interface-type='ietf-sap-ntw:phy'",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/hardware-component/port/port-details']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element/hardware-component/port/port-details",
                            "is-global": false,
                            "ne-id-field-name": "ne-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/hardware-component/port/lag-member-details']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element/hardware-component/port/lag-member-details",
                            "is-global": false,
                            "ne-id-field-name": "ne-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": [],
                            "fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/hardware-component/port/lag-member-details']/fields[dest-attribute=''][src-attribute='lag-id']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "dest-attribute": "",
                                "src-attribute": "lag-id",
                                "is-key": false,
                                "is-src-key": false,
                                "converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/lag']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-equipment:/network/network-element/lag",
                            "is-global": false,
                            "ne-id-field-name": "ne-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/lag']/full-resync-search-by-fields[step='ietf-sap-ntw:sap']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:sap",
                                "expression": "interface-type='ietf-sap-ntw:lag'",
                                "expression-converter-ref": ""
                              }
                            ],
                            "fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-equipment:/network/network-element/lag']/fields[dest-attribute=''][src-attribute='members']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "dest-attribute": "",
                                "src-attribute": "members",
                                "is-key": false,
                                "is-src-key": false,
                                "converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/eline/endpoint']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/service-layer/eline/endpoint",
                            "is-global": false,
                            "ne-id-field-name": "site-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/eline/endpoint']/full-resync-search-by-fields[step='ietf-sap-ntw:sap']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:sap",
                                "expression": "interface-type='ietf-sap-ntw:logical'",
                                "expression-converter-ref": ""
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/eline/endpoint']/full-resync-search-by-fields[step='ietf-sap-ntw:service']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:service",
                                "expression": "service-type='ietf-vpn-common:vpws'",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/eline/endpoint/ipservice-endpoint-detail']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/service-layer/eline/endpoint/ipservice-endpoint-detail",
                            "is-global": false,
                            "ne-id-from-identifier-parser-ref": "ibsf.ietf.sap.neId.fromEpFdn.converter",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/elan/endpoint']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/service-layer/elan/endpoint",
                            "is-global": false,
                            "ne-id-field-name": "site-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/elan/endpoint']/full-resync-search-by-fields[step='ietf-sap-ntw:sap']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:sap",
                                "expression": "interface-type='ietf-sap-ntw:logical'",
                                "expression-converter-ref": ""
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/elan/endpoint']/full-resync-search-by-fields[step='ietf-sap-ntw:service']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:service",
                                "expression": "service-type='ietf-vpn-common:vpls'",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/elan/endpoint/ipservice-endpoint-detail']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/service-layer/elan/endpoint/ipservice-endpoint-detail",
                            "is-global": false,
                            "ne-id-from-identifier-parser-ref": "ibsf.ietf.sap.neId.fromEpFdn.converter",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/l3vpn/endpoint']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/service-layer/l3vpn/endpoint",
                            "is-global": false,
                            "ne-id-field-name": "site-id",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": true,
                            "support-deletion": true,
                            "tracking-fields": [],
                            "full-resync-search-by-fields": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/l3vpn/endpoint']/full-resync-search-by-fields[step='ietf-sap-ntw:sap']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:sap",
                                "expression": "interface-type='ietf-sap-ntw:logical'",
                                "expression-converter-ref": ""
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes/full-resync-search-by-fields",
                                  "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/l3vpn/endpoint']/full-resync-search-by-fields[step='ietf-sap-ntw:service']",
                                  "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                                  "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                                },
                                "step": "ietf-sap-ntw:service",
                                "expression": "service-type='ietf-vpn-common:l3vpn'",
                                "expression-converter-ref": ""
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes/src-classes",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/sync-classes[dest-class-path='ietf-network:/networks/network/node/ietf-sap-ntw:service/sap']/src-classes[src-class-path='nsp-service:/services/service-layer/l3vpn/endpoint/ipservice-endpoint-detail']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "src-class-path": "nsp-service:/services/service-layer/l3vpn/endpoint/ipservice-endpoint-detail",
                            "is-global": false,
                            "ne-id-from-identifier-parser-ref": "ibsf.ietf.sap.neId.fromEpFdn.converter",
                            "custom-handler-ref": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                            "is-resync": false,
                            "support-deletion": false,
                            "tracking-fields": []
                          }
                        ]
                      }
                    ],
                    "nsp-module-set": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/nsp-module-set",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/nsp-module-set[name='service']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "name": "service"
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/nsp-module-set",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/nsp-module-set[name='equipment']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "name": "equipment"
                      }
                    ],
                    "java-script": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/java-script",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/java-script[script-id='port-details.neId.parser']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "script-id": "port-details.neId.parser",
                        "body": "function convert(aInSrcObj,prop,id){    var neId=id.replace(/.*ne-id\\=\\'/,'').replace(/'.*/,'');    /*print(neId);*/    return(neId);  } ",
                        "version": "1.0.0",
                        "java-interface": "com.nokia.nsp.md.converter.yang.plugin.common.IValueConverter"
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/java-script",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/java-script[script-id='ibsf.ietf.sap.neId.fromEpFdn.converter']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "script-id": "ibsf.ietf.sap.neId.fromEpFdn.converter",
                        "body": "function convert(aInSrcObj,prop,id){    var neId=id.replace(/.*endpoint-id\\=\\'/,'').replace(/-.*/,'');    /*print(neId);*/    return(neId);  } ",
                        "version": "2304.0.0",
                        "java-interface": "com.nokia.nsp.md.converter.yang.plugin.common.IValueConverter"
                      }
                    ],
                    "delete-object-filter": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/delete-object-filter",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/delete-object-filter[java-class-path='com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "java-class-path": "com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter",
                        "version": "1.0.1",
                        "java-code": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/delete-object-filter/java-code",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/delete-object-filter[java-class-path='com.nokia.nsp.md.converter.yang.plugin.IetfTopologyDeleteObjectFilter']/java-code[page-number='1']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "page-number": 1,
                            "page": "package com.nokia.nsp.md.converter.yang.plugin;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.nokia.nsp.md.common.IYangObject;\nimport com.nokia.nsp.md.common.YangObject;\nimport com.nokia.nsp.md.converter.api.IMdConverterFw;\nimport com.nokia.nsp.md.converter.yang.plugin.common.IDeleteObjectFilter;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SrcClass;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SyncClass;\nimport com.nokia.nsp.md.db.yang.api.ExecutionContext;\nimport com.nokia.nsp.md.db.yang.api.QueryParameters;\nimport com.nokia.nspos.persistence.yang.api.IYangDB;\nimport org.apache.commons.lang.StringUtils;\nimport com.nokia.nspos.model.domain.service.types.EndpointType;\nimport com.nokia.nspos.model.domain.service.types.Layer;\nimport com.nokia.nspos.model.domain.service.types.ServiceType;\nimport com.nokia.nspos.model.domain.service.types.Direction;\nimport com.nokia.nspos.persistence.api.IDB;\nimport com.nokia.nspos.persistence.impl.db.transaction.DBRuntimeException;\nimport com.nokia.nspos.persistence.impl.db.transaction.ITransactionContext;\nimport com.nokia.nspos.persistence.impl.db.transaction.Transactor;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\n\npublic class IetfTopologyDeleteObjectFilter implements IDeleteObjectFilter\n{\n    private static final org.slf4j.Logger canDeleteObjectLogger = org.slf4j.LoggerFactory.getLogger(IetfTopologyDeleteObjectFilter.class.getName() + \".canDeleteObject\");\n\n    private static final String NSP_NE_CLASS_PATH = \"nsp-equipment:/network/network-element\";\n    private static final String NSP_PORT_CLASS_PATH = \"nsp-equipment:/network/network-element/hardware-component/port\";\n    private static final String NSP_PORT_DETAILS_CLASS_PATH = \"nsp-equipment:/network/network-element/hardware-component/port/port-details\";\n    private static final String NSP_LAG_CLASS_PATH = \"nsp-equipment:/network/network-element/lag\";\n    private static final String NSP_ELINE_ENDPOINT_CLASS_PATH = \"nsp-service:/services/service-layer/eline/endpoint\";\n    private static final String NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH = \"nsp-service:/services/service-layer/eline/endpoint/ipservice-endpoint-detail\";\n    private static final String NSP_ELAN_ENDPOINT_CLASS_PATH = \"nsp-service:/services/service-layer/elan/endpoint\";\n    private static final String NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH = \"nsp-service:/services/service-layer/elan/endpoint/ipservice-endpoint-detail\";\n    private static final String NSP_L3VPN_ENDPOINT_CLASS_PATH = \"nsp-service:/services/service-layer/l3vpn/endpoint\";\n    private static final String NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH = \"nsp-service:/services/service-layer/l3vpn/endpoint/ipservice-endpoint-detail\";\n\n    private static final String IETF_VPN_COMMON_VPWS = \"ietf-vpn-common:vpws\";\n    private static final String IETF_VPN_COMMON_VPLS = \"ietf-vpn-common:vpls\";\n    private static final String IETF_VPN_COMMON_L3VPN = \"ietf-vpn-common:l3vpn\";\n\n    private static final String IETF_NETWORK_CLASS_PATH = \"ietf-network:/networks/network\";\n    private static final String IETF_NODE_CLASS_PATH = \"ietf-network:/networks/network/node\";\n    private static final String IETF_SAP_CLASS_PATH = \"ietf-network:/networks/network/node/ietf-sap-ntw:service/sap\";\n    private static final String IETF_TP_CLASS_PATH = \"ietf-network:/networks/network/node/ietf-network-topology:termination-point\";\n    private static final String IETF_LINK_CLASS_PATH = \"ietf-network:/networks/network/ietf-network-topology:link\";\n\n    private static final String IETF_NODE_ID_PROP = \"node-id\";\n    private static final String IETF_INTERFACE_TYPE_PROP = \"interface-type\";\n    private static final String IETF_SAP_ID_PROP = \"sap-id\";\n\n    private static final String NSP_NE_YANG_PATH = \"/nsp-equipment:network/network-element[ne-id='%s']\";\n\n    private static final String NSP_SERVICE_IGP_LAYER_PATH = \"/nsp-service:services/igp-layer\";\n    private static final String NSP_SERVICE_ADMIN_DOMAIN_PATH = NSP_SERVICE_IGP_LAYER_PATH + \"/admin-domain[name='%s']\";\n    private static final String NSP_SERVICE_ROUTING_INS_PATH = \"/routing-instance[id='%s']\";\n    private static final String NSP_SERVICE_SUBNET_PATH = \"/subnet[id='%s']\";\n    private static final String NSP_SERVICE_LINK_PATH = NSP_SERVICE_IGP_LAYER_PATH + \"/ip-links[name='%s']\";\n\n    private static final String NETWORK_ID = \"network-id\";\n    private static final String NODE_ID = \"node-id\";\n    private static final String LINK_ID = \"link-id\";\n    private static final String NAME = \"name\";\n\n    private static String IETF_NETWORKS_PATH = \"/ietf-network:networks/network[network-id='%s']\";\n    private static final String NODE_PATH = \"/node[node-id='%s']\";\n    private static final String LINK_PATH = \"/ietf-network-topology:link[link-id='%s']\";\n    private static final String TP_PATH = \"/ietf-network-topology:termination-point[tp-id='%s']\";\n    public static final boolean TE_TOPOLOGY_ENABLED = true;\n\n    private List<String> ietfL3SrcClasses = new ArrayList<>(Arrays.asList(\n            \"nsp-service:/services/igp-layer/admin-domain\",\n            \"nsp-service:/services/igp-layer/admin-domain/routing-instance\",\n            \"nsp-service:/services/igp-layer/admin-domain/subnet\",\n            \"nsp-service:/services/igp-layer/ip-links\"\n    ));\n\n    private enum IetfInterfaceType\n    {\n        PHY(\"ietf-sap-ntw:phy\"),\n        LOOPBACK(\"ietf-sap-ntw:loopback\"),\n        LAG(\"ietf-sap-ntw:lag\"),\n        IRB(\"ietf-sap-ntw:irb\"),\n        LOCAL_BRIDGE(\"ietf-sap-ntw:local-bridge\"),\n        LOGICAL(\"ietf-sap-ntw:logical\");\n\n        public String value;\n        private IetfInterfaceType(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    @Override\n    public boolean canDeleteObjectOnUnmanageNe(IYangObject aInIYangObject, SyncClass aInSyncClass, IMdConverterFw aInMdConverterFw)\n    {\n        String instanceIdentifier = aInIYangObject.getIdentifier();\n\n        if(instanceIdentifier.contains(\"network-id='SAPTopology'\") || instanceIdentifier.contains(\"network-id='L2Topology'\"))\n        {\n            return true;\n        }\n        else\n        {\n            // do L3Topology stuff\n            return false;\n        }\n\n    }\n\n    @Override\n    public boolean canDeleteObject(IYangObject aInIYangObject, SyncClass aInSyncClass, SrcClass aInSrcClass, IMdConverterFw aInMdConverterFw)\n    {\n        canDeleteObjectLogger.debug(\"********** canDeleteObject - aInSrcClass:{}, aInSyncClass:{}, aInIYangObject:{}\", aInSrcClass, aInSyncClass, aInIYangObject);\n\n        String instanceIdentifier = aInIYangObject.getIdentifier();\n\n        if(instanceIdentifier.contains(\"network-id='SAPTopology'\"))\n        {\n            return canDeleteSAPTopologyObject(aInIYangObject, aInSyncClass, aInSrcClass, aInMdConverterFw);\n        }\n        else if(instanceIdentifier.contains(\"network-id='L2Topology'\"))\n        {\n            return canDeleteL2TopologyObject(aInIYangObject, aInSyncClass, aInSrcClass, aInMdConverterFw);\n        }\n        else\n        {\n            // do L3 & TE Topology stuff\n            return canDeleteL3TopologyObject(aInIYangObject, aInSyncClass, aInSrcClass, aInMdConverterFw);\n        }\n\n    }\n\n    private boolean canDeleteSAPTopologyObject(IYangObject aInIYangObject, SyncClass aInSyncClass, SrcClass aInSrcClass, IMdConverterFw aInMdConverterFw)\n    {\n        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        String lDestClassPath = aInSyncClass.getDestClassPath();\n        String lSrcClassPath = aInSrcClass.getSrcClassPath();\n\n        if (NSP_PORT_DETAILS_CLASS_PATH.equals(lSrcClassPath) ||\n                NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(lSrcClassPath) ||\n                NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(lSrcClassPath) ||\n                NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(lSrcClassPath))\n        {\n            // Code should not reach here. FW should not call this.\n            canDeleteObjectLogger.debug(\"<><><><><><><><><><> Code should not reach here. canDeleteObject called for srcClassPath: {}\", lSrcClassPath);\n            return false;\n        }\n\n        if(IETF_NETWORK_CLASS_PATH.equals(lDestClassPath))\n        {\n            return false; // We don't delete the IETF SAP topology network root object ever\n        }\n        else if(IETF_NODE_CLASS_PATH.equals(lDestClassPath))\n        {\n            String neId = aInIYangObject.getProperty(IETF_NODE_ID_PROP);\n\n            if (!yangDB.exists(String.format(NSP_NE_YANG_PATH, neId)))\n            {\n                return true; // if NSP no longer has this NE, delete it from IETF SAP topology\n            }\n        }\n        else if(IETF_SAP_CLASS_PATH.equals(lDestClassPath))\n        {\n            //String neId = StringUtils.substringBetween(aInIYangObject.getIdentifier(), \"[node-id='\", \"']\");\n            String serviceType = StringUtils.substringBetween(aInIYangObject.getIdentifier(), \"[service-type='\", \"']\");\n\n            String sapInterfaceType = aInIYangObject.getProperty(IETF_INTERFACE_TYPE_PROP);\n            String sapId = aInIYangObject.getProperty(IETF_SAP_ID_PROP);\n\n            /*\n            The following complicated if-else conditions are required to prevent querying the DB using yangDB.exists() unnecessarily\n            since this code will be hit for EVERY combination of lDestClassPath (all IETF SAPs) and lSrcClassPath (every port/LAG/SvcEndpoints).\n            See IetfSapTopology.json mapping file entry for  \"destClassPath\": \"ietf-network:/networks/network/node/ietf-sap-ntw:service/sap\"\n            For examples,\n            lDestClassPath could be that of a SAP that corresponds to a LAG and lSrcClassPath could be that of a port\n            lDestClassPath could be that of a SAP that corresponds to an ELINE endpoint and lSrcClassPath could be that of a L3VPN endpoint\n             */\n\n            if (IetfInterfaceType.PHY.value.equals(sapInterfaceType) && NSP_PORT_CLASS_PATH.equals(lSrcClassPath))\n            {\n                //if(!yangDB.exists(String.format(NSP_PORT_YANG_PATH, neId, aInIYangObject.getProperty(IETF_SAP_ID_PROP))))\n                if(!yangDB.exists(sapId))\n                {\n                    return true; // delete this SAP if NSP no longer has this port\n                }\n            }\n            else if (IetfInterfaceType.LAG.value.equals(sapInterfaceType) && NSP_LAG_CLASS_PATH.equals(lSrcClassPath))\n            {\n                //if(!yangDB.exists(String.format(NSP_LAG_YANG_PATH, neId, aInIYangObject.getProperty(IETF_SAP_ID_PROP))))\n                if(!yangDB.exists(sapId))\n                {\n                    return true; // delete this SAP if NSP no longer has this LAG\n                }\n            }\n            else if (IetfInterfaceType.LOGICAL.value.equals(sapInterfaceType))\n            {\n                if(\n                    (IETF_VPN_COMMON_VPWS.equals(serviceType) && NSP_ELINE_ENDPOINT_CLASS_PATH.equals(lSrcClassPath)) ||\n                        (IETF_VPN_COMMON_VPLS.equals(serviceType) && NSP_ELAN_ENDPOINT_CLASS_PATH.equals(lSrcClassPath)) ||\n                        (IETF_VPN_COMMON_L3VPN.equals(serviceType) && NSP_L3VPN_ENDPOINT_CLASS_PATH.equals(lSrcClassPath))\n                )\n                {\n                    if(!yangDB.exists(sapId))\n                    {\n                        return true; // delete this SAP if NSP no longer has this ELINE/ELAN/L3VPN endpoint\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n\n    private boolean canDeleteL2TopologyObject (IYangObject aInIYangObject, SyncClass aInSyncClass, SrcClass aInSrcClass, IMdConverterFw aInMdConverterFw) {\n\n        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n        String srcClassPath = aInSrcClass.getSrcClassPath();\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_NETWORK_CLASS_PATH: {\n                return false;\n            }\n            case IETF_NODE_CLASS_PATH: {\n                return canDeleteL2Node(aInIYangObject.get(\"node-id\").toString(), yangDB);\n            }\n            case IETF_TP_CLASS_PATH: {\n                if (srcClassPath.equals(NSP_PORT_DETAILS_CLASS_PATH) ||\n                    srcClassPath.equals(NSP_PORT_CLASS_PATH) ||\n                    srcClassPath.equals(NSP_LAG_CLASS_PATH)) {\n                    return false;\n                }\n                return canDeleteL2Tp(\n                        aInIYangObject.getIdentifier(),\n                        (boolean)((YangObject) aInIYangObject.get(\"ietf-l2-topology:l2-termination-point-attributes\")).get(\"lag\"),\n                        yangDB);\n            }\n            case IETF_LINK_CLASS_PATH: {\n                return canDeleteL2Link(((YangObject) aInIYangObject.get(\"source\")).get(\"source-tp\"),\n                                       ((YangObject) aInIYangObject.get(\"destination\")).get(\"dest-tp\"), yangDB);\n            }\n            default:\n                return false;\n        }\n    }\n\n    /*\n     L2 node cannot be deleted if node-id correspond to one of two nsp endpoints of the same service that both are:\n        - of layer \"physical\"\n        - of service type \"cable\" or \"radio-link\"\n        - of endpoint type \"physicalPort\"\n        (valid \"lag\" tp cannot exist with empty member-link-tp list, therefore, no need to look for \"lag\" endpoint type)\n    */\n    private boolean canDeleteL2Node (String nodeId, IYangDB yangDB) {\n        String endpointTableNative = \"service.Endpoint\";\n        String serviceTableNative = \"service.Service\";\n        String subquery = String.format(\"SELECT DISTINCT svc.dbId FROM %s e JOIN %s svc ON e.service_dbId = svc.dbId \"\n                                        + \"WHERE e.siteId=:siteId AND e.type = :endpointType \"\n                                        + \"AND svc.layer=:layer AND svc.type IN :serviceTypes\",\n                                        endpointTableNative, serviceTableNative);\n        String query = String.format(\"SELECT count(*) FROM (SELECT count(e.dbId) FROM %s e \"\n                                     + \"WHERE e.type=:endpointType AND e.service_dbId IN (%s) \"\n                                     + \"GROUP BY e.service_dbId) AS g WHERE g.count = 2\", endpointTableNative, subquery);\n        Object count = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(query)\n                .setParameter(\"siteId\", nodeId)\n                .setParameter(\"endpointType\", EndpointType.physicalPort.getValue())\n                .setParameter(\"layer\", Layer.physical.getValue())\n                .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable.getValue(), ServiceType.radioLink.getValue()))\n                .getSingleResult());\n        return count != null && ((BigInteger) count).longValue() == 0;\n    }\n\n    /*\n     L2 tp cannot be deleted if tp-id/node-id correspond to one of two nsp endpoints of the same service that both are:\n        - of layer \"physical\"\n        - of service type \"cable\" or \"radio-link\"\n        - of endpoint type \"physicalPort\" or \"lag\"\n    */\n    private boolean canDeleteL2Tp (String tpPath, boolean isLagTp, IYangDB yangDB) {\n        int endpointType = isLagTp ? EndpointType.lag.getValue() : EndpointType.physicalPort.getValue();\n        String nodeId = getNodeIdFromTpPath(tpPath);\n        String tpId = getTpIdFromTpPath(tpPath);\n        String endpointTableNative = \"service.Endpoint\";\n        String serviceTableNative = \"service.Service\";\n        String subquery = String.format(\"SELECT DISTINCT svc.dbId FROM %s e JOIN %s svc ON e.service_dbId = svc.dbId \"\n                                        + (isLagTp ? \"JOIN service.Service_objectDetails sod ON (sod.dbId = svc.dbId AND sod.objectDetails_key = 'linkType') \" : \"\") //linkType is not set on manual lag links\n                                        + \"WHERE e.id=:endpointId AND e.siteId=:siteId AND e.type = :endpointType \"\n                                        + \"AND svc.layer=:layer AND svc.type IN :serviceTypes\",\n                                        endpointTableNative, serviceTableNative);\n        String query = String.format(\"SELECT count(*) FROM (SELECT count(e.dbId) FROM %s e \"\n                                     + \"WHERE e.type=:endpointType AND e.service_dbId IN (%s) \"\n                                     + \"GROUP BY e.service_dbId) AS g WHERE g.count = 2\", endpointTableNative, subquery);\n        Object count = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(query)\n                .setParameter(\"endpointId\", tpId)\n                .setParameter(\"siteId\", nodeId)\n                .setParameter(\"endpointType\", endpointType)\n                .setParameter(\"layer\", Layer.physical.getValue())\n                .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable.getValue(), ServiceType.radioLink.getValue()))\n                .getSingleResult());\n        return count != null && ((BigInteger) count).longValue() == 0;\n    }\n\n    /*\n     L2 link cannot be deleted if there exist two nsp endpoints of the same service that both are:\n        - of layer \"physical\"\n        - of service type \"cable\" or \"radio-link\"\n        - of endpoint type \"physicalPort\"\n        - source tp-id/node-id correspond to \"isSource\" endpoint (or switch source and dest for bi-directional link)\n        - destination tp-id/node-id correspond to \"isTarget\" endpoint\n    */\n    private boolean canDeleteL2Link (Object sourceTpPath, Object destTpPath, IYangDB yangDB) {\n        if (sourceTpPath != null && destTpPath != null) {\n            String sourceTpId = getTpIdFromTpPath(sourceTpPath.toString());\n            String sourceNodeId = getNodeIdFromTpPath(sourceTpPath.toString());\n            String destTpId = getTpIdFromTpPath(destTpPath.toString());\n            String destNodeId = getNodeIdFromTpPath(destTpPath.toString());\n            boolean canDelete = runCanDeleteLink(sourceTpId, sourceNodeId, destTpId, destNodeId, false, yangDB);\n            if(canDelete) {\n                canDelete = runCanDeleteLink(destTpId, destNodeId, sourceTpId, sourceNodeId,true, yangDB);\n            }\n            return canDelete;\n        }\n        return true;\n    }\n\n    private boolean runCanDeleteLink (String sourceTpId, String sourceNodeId, String destTpId, String destNodeId,\n                                      boolean shouldIncludeDirection, IYangDB yangDB) {\n        String endpointTable = \"service_Endpoint\";\n        String subquery = String.format(\"SELECT svc FROM %s e JOIN e.service svc \"\n                                        + \"JOIN e.objectDetails eod ON (KEY(eod) = :objectDetailsSource) \"\n                                        + \"WHERE e.id=:endpointIdSource AND e.siteId=:siteIdSource \"\n                                        + \"AND e.type=:endpointType AND svc.layer=:layer \"\n                                        + (shouldIncludeDirection ? \"AND svc.direction=:direction \" : \"\")\n                                        + \"AND svc.type IN :serviceTypes\", endpointTable);\n        String query = String.format(\"SELECT count(e.dbId) FROM %s e \"\n                                     + \"JOIN e.objectDetails eod ON (KEY(eod) = :objectDetailsTarget) \"\n                                     + \"WHERE e.id=:endpointIdTarget AND e.siteId=:siteIdTarget \"\n                                     + \"AND e.type = :endpointType AND e.service IN (%s)\",\n                                     endpointTable, subquery);\n        Long count = execute(yangDB.getDb(), tx -> {\n            javax.persistence.Query lQuery = tx.getEntityManager().createQuery(query)\n                    .setParameter(\"objectDetailsSource\", \"isSource\")\n                    .setParameter(\"endpointIdSource\", sourceTpId)\n                    .setParameter(\"siteIdSource\", sourceNodeId)\n                    .setParameter(\"endpointType\", EndpointType.physicalPort)\n                    .setParameter(\"layer\", Layer.physical)\n                    .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable, ServiceType.radioLink))\n                    .setParameter(\"objectDetailsTarget\", \"isTarget\")\n                    .setParameter(\"endpointIdTarget\", destTpId)\n                    .setParameter(\"siteIdTarget\", destNodeId);\n            if(shouldIncludeDirection) {\n                lQuery.setParameter(\"direction\", Direction.biDirectional);\n            }\n            return (Long)lQuery.getSingleResult();\n        });\n        return count != null && count.intValue() == 0;\n    }\n\n    private String getNodeIdFromTpPath(String tpPath) {\n        String nodeIdKey = \"[node-id='\";\n        return tpPath.substring(tpPath.indexOf(nodeIdKey) + nodeIdKey.length(), tpPath.indexOf(\"']/ietf\"));\n    }\n\n    private String getTpIdFromTpPath(String tpPath) {\n        String tpIdKey = \"[tp-id='\";\n        return tpPath.substring(tpPath.indexOf(tpIdKey) + tpIdKey.length(), tpPath.lastIndexOf(\"']\"));\n    }\n\n    private <T> T execute(IDB db, Function<ITransactionContext, T> fn) {\n        try {\n            if (Transactor.isInTransaction()) {\n                return fn.apply(Transactor.getContext());\n            } else {\n                return Transactor.execute(db, fn, true);\n            }\n        } catch (DBRuntimeException e) {\n            return null;\n        }\n    }\n\n    // we are manually deleting L3 objects because we also need to delete corresponding TE objects.\n    private boolean canDeleteL3TopologyObject (IYangObject aInIYangObject, SyncClass aInSyncClass, SrcClass aInSrcClass, IMdConverterFw aInMdConverterFw) {\n        if(!ietfL3SrcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return false;\n        }\n\n        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_NETWORK_CLASS_PATH: {\n                String networkId = (String) aInIYangObject.get(NETWORK_ID);\n                if(networkId.startsWith(\"TE-\")) {\n                    if(canDeleteObjectLogger.isDebugEnabled()) {\n                        canDeleteObjectLogger.debug(\"L3 - can delete - ignoring TE network\");\n                    }\n                    return false;\n                }\n                String[] domainSplit = networkId.split(\"-\");\n                String adminDomain = null;\n                if(domainSplit.length >= 3 && isValidProtocol(domainSplit[2])) { //could be other networks (not a L3 network)\n                    adminDomain = domainSplit[0] + \"-\" + domainSplit[1];\n                    if (yangDB.exists(String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain), qp)) {\n                        return false;\n\n                    } else {\n                        String ietfNetworkIdentifier = aInIYangObject.getIdentifier();\n                        deleteL3Network(yangDB, qp, ietfNetworkIdentifier, networkId);\n                    }\n                }\n                return false;\n            }\n            case IETF_NODE_CLASS_PATH : {\n                String ietfNodeIdentifier = aInIYangObject.getIdentifier();\n                String networkId = extractNetworkIdFromIetfIdentifier(ietfNodeIdentifier);\n                if(networkId.startsWith(\"TE-\")) {\n                    if(canDeleteObjectLogger.isDebugEnabled()) {\n                        canDeleteObjectLogger.debug(\"L3 - can delete - ignoring TE node\");\n                    }\n                    return false;\n                }\n                String[] domainSplit = networkId.split(\"-\");\n                String adminDomain = domainSplit[0] + \"-\" + domainSplit[1];\n                //if the node-id contains psn then its a subnet / otherwise routing instance.\n                String nodeId = (String) aInIYangObject.get(NODE_ID);\n                String nodeIdentifier = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n\n                if(nodeId.contains(\"psn\")) {\n                    String routerId = getSubnetRouterId(nodeId);\n                    nodeIdentifier += String.format(NSP_SERVICE_SUBNET_PATH, routerId);\n                }\n                else {\n                    nodeIdentifier += String.format(NSP_SERVICE_ROUTING_INS_PATH, nodeId);\n                }\n                if(!yangDB.exists(nodeIdentifier, qp)){\n                    deleteL3Node(yangDB, qp, networkId, ietfNodeIdentifier, nodeId);\n                }\n               return false;\n            }\n            case IETF_LINK_CLASS_PATH : {\n                String ietfLinkIdentifier = aInIYangObject.getIdentifier();\n                String networkId = extractNetworkIdFromIetfIdentifier(ietfLinkIdentifier);\n                if(networkId.startsWith(\"TE-\")) {\n                    if(canDeleteObjectLogger.isDebugEnabled()) {\n                        canDeleteObjectLogger.debug(\"L3 - can delete - ignoring TE link\");\n                    }\n                    return false;\n                }\n                //need to get the ietf link attributes object first and get the name and query the nsp-service link object.\n                String ietfLinkAttrIdentifier = ietfLinkIdentifier + \"/ietf-l3-unicast-topology:l3-link-attributes\";\n                IYangObject linkAttrObj = yangDB.getSingle(ietfLinkAttrIdentifier,qp);\n                if(linkAttrObj != null) {\n                    String name = (String) linkAttrObj.get(NAME);\n                    if(yangDB.exists(String.format(NSP_SERVICE_LINK_PATH, name),  qp)) {\n                        return false;\n                    }\n                    else {\n                        //call deleteLink() instead as we have to clean up TPs as well?\n                        String linkId = (String) aInIYangObject.get(LINK_ID);\n                        deleteL3Link(yangDB, qp, networkId, ietfLinkIdentifier, linkId);\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n            default:\n                return true;\n        }\n    }\n\n    private boolean isValidProtocol(String protocol) {\n        return protocol != null && (protocol.equals(\"ospf\") || protocol.equals(\"isis\"));\n    }\n\n    private String extractNetworkIdFromIetfIdentifier(String identifier) {\n        int fromIndex = identifier.indexOf(\"network-id='\");\n        int toIndex = identifier.indexOf(\"'\", fromIndex+12);\n        return identifier.substring(fromIndex + 12, toIndex);\n    }\n\n    String getSubnetRouterId(String aInNodeId) {\n        return aInNodeId.split(\"-psn\")[0];\n    }\n\n    private void deleteL3Network(IYangDB aInYangDB, QueryParameters aInQp, String aInIetfNetworkIdentifier, String aInNetworkId) {\n        canDeleteObjectLogger.debug(\"L3 - Deleting network - can delete : {}\", aInIetfNetworkIdentifier);\n        aInYangDB.delete(aInIetfNetworkIdentifier, aInQp);\n        if(TE_TOPOLOGY_ENABLED) {\n            String teNetworkId = getTeNetworkId(aInNetworkId);\n            canDeleteObjectLogger.debug(\"L3 - Deleting network - can delete : {}\", teNetworkId);\n            aInYangDB.delete(String.format(IETF_NETWORKS_PATH, teNetworkId), aInQp);\n        }\n    }\n\n    private void deleteL3Node(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodePathIdentifier, String nodeId ) {\n        canDeleteObjectLogger.debug(\"L3 - Deleting node - can delete : {}\", aInNodePathIdentifier);\n        aInYangDB.delete(aInNodePathIdentifier, aInQp);\n        if(TE_TOPOLOGY_ENABLED) {\n            String teNodePathIdentfier = String.format(IETF_NETWORKS_PATH, getTeNetworkId(aInNetworkId)) + String.format(NODE_PATH, nodeId);\n            if (aInYangDB.exists(teNodePathIdentfier, aInQp)) {\n                canDeleteObjectLogger.debug(\"L3 - Deleting node - can delete {}\", teNodePathIdentfier);\n                aInYangDB.delete(teNodePathIdentfier, aInQp);\n            }\n        }\n    }\n\n    private void deleteL3Link(IYangDB aInYangDB, QueryParameters aInQp,String aInNetworkId, String aInLinkIdentifier, String aInLinkId) {\n\n        canDeleteObjectLogger.debug(\"L3 - Deleting link - can delete : {}\", aInLinkIdentifier);\n        aInYangDB.delete(aInLinkIdentifier, aInQp);\n\n        String teNetworkPathIdentifier = String.format(IETF_NETWORKS_PATH, getTeNetworkId(aInNetworkId));\n        //delete TE link\n        if(TE_TOPOLOGY_ENABLED) {\n            String teLinkPathIdentifier = teNetworkPathIdentifier + String.format(LINK_PATH, aInLinkId);\n            canDeleteObjectLogger.debug(\"L3 - Deleting link - can delete : {}\", teLinkPathIdentifier);\n            aInYangDB.delete(teLinkPathIdentifier, aInQp);\n        }\n        //can delete source tp and destination tp?\n        String oppLinkId = getOppIetfLinkId(aInLinkId);\n        String networkPathIdentifier = String.format(IETF_NETWORKS_PATH, aInNetworkId);\n        String oppLinkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, oppLinkId);\n        if (!aInYangDB.exists(oppLinkPathIdentifier, aInQp)) {\n            // no other link is using the same source and destination. delete the TPs.\n            List<String> linkObjIds = getLinkObjIds(aInLinkId);\n            String srcNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(0));\n            String srcNodeTPIdentifier = srcNodeIdentifier + String.format(TP_PATH, linkObjIds.get(1));\n            if(canDeleteTp(aInYangDB, \"%\" + linkObjIds.get(0) + \":\" + linkObjIds.get(1) + \"%\", aInNetworkId)) {\n                deleteL3TerminationPoint(aInYangDB, aInQp, srcNodeIdentifier, srcNodeTPIdentifier);\n\n                // delete TE src termination point\n                if (TE_TOPOLOGY_ENABLED) {\n                    String teSrcNodeIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(0));\n                    String teSrcNodeTPIdentifier = teSrcNodeIdentifier + String.format(TP_PATH, linkObjIds.get(1));\n                    deleteL3TerminationPoint(aInYangDB, aInQp, teSrcNodeIdentifier, teSrcNodeTPIdentifier);\n                }\n            }\n\n            String dstNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(2));\n            String dstNodeTPIdentifier = dstNodeIdentifier + String.format(TP_PATH, linkObjIds.get(3));\n            if(canDeleteTp(aInYangDB, \"%\" + linkObjIds.get(2) + \":\" + linkObjIds.get(3) + \"%\", aInNetworkId)) {\n                deleteL3TerminationPoint(aInYangDB, aInQp, dstNodeIdentifier, dstNodeTPIdentifier);\n\n                // delete TE dst termination point\n                if (TE_TOPOLOGY_ENABLED) {\n                    String teDstNodeIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(2));\n                    String teDstNodeTPIdentifier = teDstNodeIdentifier + String.format(TP_PATH, linkObjIds.get(3));\n                    deleteL3TerminationPoint(aInYangDB, aInQp, teDstNodeIdentifier, teDstNodeTPIdentifier);\n                }\n            }\n        }\n    }\n\n    private void deleteL3TerminationPoint(IYangDB aInYangDB, QueryParameters aInQp, String aInSrcNodeIdentifier, String aInSrcNodeTPIdentifier) {\n        if(aInYangDB.exists(aInSrcNodeIdentifier, aInQp)) {\n            canDeleteObjectLogger.debug(\"L3 - Deleting TP - can delete : {}\", aInSrcNodeTPIdentifier);\n            aInYangDB.delete(aInSrcNodeTPIdentifier, aInQp);\n        }\n    }\n\n    private String getTeNetworkId(String networkId) {\n        return \"TE-\"+networkId;\n    }\n\n    private String getOppIetfLinkId(String aInLinkId) {\n        String[] idSplits = aInLinkId.split(\"--\");\n        String oppLinkId = idSplits[1] + \"--\" + idSplits[0];\n        oppLinkId += (idSplits.length == 3) ? \"--\" + idSplits[2] : \"\";\n        return  oppLinkId;\n    }\n\n    private List<String> getLinkObjIds(String aInLinkId) {\n        String[] idSplits = aInLinkId.split(\"--\");\n        String[] srcNodeSplits = idSplits[0].split(\":\");\n        String[] dstNodeSplits = idSplits[1].split(\":\");\n        List<String> linkObjIds = new ArrayList<>();\n        linkObjIds.add(srcNodeSplits[0]);\n        linkObjIds.add(srcNodeSplits[1]);\n        linkObjIds.add(dstNodeSplits[0]);\n        linkObjIds.add(dstNodeSplits[1]);\n        return linkObjIds;\n    }\n\n    private boolean canDeleteTp(IYangDB aInYangDb, String aInPattern, String aInNetworkId) {\n        BigInteger count = (BigInteger) execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT count(*) FROM \" +\n                        \"ietf.ietf_network_networks_network_ietf_network_topology_link sl WHERE sl.linkId LIKE :pattern \" +\n                        \"AND sl.networkId = :networkId\")\n                .setParameter(\"pattern\", aInPattern)\n                .setParameter(\"networkId\", aInNetworkId)\n                .getSingleResult());\n        return count != null && count.longValue() == 0;\n    }\n}\n"
                          }
                        ]
                      }
                    ],
                    "custom-handler": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "java-class-path": "com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler",
                        "version": "1.0.1",
                        "java-code": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler/java-code",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L2TopologyHandler']/java-code[page-number='1']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "page-number": 1,
                            "page": "package com.nokia.nsp.md.converter.yang.plugin;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.nokia.nsp.md.common.notif.ObjectCreation;\nimport com.nokia.nsp.md.common.notif.ObjectDeletion;\nimport com.nokia.nsp.md.common.notif.ObjectModification;\nimport com.nokia.nsp.md.common.notif.ObjectReplacement;\nimport com.nokia.nsp.md.converter.api.IMdConverterFw;\nimport com.nokia.nsp.md.converter.yang.plugin.common.ICustomHandler;\nimport com.nokia.nsp.md.converter.yang.plugin.common.IHandleDeleteTracking;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SrcClass;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SyncClass;\n\nimport com.nokia.nsp.md.db.yang.api.QueryParameters;\nimport com.nokia.nsp.md.common.IYangObject;\nimport com.nokia.nsp.md.common.YangObject;\nimport com.nokia.nsp.md.db.yang.api.ExecutionContext;\nimport com.nokia.nsp.md.ifg.yang.api.Fields;\nimport com.nokia.nspos.persistence.impl.db.transaction.DBRuntimeException;\nimport com.nokia.nspos.persistence.yang.api.IYangDB;\n\nimport com.nokia.nspos.persistence.impl.db.transaction.ITransactionContext;\nimport com.nokia.nspos.persistence.impl.db.transaction.Transactor;\nimport com.nokia.nspos.persistence.api.IDB;\n\nimport com.nokia.nspos.model.domain.service.types.Layer;\nimport com.nokia.nspos.model.domain.service.types.ServiceType;\nimport com.nokia.nspos.model.domain.service.types.EndpointType;\nimport com.nokia.nspos.model.domain.service.types.Direction;\n\nimport org.apache.commons.lang.StringUtils;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\n\npublic class L2TopologyHandler implements ICustomHandler, IHandleDeleteTracking\n{\n    private static final org.slf4j.Logger handleResyncLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleResync\");\n    private static final org.slf4j.Logger handlePostResyncDeleteLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".postResyncDelete\");\n    private static final org.slf4j.Logger handleCreateEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleCreateEvent\");\n    private static final org.slf4j.Logger handleUpdateEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleUpdateEvent\");\n    private static final org.slf4j.Logger handleReplaceEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleReplaceEvent\");\n    private static final org.slf4j.Logger handleDeleteEventLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleDeleteEvent\");\n    private static final org.slf4j.Logger handleNodeLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleNode\");\n    private static final org.slf4j.Logger handleTpLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleTp\");\n    private static final org.slf4j.Logger handlePortLagLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handlePortLag\");\n    private static final org.slf4j.Logger handleLinkLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleLink\");\n    private static final org.slf4j.Logger dataBaseAccessLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".dataBaseAccess\");\n    private static final org.slf4j.Logger handleTrackedDeleteLogger = org.slf4j.LoggerFactory.getLogger(L2TopologyHandler.class.getName() + \".handleTrackedDelete\");\n\n    private static final String IETF_L2_NETWORK_ID = \"L2Topology\";\n    private static final String IETF_L2_NETWORK_PATH = String.format(\"/ietf-network:networks/network[network-id='%s']\", IETF_L2_NETWORK_ID);\n    private static final String IETF_L2_NODE_PATH = IETF_L2_NETWORK_PATH + \"/node[node-id='%s']\";\n    private static final String IETF_L2_TP_PATH = IETF_L2_NODE_PATH + \"/ietf-network-topology:termination-point[tp-id='%s']\";\n    private static final String IETF_L2_LINK_PATH = IETF_L2_NETWORK_PATH + \"/ietf-network-topology:link[link-id='%s']\";\n    private static final String IETF_NODE_TYPE = \"node\";\n    private static final String IETF_TP_TYPE = \"ietf-network-topology:termination-point\";\n    private static final String IETF_LINK_TYPE = \"ietf-network-topology:link\";\n\n    private static final String IETF_NETWORK_CLASS = \"ietf-network:/networks/network\";\n    private static final String IETF_NODE_CLASS = IETF_NETWORK_CLASS + \"/\" + IETF_NODE_TYPE;\n    private static final String IETF_TP_CLASS = IETF_NODE_CLASS + \"/\" + IETF_TP_TYPE;\n    private static final String IETF_LINK_CLASS = IETF_NETWORK_CLASS + \"/\" + IETF_LINK_TYPE;\n\n    private static final String NSP_SERVICE_CABLE_CLASS = \"nsp-service:/services/physical-layer/cable\";\n    private static final String NSP_ENDPOINT_CABLE_CLASS = \"nsp-service:/services/physical-layer/cable/link-endpoint\";\n    private static final String NSP_SERVICE_RADIO_CLASS = \"nsp-service:/services/physical-layer/radio-link\";\n    private static final String NSP_ENDPOINT_RADIO_CLASS = \"nsp-service:/services/physical-layer/radio-link/link-endpoint\";\n    private static final String NSP_EQUIPMENT_PORT_CLASS = \"nsp-equipment:/network/network-element/hardware-component/port\";\n    private static final String NSP_EQUIPMENT_PORT_DETAILS_CLASS = \"nsp-equipment:/network/network-element/hardware-component/port/port-details\";\n    private static final String NSP_EQUIPMENT_LAG_CLASS = \"nsp-equipment:/network/network-element/lag\";\n\n    private static final String NSP_SERVICE_PATH = \"/nsp-service:services/physical-layer/%s[id='%s']\";\n    private static final String NSP_ENDPOINT_PATH = \"/nsp-service:services/physical-layer/%s[id='%s']/link-endpoint[site-id='%s'][endpoint-id='%s']\";\n    private static final String nokia_nsp_network_management_ELEMENT_PATH = \"/nsp-equipment:network/network-element[ne-id='%s']\";\n\n    private static final String NSP_ENDPOINT_TABLE = \"service_Endpoint\";\n    private static final String NSP_SERVICE_TABLE = \"service_Service\";\n    private static final Layer NSP_L2_LAYER = Layer.physical;\n    private static final Set<ServiceType> NSP_L2_SERVICE_TYPES = ImmutableSet.of(ServiceType.cable, ServiceType.radioLink);\n\n    private static final String IETF_MEMBER_LINK_TP_TABLE = \"ietf.ietf_204762653l2_termination_point_attributes_member_link_tp\";\n    private static final String IETF_LINK_NSP_ATTR_TABLE = \"ietf.ietf_19924911ibutes_nsp_ietf_network_topology_nsp_attributes\";\n    private static final String IETF_TP_NSP_ATTR_TABLE = \"ietf.ietf_48789230ibutes_nsp_ietf_network_topology_nsp_attributes\";\n\n    public static final Fields nokia_nsp_network_management_ELEMENT_READ_FIELDS = Fields.parse(\"ne-name;mac-address;ip-address\");\n    public static final Fields NSP_ENDPOINT_READ_FIELDS = Fields.parse(\"endpoint-id;site-id;type;port-bindings/resource\");\n    public static final Fields NSP_SERVICE_READ_FIELDS = Fields.parse(\"link-endpoint(endpoint-id;site-id;type;port-bindings/resource);id;name;latency;direction\");\n    public static final Fields NSP_SERVICE_READ_FIELDS_REDUCED = Fields.parse(\"name;latency\");\n    public static final Fields NSP_PORT_READ_FIELDS_FOR_TP = Fields.parse(\"name;ne-id;hw-mac-address;port-details(encap-type;port-index)\");\n    public static final Fields NSP_PORT_READ_FIELDS_FOR_LAG_MEMBER = Fields.parse(\"name\");\n    public static final Fields NSP_PORT_DETAILS_READ_FIELDS_FOR_TP = Fields.parse(\"encap-type;port-index\");\n    public static final Fields NSP_PORT_DETAILS_READ_FIELDS_FOR_LINK = Fields.parse(\"actual-rate;actual-rate-units;operational-duplex;auto-negotiate\");\n    public static final Fields NSP_LAG_READ_FIELDS = Fields.parse(\"name;configured-address;encap-type;lag-index;members\");\n    public static final Fields NSP_LAG_READ_FIELDS_MEMBERS = Fields.parse(\"members\");\n    public static final Fields IETF_LINK_ATTR_READ_FIELDS = Fields.parse(\"name;nsp-ietf-network-topology:nsp-attributes\");\n    public static final Fields IETF_TP_ATTR_READ_FIELDS = Fields.parse(\"nsp-ietf-network-topology:nsp-attributes\");\n    public static final Fields IETF_TP_READ_FIELDS = Fields.parse(\"ietf-l2-topology:l2-termination-point-attributes/nsp-ietf-network-topology:nsp-attributes\");\n    public static final Fields IETF_TP_MEMBERS_READ_FIELDS = Fields.parse(\"ietf-l2-topology:l2-termination-point-attributes/member-link-tp\");\n\n    private enum IetfL2EncapType\n    {\n        ETHERNET(\"ietf-l2-topology:ethernet\"),\n        VLAN(\"ietf-l2-topology:vlan\"),\n        QINQ(\"ietf-l2-topology:qinq\"),\n        PBB(\"ietf-l2-topology:pbb\"),\n        TRILL(\"ietf-l2-topology:trill\"),\n        VPLS(\"ietf-l2-topology:vpls\"),\n        VXLAN(\"ietf-l2-topology:vxlan\");\n\n        public final String value;\n        private IetfL2EncapType(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private enum IetfDuplexMode\n    {\n        FULL(\"full-duplex\"),\n        HALF(\"half-duplex\");\n\n        public final String value;\n        private IetfDuplexMode(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private static final Pattern MAC_ADDRESS_PATTERN = Pattern.compile(\"[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}\");\n    private static final Pattern RAW_MAC_ADDRESS_PATTERN = Pattern.compile(\"[0-9a-fA-F]{12}\");\n\n\n    @Override\n    public void handlePostResyncDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handlePostResyncDeleteLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId);\n    }\n\n    @Override\n    public int readSrcObjectDepth(String aInSrcClassPath)\n    {\n        if(aInSrcClassPath.equals(NSP_ENDPOINT_CABLE_CLASS)\n           || aInSrcClassPath.equals(NSP_ENDPOINT_RADIO_CLASS))\n        {\n            return 3;\n        }\n        else if(aInSrcClassPath.equals(NSP_SERVICE_CABLE_CLASS)\n            || aInSrcClassPath.equals(NSP_SERVICE_RADIO_CLASS))\n        {\n            return 4;\n        }\n        return 2;\n    }\n\n    @Override\n    public Fields srcFilterFieldsToInclude(String aInSrcClassPath)\n    {\n        if(aInSrcClassPath.equals(NSP_ENDPOINT_CABLE_CLASS)\n           || aInSrcClassPath.equals(NSP_ENDPOINT_RADIO_CLASS))\n        {\n            return NSP_ENDPOINT_READ_FIELDS;\n        }\n        else if(aInSrcClassPath.equals(NSP_SERVICE_CABLE_CLASS)\n            || aInSrcClassPath.equals(NSP_SERVICE_RADIO_CLASS))\n        {\n            return NSP_SERVICE_READ_FIELDS;\n        }\n        return null;\n    }\n\n    @Override\n    public void handleTrackedDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, String aInIdentifier, Map<String, Object> aInData,  YangPluginMdConverterProvider aInYangPlugin) {\n        if (handleTrackedDeleteLogger.isDebugEnabled()) {\n            handleTrackedDeleteLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInIdentifier:{}, aInData:{}\", aInSrcClass, aInSyncClass, aInIdentifier, aInData);\n        }\n\n        if(aInSrcClass.getSrcClassPath().equals(NSP_SERVICE_CABLE_CLASS)\n                || aInSrcClass.getSrcClassPath().equals(NSP_SERVICE_RADIO_CLASS)) {\n\n            IYangDB yangDB = aInYangPlugin.getiMdConverterFw().getIYangDB();\n\n            final QueryParameters qp = new QueryParameters();\n            qp.setSuperUser(true);\n            qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n            String linkId = StringUtils.substringBetween(aInIdentifier, \"[id='\", \"'\");\n            IYangObject yangObj = new YangObject();\n            yangObj.setProperty(\"name\", aInData.get(\"name\"));\n            yangObj.setProperty(\"id\", linkId);\n            handleTrackedDeleteLogger.debug(\" L2 tracked deletion for link {}\", linkId);\n            deleteLink(yangObj, yangDB, qp);\n        }\n    }\n\n    @Override\n    public void handleResync(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInExistingObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleResyncLogger.debug(\"aInSrcIdentifier:{}, aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcObject.getIdentifier(), aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId);\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                //don't sync ports and lags, only care for their updates\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    break;\n                }\n                handleResyncLogger.debug(\"TP SYNC\");\n                if(isValidEndpoint(aInSrcObject, yangDB)) {\n                    handleTP(aInSrcObject, yangDB, qp, null);\n                }\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleResyncLogger.debug(\"LINK SYNC\");\n                handleLink(aInSrcObject, false, false, yangDB, qp);\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void handleCreateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectCreation aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleCreateEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId:{}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        IYangObject lSrcObject = aInEvent.getEntity();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                // need to listen for create port/lag as link can be created first in the managing scenario\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS)){\n                    //wait for port-details\n                    break;\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS)){\n                    handleCreateEventLogger.debug(\"PORT DETAILS CREATE\");\n                    String portPath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/port-details\"));\n                    lSrcObject = yangDB.getSingle(portPath, getFilteredQueryParameters(NSP_PORT_READ_FIELDS_FOR_TP) );\n                    handlePortLag(lSrcObject, EndpointType.physicalPort, yangDB, qp);\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    handleCreateEventLogger.debug(\"LAG CREATE\");\n                    handlePortLag(lSrcObject, EndpointType.lag, yangDB, qp);\n                }\n                else {\n                    handleCreateEventLogger.debug(\"TP CREATE\");\n                    if(isValidEndpoint(lSrcObject, yangDB)) {\n                        handleTP(lSrcObject, yangDB, qp, null);\n\n                        //create link on TP event - on target endpoint event only\n                        if (lSrcObject.get(\"type\").toString().equals(\"physical-port\")) {\n                            List<?> nspEpSources = (List<?>) ((YangObject) lSrcObject).getExtraDatas().get(\"sources\");\n                            for (Object epSource : nspEpSources) {\n                                if (epSource.toString().contains(\"@endpointB\")) {\n                                    String servicePath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/link-endpoint[\"));\n                                    IYangObject lLinkSourceObj = getSingleFromYangDb(\n                                            yangDB, servicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n                                    if (lLinkSourceObj != null) {\n                                        handleLink(lLinkSourceObj, false, false, yangDB, qp);\n                                    }\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleCreateEventLogger.debug(\"LINK CREATE\");\n                //link is created on tp event\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void handleUpdateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectModification aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleUpdateEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId:{}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        IYangObject lSrcObject = aInEvent.getEntity();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS)){\n                    handleUpdateEventLogger.debug(\"PORT UPDATE\");\n                    boolean shouldUpdate = false;\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"hw-mac-address\")) {\n                            shouldUpdate = true;\n                            break;\n                        }\n                    }\n                    if(shouldUpdate){\n                        handlePortLag(lSrcObject, EndpointType.physicalPort, yangDB, qp);\n                    }\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS)){\n                    handleUpdateEventLogger.debug(\"PORT DETAILS UPDATE\");\n                    boolean shouldUpdate = false;\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"encap-type\") || change.getName().equals(\"actual-rate\") ||\n                           change.getName().equals(\"operational-duplex\") || change.getName().equals(\"auto-negotiate\")) {\n                            shouldUpdate = true;\n                            break;\n                        }\n                    }\n                    if(shouldUpdate){\n                        String portPath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/port-details\"));\n                        lSrcObject = yangDB.getSingle(portPath, getFilteredQueryParameters(NSP_PORT_READ_FIELDS_FOR_TP));\n                        handlePortLag(lSrcObject, EndpointType.physicalPort, yangDB, qp);\n                    }\n                }\n                else if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    handleUpdateEventLogger.debug(\"LAG UPDATE\");\n                    boolean shouldUpdate = false;\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"encap-type\") || change.getName().equals(\"configured-address\")) {\n                            shouldUpdate = true;\n                            break;\n                        }\n                    }\n                    if(shouldUpdate){\n                        handlePortLag(lSrcObject, EndpointType.lag, yangDB, qp);\n                    }\n                }\n                else {\n                    handleUpdateEventLogger.debug(\"TP UPDATE\");\n                    boolean isManageTypeChange = false;\n                    boolean isLagEndpointObjectDetailsChange = false;\n                    int changesSize = aInEvent.getChanges().size();\n                    for(ObjectModification.Change change : aInEvent.getChanges()) {\n                        if(change.getName().equals(\"type\")){\n                            if(change.getNewValue().toString().equals(EndpointType.physicalPort.getAltName())) {\n                                isManageTypeChange = true;\n                            }\n                            break;\n                        }\n                        // looking for objectDetails update - starting 23.4, aInEvent.getChanges() will have \"last-modified-time\" change\n                        else if(change.getName().equals(\"last-modified-time\")\n                                && lSrcObject.get(\"type\").toString().equals(\"lag\")\n                                && changesSize == 1) {\n                            isLagEndpointObjectDetailsChange = true;\n                            break;\n                        }\n                    }\n                    if(isManageTypeChange || isLagEndpointObjectDetailsChange) {\n                        //on managing ne - link is created on link update event\n                        //but the opposite(already managed) endpoint doesn't get any events - need to handle it to create tp/node\n                        String servicePath = lSrcObject.getIdentifier().substring(0, lSrcObject.getIdentifier().indexOf(\"/link-endpoint[\"));\n                        IYangObject lLinkSourceObj = getSingleFromYangDb(\n                                yangDB, servicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n                        if(lLinkSourceObj != null) {\n                            List<?> endpoints = (List<?>)lLinkSourceObj.get(\"link-endpoint\");\n                            if (endpoints != null && !endpoints.isEmpty()) {\n                                if (isManageTypeChange && isValidLinkEndpoints(endpoints)) {\n                                    handleUpdateEventLogger.debug(\"TP MANAGE CHANGE\");\n                                    endpoints.forEach(endpoint -> handleTP((IYangObject) endpoint, yangDB, qp, null));\n                                }\n                                else if (isLagEndpointObjectDetailsChange && isValidLagEndpoints(endpoints)\n                                         && isValidLinkType(lLinkSourceObj.get(\"id\").toString(), yangDB)) {\n                                    //handle update for lag tps - needed for add/remove member scenario\n                                    handleUpdateEventLogger.debug(\"TP LAG ENDPOINT CHANGE\");\n                                    endpoints.forEach(endpoint -> handleTP((IYangObject) endpoint, yangDB, qp, null));\n                                }\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleUpdateEventLogger.debug(\"LINK UPDATE\");\n                boolean isUnManageChange = false;\n                boolean ignoreUpdate = false;\n                boolean isNameUpdate = false;\n                int changesSize = aInEvent.getChanges().size();\n                for(ObjectModification.Change change : aInEvent.getChanges()) {\n                    if(change.getName().equals(\"name\")){\n                        if(change.getNewValue().toString().contains(\"Unmanaged-Ne\")) {\n                            handleUpdateEventLogger.debug(\"LINK UN-MANAGE CHANGE\");\n                            isUnManageChange = true;\n                        }\n                        else {\n                            //update on any other link name change - needed for nfmp managing scenario\n                            isNameUpdate = true;\n                            ignoreUpdate = false;\n                            break;\n                        }\n                    }\n                    else if(change.getName().equals(\"oper-state\") ||\n                            (change.getName().equals(\"last-modified-time\") && changesSize == 1)){ //todo: other link changes to ignore?\n                        ignoreUpdate = true;\n                    }\n                }\n                if(isUnManageChange) {\n                    deleteLink(lSrcObject, yangDB, qp);\n                }\n                else if (!ignoreUpdate) {\n                    handleLink(lSrcObject, isNameUpdate, false, yangDB, qp);\n                }\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void handleReplaceEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectReplacement aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleReplaceEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n    }\n\n    @Override\n    public void handleDeleteEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectDeletion aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handleDeleteEventLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, aInEventObject:{}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().getIdentifier());\n\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        IYangObject lSrcObject = aInEvent.getEntity();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        switch (aInSyncClass.getDestClassPath()) {\n            case IETF_TP_CLASS: {\n                //don't delete ports and lags, only care for their updates\n                if(aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_PORT_DETAILS_CLASS) ||\n                   aInSrcClass.getSrcClassPath().equals(NSP_EQUIPMENT_LAG_CLASS)){\n                    break;\n                }\n                handleDeleteEventLogger.debug(\"TP DELETE\");\n                //endpoint delete event is not sent for nfmp and lldp links\n                //both node/tp are deleted on the link delete event\n                break;\n            }\n            case IETF_LINK_CLASS: {\n                handleDeleteEventLogger.debug(\"LINK DELETE\");\n                deleteLink(lSrcObject, yangDB, qp);\n                break;\n            }\n        }\n    }\n\n    private boolean canDeleteNode (String nodeId, IYangDB yangDB) {\n        String endpointTableNative = \"service.Endpoint\";\n        String serviceTableNative = \"service.Service\";\n        String subquery = String.format(\"SELECT DISTINCT svc.dbId FROM %s e JOIN %s svc ON e.service_dbId = svc.dbId \"\n                                        + \"WHERE e.siteId=:siteId AND e.type = :endpointType \"\n                                        + \"AND svc.layer=:layer AND svc.type IN :serviceTypes\",\n                                        endpointTableNative, serviceTableNative);\n        String query = String.format(\"SELECT count(*) FROM (SELECT count(e.dbId) FROM %s e \"\n                                     + \"WHERE e.type=:endpointType AND e.service_dbId IN (%s) \"\n                                     + \"GROUP BY e.service_dbId) AS g WHERE g.count = 2\", endpointTableNative, subquery);\n        Object count = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(query)\n                .setParameter(\"siteId\", nodeId)\n                .setParameter(\"endpointType\", EndpointType.physicalPort.getValue())\n                .setParameter(\"layer\", Layer.physical.getValue())\n                .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable.getValue(), ServiceType.radioLink.getValue()))\n                .getSingleResult());\n        return count != null && ((BigInteger) count).longValue() == 0;\n    }\n\n    private boolean canDeleteTp (String nodeId, String tpId, boolean isLagTp, boolean isLagMember, IYangDB yangDB) {\n        int endpointType = isLagTp ? EndpointType.lag.getValue() : EndpointType.physicalPort.getValue();\n        String endpointTableNative = \"service.Endpoint\";\n        String serviceTableNative = \"service.Service\";\n        String subquery = String.format(\"SELECT DISTINCT svc.dbId FROM %s e JOIN %s svc ON e.service_dbId = svc.dbId \"\n                                        + (isLagTp ? \"JOIN service.Service_objectDetails sod ON (sod.dbId = svc.dbId AND sod.objectDetails_key = 'linkType') \" : \"\") //linkType is not set on manual lag links\n                                        + (isLagMember ? \"JOIN service.Service_objectDetails sod ON (sod.dbId = svc.dbId AND sod.objectDetails_key = 'isLagMember') \" : \"\")\n                                        + \"WHERE e.id=:endpointId AND e.siteId=:siteId AND e.type=:endpointType \"\n                                        + \"AND svc.layer=:layer AND svc.type IN :serviceTypes\"\n                                        + (isLagMember ? \" AND sod.objectDetails = 'true'\" : \"\"),\n                                        endpointTableNative, serviceTableNative);\n        String query = String.format(\"SELECT count(*) FROM (SELECT count(e.dbId) FROM %s e \"\n                                     + \"WHERE e.type=:endpointType AND e.service_dbId IN (%s) \"\n                                     + \"GROUP BY e.service_dbId) AS g WHERE g.count = 2\", endpointTableNative, subquery);\n        Object count = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(query)\n                .setParameter(\"endpointId\", tpId)\n                .setParameter(\"siteId\", nodeId)\n                .setParameter(\"endpointType\", endpointType)\n                .setParameter(\"layer\", Layer.physical.getValue())\n                .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable.getValue(), ServiceType.radioLink.getValue()))\n                .getSingleResult());\n        return count != null && ((BigInteger) count).longValue() == 0;\n    }\n\n    private boolean canDeleteLink (Object sourceTpPath, Object destTpPath, IYangDB yangDB) {\n        if (sourceTpPath != null && destTpPath != null) {\n            String sourceTpId = getTpIdFromTpPath(sourceTpPath.toString());\n            String sourceNodeId = getNodeIdFromTpPath(sourceTpPath.toString());\n            String destTpId = getTpIdFromTpPath(destTpPath.toString());\n            String destNodeId = getNodeIdFromTpPath(destTpPath.toString());\n            boolean canDelete = runCanDeleteLink(sourceTpId, sourceNodeId, destTpId, destNodeId, false, yangDB);\n            if(canDelete) {\n                canDelete = runCanDeleteLink(destTpId, destNodeId, sourceTpId, sourceNodeId,true, yangDB);\n            }\n            return canDelete;\n        }\n        return true;\n    }\n\n    private boolean runCanDeleteLink (String sourceTpId, String sourceNodeId, String destTpId, String destNodeId,\n                                      boolean shouldIncludeDirection, IYangDB yangDB) {\n        String subquery = String.format(\"SELECT svc FROM %s e JOIN e.service svc \"\n                                        + \"JOIN e.objectDetails eod ON (KEY(eod) = :objectDetailsSource) \"\n                                        + \"WHERE e.id=:endpointIdSource AND e.siteId=:siteIdSource \"\n                                        + \"AND e.type=:endpointType AND svc.layer=:layer \"\n                                        + (shouldIncludeDirection ? \"AND svc.direction=:direction \" : \"\")\n                                        + \"AND svc.type IN :serviceTypes\", NSP_ENDPOINT_TABLE);\n        String query = String.format(\"SELECT count(e.dbId) FROM %s e \"\n                                     + \"JOIN e.objectDetails eod ON (KEY(eod) = :objectDetailsTarget) \"\n                                     + \"WHERE e.id=:endpointIdTarget AND e.siteId=:siteIdTarget \"\n                                     + \"AND e.type = :endpointType AND e.service IN (%s)\",\n                                     NSP_ENDPOINT_TABLE, subquery);\n        Long count = execute(yangDB.getDb(), tx -> {\n            javax.persistence.Query lQuery = tx.getEntityManager().createQuery(query)\n                .setParameter(\"objectDetailsSource\", \"isSource\")\n                .setParameter(\"endpointIdSource\", sourceTpId)\n                .setParameter(\"siteIdSource\", sourceNodeId)\n                .setParameter(\"endpointType\", EndpointType.physicalPort)\n                .setParameter(\"layer\", NSP_L2_LAYER)\n                .setParameter(\"serviceTypes\", NSP_L2_SERVICE_TYPES)\n                .setParameter(\"objectDetailsTarget\", \"isTarget\")\n                .setParameter(\"endpointIdTarget\", destTpId)\n                .setParameter(\"siteIdTarget\", destNodeId);\n            if(shouldIncludeDirection) {\n                lQuery.setParameter(\"direction\", Direction.biDirectional);\n            }\n           return (Long)lQuery.getSingleResult();\n        });\n        return count != null && count.intValue() == 0;\n    }\n\n    private void deleteLink (IYangObject aInSrcObject, IYangDB yangDB, QueryParameters qp) {\n\n        String nspServiceId = aInSrcObject.get(\"id\").toString();\n\n        // note: objectDetails.linkType won't help with manual link as linkType is not set\n\n        List<?> linkList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(String.format(\n                        \"SELECT linkid FROM %s WHERE nspietfnetworktopologynspattributes = :nspServiceId\",\n                        IETF_LINK_NSP_ATTR_TABLE))\n                .setParameter(\"nspServiceId\", nspServiceId)\n                .getResultList());\n        if (linkList != null && !linkList.isEmpty()) {\n            for(Object link : linkList) {\n                String linkId = (String) link;\n                String ietfLinkPath = String.format(IETF_L2_LINK_PATH, linkId);\n                IYangObject ietfLink = yangDB.getSingle(ietfLinkPath, qp);\n                if (ietfLink != null) {\n                    String lSourceTpPath = null, lDestTpPath = null;\n                    IYangObject lSourceYangObj = (YangObject) ietfLink.get(\"source\");\n                    if (lSourceYangObj.get(\"source-tp\") != null) {\n                        lSourceTpPath = lSourceYangObj.get(\"source-tp\").toString();\n                        String lSourceNodeId = getNodeIdFromTpPath(lSourceTpPath);\n                        String lSourceTpId = getTpIdFromTpPath(lSourceTpPath);\n                        if (canDeleteNode(lSourceNodeId, yangDB) && lSourceYangObj.get(\"source-node\") != null) {\n                            String lSourceNodePath = lSourceYangObj.get(\"source-node\").toString();\n                            handleDeleteEventLogger.debug(\"DELETING NODE \" + lSourceNodePath);\n                            yangDB.delete(lSourceNodePath, qp);\n                        }\n                        else if (canDeleteTp(lSourceNodeId, lSourceTpId, false, false, yangDB)) {\n                            handleDeleteEventLogger.debug(\"DELETING TP \" + lSourceTpPath);\n                            yangDB.delete(lSourceTpPath, qp);\n                            updateLagTpOnMemberDeleteEvent(lSourceTpPath, yangDB, qp);\n                        }\n                    }\n                    IYangObject lDestYangObj = (YangObject) ietfLink.get(\"destination\");\n                    if (lDestYangObj.get(\"dest-tp\") != null) {\n                        lDestTpPath = lDestYangObj.get(\"dest-tp\").toString();\n                        String lDestNodeId = getNodeIdFromTpPath(lDestTpPath);\n                        String lDestTpId = getTpIdFromTpPath(lDestTpPath);\n                        if (canDeleteNode(lDestNodeId, yangDB) && lDestYangObj.get(\"dest-node\") != null) {\n                            String lDestNodePath = lDestYangObj.get(\"dest-node\").toString();\n                            handleDeleteEventLogger.debug(\"DELETING NODE \" + lDestNodePath);\n                            yangDB.delete(lDestNodePath, qp);\n                        }\n                        else if (canDeleteTp(lDestNodeId, lDestTpId, false, false, yangDB)) {\n                            handleDeleteEventLogger.debug(\"DELETING TP \" + lDestTpPath);\n                            yangDB.delete(lDestTpPath, qp);\n                            updateLagTpOnMemberDeleteEvent(lDestTpPath, yangDB, qp);\n                        }\n                    }\n\n                    if (lSourceTpPath == null || lDestTpPath == null || canDeleteLink(lSourceTpPath, lDestTpPath, yangDB)) {\n                        handleDeleteEventLogger.debug(\"DELETING LINK \" + ietfLinkPath);\n                        yangDB.delete(ietfLinkPath, qp);\n                    }\n                    else {\n                        //remove nspServiceId from the nsp-attributes list\n                        IYangObject linkAttributes = (YangObject) ietfLink.get(\"ietf-l2-topology:l2-link-attributes\");\n                        List<?> linkNspAttrs = (List<?>) linkAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                        List<String> lNewNspServiceIdList = new ArrayList<>();\n                        linkNspAttrs.stream()\n                                .filter(attr -> !attr.equals(nspServiceId))\n                                .forEach(attr -> lNewNspServiceIdList.add(attr.toString()));\n                        linkAttributes.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", lNewNspServiceIdList);\n\n                        // if the current ietf link name is the same as the deleted link name, then update it\n                        // the lNewNspServiceIdList should never be empty, if so, canDelete*** logic is wrong...\n                        if(linkAttributes.get(\"name\").equals(aInSrcObject.get(\"name\")) && !lNewNspServiceIdList.isEmpty()){\n                            //fetch name/delay of the first remaining nspServiceId in the list\n                            String lRemainingNspServiceId = lNewNspServiceIdList.get(0);\n                            String lLinkType = ((List<?>) linkAttributes.get(\"flags\")).get(0).toString().split(\":\")[1];\n                            String lServicePath = String.format(NSP_SERVICE_PATH, lLinkType, lRemainingNspServiceId);\n                            IYangObject lService = getSingleFromYangDb(yangDB, lServicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS_REDUCED));\n                            if(lService != null){\n                                linkAttributes.setProperty(\"name\", lService.get(\"name\"));\n                                linkAttributes.setProperty(\"delay\", lService.get(\"latency\"));\n                            }\n                        }\n                        handleDeleteEventLogger.debug(\"UPDATING LINK ATTRIBUTES\" + ietfLinkPath);\n                        yangDB.update(linkAttributes.getIdentifier(), linkAttributes, qp);\n                    }\n                }\n            }\n            return; //ietf link is found, return from the method\n        }\n\n\n        //this could be lag link being deleted - check if lag tp should be deleted/updated\n\n        List<?> lagTpList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(String.format(\n                        \"SELECT nodeid, tpid FROM %s WHERE nspietfnetworktopologynspattributes = :nspServiceId\",\n                        IETF_TP_NSP_ATTR_TABLE))\n                .setParameter(\"nspServiceId\", nspServiceId)\n                .getResultList());\n        if (lagTpList != null && !lagTpList.isEmpty()) {\n            for(Object lagTp : lagTpList){\n                Object[] tuple = (Object[]) lagTp;\n                String nodeId = tuple[0] != null ? tuple[0].toString() : StringUtils.EMPTY;\n                String tpId = tuple[1] != null ? tuple[1].toString() : StringUtils.EMPTY;\n                String tpPath = String.format(IETF_L2_TP_PATH, nodeId, tpId);\n                if(canDeleteNode(nodeId, yangDB)) {\n                    String nodePath = String.format(IETF_L2_NODE_PATH, nodeId);\n                    handleDeleteEventLogger.debug(\"DELETING NODE \" + nodePath);\n                    yangDB.delete(nodePath, qp);\n                }\n                else if(canDeleteTp(nodeId, tpId, true, false, yangDB)) {\n                    handleDeleteEventLogger.debug(\"DELETING TP \" + tpPath);\n                    yangDB.delete(tpPath, qp);\n                }\n                else {\n                    //remove nspServiceId from the nsp-attributes list - is this executed ever?\n                    IYangObject tp = yangDB.getSingle(tpPath, getFilteredQueryParameters(IETF_TP_READ_FIELDS));\n                    if(tp != null) {\n                        IYangObject tpAttributes = (IYangObject)tp.get(\"ietf-l2-topology:l2-termination-point-attributes\");\n                        List<?> tpNspAttrs = (List<?>)tpAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                        List<String> nspServiceIdList = new ArrayList<>();\n                        tpNspAttrs.stream()\n                                .filter(attr -> !attr.equals(nspServiceId))\n                                .forEach(attr -> nspServiceIdList.add(attr.toString()));\n                        tpAttributes.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                        handleDeleteEventLogger.debug(\"UPDATING TP ATTRIBUTES \" + tpPath);\n                        yangDB.update(tpAttributes.getIdentifier(), tpAttributes, qp);\n                    }\n                }\n            }\n        }\n    }\n\n    private void updateLagTpOnMemberDeleteEvent (String deletedMemberTpPath, IYangDB yangDB, QueryParameters qp){\n        List<?> lagTpList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(String.format(\n                        \"SELECT nodeid, tpid, count(*) FROM %s WHERE fkparent = (SELECT fkparent FROM %s WHERE memberlinktp = :memberlinktp) GROUP BY nodeid, tpid\",\n                        IETF_MEMBER_LINK_TP_TABLE, IETF_MEMBER_LINK_TP_TABLE))\n                .setParameter(\"memberlinktp\", deletedMemberTpPath)\n                .getResultList());\n        if (lagTpList != null && !lagTpList.isEmpty()) {\n            Object[] tuple = (Object[]) lagTpList.get(0);\n            String nodeId = tuple[0] != null ? tuple[0].toString() : StringUtils.EMPTY;\n            String tpId = tuple[1] != null ? tuple[1].toString() : StringUtils.EMPTY;\n            long count = tuple[2] != null ? ((BigInteger)tuple[2]).longValue() : 0;\n            String lagTpPath = String.format(IETF_L2_TP_PATH, nodeId, tpId);\n            if(count <= 1 && canDeleteTp(nodeId, tpId, true, false, yangDB))\n            {\n                //delete this lag tp as last member is deleted\n                handleDeleteEventLogger.debug(\"DELETING TP \" + lagTpPath);\n                yangDB.delete(lagTpPath, qp);\n            }\n            else {\n                //update this lag tp member-link-tp list\n                if(yangDB.exists(lagTpPath, qp)){\n                    String lagTpAttributesPath = lagTpPath + \"/ietf-l2-topology:l2-termination-point-attributes\";\n                    IYangObject lagTpAttributesObj = yangDB.getSingle(lagTpAttributesPath, getFilteredQueryParameters(IETF_TP_MEMBERS_READ_FIELDS));\n                    if(lagTpAttributesObj != null) {\n                        List<String> newMemberList = new ArrayList<>();\n                        List<?> lagTpMembers = (List<?>)lagTpAttributesObj.get(\"member-link-tp\");\n                        lagTpMembers.stream()\n                                .filter(memberTp -> !memberTp.equals(deletedMemberTpPath))\n                                .forEach(memberTp -> newMemberList.add(memberTp.toString()));\n                        lagTpAttributesObj.setProperty(\"member-link-tp\", newMemberList);\n                        handleDeleteEventLogger.debug(\"UPDATING TP \" + lagTpPath);\n                        yangDB.update(lagTpAttributesPath, lagTpAttributesObj, qp);\n                    }\n                }\n            }\n        }\n    }\n\n    private IYangObject buildNodeConfig(String siteId, IYangDB yangDB) {\n        IYangObject lNodeObj = new YangObject();\n        lNodeObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lNodeObj.setProperty(\"node-id\", siteId);\n\n        //l2-node-attributes\n        IYangObject lNodeAttrObj = new YangObject();\n        lNodeAttrObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lNodeAttrObj.setProperty(\"node-id\", siteId);\n\n        String lNePath = String.format(nokia_nsp_network_management_ELEMENT_PATH, siteId);\n        IYangObject lNe = yangDB.getSingle(lNePath, getFilteredQueryParameters(nokia_nsp_network_management_ELEMENT_READ_FIELDS));\n        if(lNe != null) {\n            if(lNe.get(\"ne-name\") != null){\n                lNodeAttrObj.setProperty(\"name\", lNe.get(\"ne-name\"));\n            }\n            if(lNe.get(\"mac-address\") != null){\n                String macAddress = convertMacAddress(lNe.get(\"mac-address\").toString());\n                if (macAddress != null) {\n                    lNodeAttrObj.setProperty(\"management-mac\", macAddress);\n                }\n            }\n            if(lNe.get(\"ip-address\") != null){\n                lNodeAttrObj.setProperty(\"management-address\", Collections.singletonList(lNe.get(\"ip-address\")));\n            }\n        }\n        lNodeObj.setProperty(\"ietf-l2-topology:l2-node-attributes\", lNodeAttrObj);\n        return lNodeObj;\n    }\n\n    private void handlePortLag(IYangObject aInSrcObject, EndpointType type, IYangDB yangDB, QueryParameters qp) {\n        //rely on equipment.name == endpoint.id, lag.name == endpoint.id\n        String lName = aInSrcObject.get(\"name\").toString();\n        String lNeId = aInSrcObject.get(\"ne-id\").toString();\n        List<?> resultList = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createQuery(String.format(\"SELECT svc.id, svc.type FROM %s e JOIN e.service svc \"\n                                           + (type.equals(EndpointType.lag) ? \"JOIN svc.objectDetails sod ON (KEY(sod) = 'linkType') \" : \"\") //linkType is not set on manual lag links\n                                           + \"WHERE e.id=:endpointId AND e.siteId=:siteId AND e.type = :endpointType \"\n                                           + \"AND svc.layer=:layer AND svc.type in :serviceTypes\", NSP_ENDPOINT_TABLE))\n                .setParameter(\"endpointId\", lName)\n                .setParameter(\"siteId\", lNeId)\n                .setParameter(\"endpointType\", type)\n                .setParameter(\"layer\", NSP_L2_LAYER)\n                .setParameter(\"serviceTypes\", NSP_L2_SERVICE_TYPES)\n                .getResultList());\n        if (resultList != null && !resultList.isEmpty()) {\n            Object[] tuple = (Object[]) resultList.get(0); //get first result, don't care for duplicates\n            String lLinkId = tuple[0] != null ? tuple[0].toString() : StringUtils.EMPTY;\n            ServiceType lSvcType = tuple[1] instanceof ServiceType ? ((ServiceType) tuple[1]) : ServiceType.unknown;\n            String lLinkType = lSvcType.equals(ServiceType.cable) ? \"cable\" : (lSvcType.equals(ServiceType.radioLink) ? \"radio-link\" : StringUtils.EMPTY);\n            String lEndpointPath = String.format(NSP_ENDPOINT_PATH, lLinkType, lLinkId, lNeId, lName);\n            IYangObject endpoint = getSingleFromYangDb(yangDB, lEndpointPath, getFilteredQueryParameters(NSP_ENDPOINT_READ_FIELDS));\n            if(endpoint != null && isValidEndpoint(endpoint, yangDB)) {\n                handlePortLagLogger.debug(\"HANDLE PORT/LAG ENDPOINT FOUND: {}\", lEndpointPath);\n                handleTP(endpoint, yangDB, qp, aInSrcObject);\n                if(endpoint.get(\"type\").toString().equals(\"physical-port\")) {\n                    String servicePath = endpoint.getIdentifier().substring(0, endpoint.getIdentifier().indexOf(\"/link-endpoint[\"));\n                    IYangObject lLinkSourceObj = getSingleFromYangDb(\n                            yangDB, servicePath, getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n                    if (lLinkSourceObj != null) {\n                        handlePortLagLogger.debug(\"HANDLE PORT SERVICE FOUND: {}\", servicePath);\n                        handleLink(lLinkSourceObj, false, true, yangDB, qp);\n                    }\n                }\n            }\n        }\n    }\n\n    private boolean isValidEndpoint(IYangObject aInEndpoint, IYangDB yangDB) {\n        String endpointId = aInEndpoint.get(\"endpoint-id\").toString();\n        String siteId = getSiteIdForEndpoint(aInEndpoint);\n        boolean isLag = aInEndpoint.get(\"type\").toString().equals(\"lag\");\n        if(isLag) {\n            String nspServiceId = getServiceIdFromEndpointPath(aInEndpoint.getIdentifier());\n            return isValidLagEndpoint(aInEndpoint) && isValidLinkType(nspServiceId, yangDB)\n                   && !canDeleteTp(siteId, endpointId, isLag, false, yangDB);\n        }\n        return isValidPortEndpoint(aInEndpoint) && !canDeleteTp(siteId, endpointId, isLag, false, yangDB);\n    }\n\n    private void handleTP(IYangObject aInEndpoint, IYangDB yangDB, QueryParameters qp, IYangObject aInResource) {\n        String endpointId = aInEndpoint.get(\"endpoint-id\").toString();\n        String siteId = getSiteIdForEndpoint(aInEndpoint);\n        String lTpPath = String.format(IETF_L2_TP_PATH, siteId, endpointId);\n        boolean isLag = aInEndpoint.get(\"type\").toString().equals(\"lag\");\n        String lNodePath = String.format(IETF_L2_NODE_PATH, siteId);\n        IYangObject lTpObj = buildTpConfig(aInEndpoint, siteId, endpointId, isLag, yangDB, aInResource);\n        if(lTpObj != null) {\n            if (!yangDB.exists(lNodePath, qp)) {\n                handleNodeLogger.debug(\"CREATING NODE \" + lNodePath);\n                IYangObject lNodeObj = buildNodeConfig(siteId, yangDB);\n                yangDB.createChild(IETF_L2_NETWORK_PATH, IETF_NODE_TYPE, lNodeObj, qp);\n            }\n            if (!yangDB.exists(lTpPath, qp)) {\n                handleTpLogger.debug(\"CREATING TP \" + lTpPath);\n                yangDB.createChild(lNodePath, IETF_TP_TYPE, lTpObj, qp);\n            } else {\n                handleTpLogger.debug(\"UPDATING TP \" + lTpPath);\n                yangDB.update(lTpPath, lTpObj, qp);\n            }\n        }\n    }\n\n    private IYangObject buildTpConfig(IYangObject aInEndpoint, String siteId, String endpointId, boolean isLag, IYangDB yangDB, IYangObject resource) {\n        IYangObject lTpObj = new YangObject();\n        lTpObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lTpObj.setProperty(\"node-id\", siteId);\n        lTpObj.setProperty(\"tp-id\", endpointId);\n\n        //l2-termination-point-attributes\n        IYangObject lTPAttrObj = new YangObject();\n        lTPAttrObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lTPAttrObj.setProperty(\"node-id\", siteId);\n        lTPAttrObj.setProperty(\"tp-id\", endpointId);\n        lTPAttrObj.setProperty(\"lag\", isLag);\n\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        if (resource == null) {\n            Object resourcePath = null;\n            if(aInEndpoint.get(\"port-bindings\") != null && !((List<?>) aInEndpoint.get(\"port-bindings\")).isEmpty()) {\n                resourcePath = ((YangObject) ((List<?>) aInEndpoint.get(\"port-bindings\")).get(0)).get(\"resource\");\n            }\n            else {\n                IYangObject lEndpointObj = getSingleFromYangDb(yangDB, aInEndpoint.getIdentifier(), setFilterOnQueryParameters(qp, NSP_ENDPOINT_READ_FIELDS));\n                if(lEndpointObj != null) {\n                    if(lEndpointObj.get(\"port-bindings\") != null && !((List<?>) lEndpointObj.get(\"port-bindings\")).isEmpty()) {\n                        resourcePath = ((YangObject) ((List<?>) lEndpointObj.get(\"port-bindings\")).get(0)).get(\"resource\");\n                    }\n                }\n            }\n            if (resourcePath != null && isValidYangPath(resourcePath.toString())) {\n                if(isLag) {\n                    resource = yangDB.getSingle(resourcePath.toString(), setFilterOnQueryParameters(qp, NSP_LAG_READ_FIELDS));\n                }\n                else {\n                    resource = yangDB.getSingle(resourcePath.toString(), setFilterOnQueryParameters(qp, NSP_PORT_READ_FIELDS_FOR_TP));\n                }\n            }\n        }\n        if (resource != null) {\n            lTPAttrObj.setProperty(\"interface-name\", resource.get(\"name\").toString());\n            if (isLag) {\n                if(resource.get(\"configured-address\") != null) {\n                    String macAddress = convertMacAddress(resource.get(\"configured-address\").toString());\n                    if (macAddress != null) {\n                        lTPAttrObj.setProperty(\"mac-address\", macAddress);\n                    }\n                }\n                if (resource.get(\"encap-type\") != null) {\n                    String encapType = convertEncapType(resource.get(\"encap-type\").toString());\n                    if (encapType != null) {\n                        lTPAttrObj.setProperty(\"encapsulation-type\", encapType);\n                    }\n                }\n                if (resource.get(\"lag-index\") != null) {\n                    lTPAttrObj.setProperty(\"unnumbered-id\", Collections.singletonList(resource.get(\"lag-index\")));\n                }\n                List<Object> members = new ArrayList<>();\n                List<?> resourceMembers = Collections.EMPTY_LIST;\n                if(resource.get(\"members\") != null) {\n                    resourceMembers = (List<?>)resource.get(\"members\");\n                }\n                else {\n                    resource = yangDB.getSingle(resource.getIdentifier(), setFilterOnQueryParameters(qp, NSP_LAG_READ_FIELDS_MEMBERS));\n                    if(resource != null && resource.get(\"members\") != null) {\n                        resourceMembers = (List<?>) resource.get(\"members\");\n                    }\n                }\n                resourceMembers.forEach(member -> {\n                    String memberPath = ((String) member).substring(0, ((String) member).indexOf(\"/lag-member-details\"));\n                    IYangObject lMemberObj = yangDB.getSingle(memberPath, setFilterOnQueryParameters(qp, NSP_PORT_READ_FIELDS_FOR_LAG_MEMBER));\n                    if (lMemberObj != null) {\n                        //memberPath is the identifier of the port, not link endpoint\n                        //need to find endpoint because there could be no link on the lag member port, or unmanaged link\n                        //also look for the link with objectDetails.isLagMember=true\n                        String memberName = lMemberObj.get(\"name\").toString();\n                        if(!canDeleteTp(siteId, memberName, false, true, yangDB)) {\n                            members.add(String.format(IETF_L2_TP_PATH, siteId, memberName));\n                        }\n                    }\n                });\n                if (!members.isEmpty()) {\n                    lTPAttrObj.setProperty(\"member-link-tp\", members);\n                }\n                else {\n                    return null; //don't sync this lag endpoint to ietf\n                }\n                //set nsp-ietf-network-topology:nsp-attributes\n                String nspServiceId = getServiceIdFromEndpointPath(aInEndpoint.getIdentifier());\n                List<String> nspServiceIdList = new ArrayList<>();\n                String lTpPath = String.format(IETF_L2_TP_PATH, siteId, endpointId);\n                if(yangDB.exists(lTpPath)) {\n                    String tpAttrPath = lTpPath + \"/ietf-l2-topology:l2-termination-point-attributes\";\n                    IYangObject tpAttributes = yangDB.getSingle(tpAttrPath, setFilterOnQueryParameters(qp, IETF_TP_ATTR_READ_FIELDS));\n                    if(tpAttributes != null) {\n                        List<?> existingNspAttr = (List<?>)tpAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                        if(!existingNspAttr.contains(nspServiceId)){\n                            existingNspAttr.forEach(attr -> nspServiceIdList.add(attr.toString()));\n                            nspServiceIdList.add(nspServiceId);\n                            lTPAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                        }\n                    }\n                }\n                else {\n                    nspServiceIdList.add(nspServiceId);\n                    lTPAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                }\n            } else {\n                if(resource.get(\"hw-mac-address\") != null) {\n                    String macAddress = convertMacAddress(resource.get(\"hw-mac-address\").toString());\n                    if (macAddress != null) {\n                        lTPAttrObj.setProperty(\"mac-address\", macAddress);\n                    }\n                }\n                IYangObject lPortDetails = null;\n                if (resource.get(\"port-details\") != null && !((List<?>) resource.get(\"port-details\")).isEmpty()) {\n                    lPortDetails = (IYangObject) ((List<?>) resource.get(\"port-details\")).get(0);\n                }\n                else {\n                    String portDetailsPath = resource.getIdentifier() + \"/port-details\";\n                    lPortDetails = yangDB.getSingle(portDetailsPath, setFilterOnQueryParameters(qp, NSP_PORT_DETAILS_READ_FIELDS_FOR_TP));\n                }\n                if (lPortDetails != null) {\n                    if (lPortDetails.get(\"encap-type\") != null) {\n                        String encapType = convertEncapType(lPortDetails.get(\"encap-type\").toString());\n                        if (encapType != null) {\n                            lTPAttrObj.setProperty(\"encapsulation-type\", encapType);\n                        }\n                    }\n                    if (lPortDetails.get(\"port-index\") != null) {\n                        lTPAttrObj.setProperty(\"unnumbered-id\", Collections.singletonList(lPortDetails.get(\"port-index\")));\n                    }\n                }\n            }\n        }\n        else {\n            handleTpLogger.debug(\"RESOURCE MISSING FOR TP \" + String.format(IETF_L2_TP_PATH, siteId, endpointId));\n            return null; //don't create/update tp, wait for another event\n        }\n        lTpObj.setProperty(\"ietf-l2-topology:l2-termination-point-attributes\", lTPAttrObj);\n        return lTpObj;\n    }\n\n    private void handleLink(IYangObject aInSrcObject, boolean isNameUpdate, boolean isPortUpdate, IYangDB yangDB, QueryParameters qp) {\n\n        String nspServiceId = aInSrcObject.get(\"id\").toString();\n\n        List<?> endpoints = (List<?>)aInSrcObject.get(\"link-endpoint\");\n        if (endpoints == null || endpoints.isEmpty()) {\n            IYangObject lSourceObj = getSingleFromYangDb(\n                    yangDB, aInSrcObject.getIdentifier(), getFilteredQueryParameters(NSP_SERVICE_READ_FIELDS));\n            if (lSourceObj != null) {\n                endpoints = (List<?>)lSourceObj.get(\"link-endpoint\");\n            }\n        }\n\n        if(endpoints == null || endpoints.size() != 2 || !isValidLinkEndpoints(endpoints)) {\n            deleteLink(aInSrcObject, yangDB, qp); //delete if the link is already in ietf\n            return; //do not sync this link to ietf\n        }\n\n        final Map<String,String> linkExtraProps = new HashMap<>(); //will hold source, destination, port-details props\n        getLinkExtraFromEndpoints(endpoints, linkExtraProps, yangDB);\n        if (linkExtraProps.get(\"srcNodeId\") == null || linkExtraProps.get(\"srcTpId\") == null ||\n            linkExtraProps.get(\"destNodeId\") == null || linkExtraProps.get(\"destTpId\") == null) {\n\n            handleLinkLogger.warn(\"ENDPOINTS MISCONFIGURED - CANNOT PROCESS LINK ID: \" + nspServiceId);\n            return; //cannot proceed without valid endpoints info\n        }\n        String ietfLinkId = getIetfLinkId(linkExtraProps.get(\"srcNodeId\"), linkExtraProps.get(\"srcTpId\"),\n                                          linkExtraProps.get(\"destNodeId\"), linkExtraProps.get(\"destTpId\"));\n        doHandleLink(aInSrcObject, linkExtraProps, nspServiceId, isNameUpdate, isPortUpdate, ietfLinkId,\n                     linkExtraProps.get(\"srcNode\"), linkExtraProps.get(\"srcTp\"),\n                     linkExtraProps.get(\"destNode\"), linkExtraProps.get(\"destTp\"), yangDB, qp);\n\n        if(aInSrcObject.get(\"direction\").toString().equals(\"bi-directional\"))\n        {\n            ietfLinkId = getIetfLinkId(linkExtraProps.get(\"destNodeId\"), linkExtraProps.get(\"destTpId\"),\n                                       linkExtraProps.get(\"srcNodeId\"), linkExtraProps.get(\"srcTpId\"));\n            doHandleLink(aInSrcObject, linkExtraProps, nspServiceId, isNameUpdate, isPortUpdate, ietfLinkId,\n                         linkExtraProps.get(\"destNode\"), linkExtraProps.get(\"destTp\"),\n                         linkExtraProps.get(\"srcNode\"), linkExtraProps.get(\"srcTp\"), yangDB, qp);\n        }\n    }\n\n    private void doHandleLink(IYangObject aInSrcObject, Map<String,String> linkExtraProps, String nspServiceId, boolean isNameUpdate, boolean isPortUpdate,\n                              String ietfLinkId, String srcNode, String srcTp, String destNode, String destTp, IYangDB yangDB, QueryParameters qp)\n    {\n\n        IYangObject lLinkObject = new YangObject();\n        lLinkObject.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lLinkObject.setProperty(\"link-id\", ietfLinkId);\n\n        //source\n        IYangObject lSrcObject = new YangObject();\n        lSrcObject.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lSrcObject.setProperty(\"link-id\", ietfLinkId);\n        lSrcObject.setProperty(\"source-node\", srcNode);\n        lSrcObject.setProperty(\"source-tp\", srcTp);\n        lLinkObject.setProperty(\"source\", lSrcObject);\n\n        //destination\n        IYangObject lDestObject = new YangObject();\n        lDestObject.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lDestObject.setProperty(\"link-id\", ietfLinkId);\n        lDestObject.setProperty(\"dest-node\", destNode);\n        lDestObject.setProperty(\"dest-tp\", destTp);\n        lLinkObject.setProperty(\"destination\", lDestObject);\n\n        //link-attributes\n        IYangObject lLinkAttrObj = new YangObject();\n        lLinkAttrObj.setProperty(\"network-id\", IETF_L2_NETWORK_ID);\n        lLinkAttrObj.setProperty(\"link-id\", ietfLinkId);\n        if(linkExtraProps.get(\"rate\") != null) {\n            lLinkAttrObj.setProperty(\"rate\", Math.round(Float.parseFloat(linkExtraProps.get(\"rate\"))));\n        }\n        if(linkExtraProps.get(\"duplex\") != null) {\n            lLinkAttrObj.setProperty(\"duplex\", linkExtraProps.get(\"duplex\"));\n        }\n        if(linkExtraProps.get(\"auto-nego\") != null) {\n            lLinkAttrObj.setProperty(\"auto-nego\", linkExtraProps.get(\"auto-nego\").equals(\"enabled\"));\n        }\n\n        String lLinkPath = String.format(IETF_L2_LINK_PATH, ietfLinkId);\n        List<String> nspServiceIdList = new ArrayList<>();\n        boolean isLinkExists = false;\n        if(yangDB.exists(lLinkPath, qp)) {\n            isLinkExists = true;\n            String linkAttrPath = lLinkPath + \"/ietf-l2-topology:l2-link-attributes\";\n            IYangObject linkAttributes = yangDB.getSingle(linkAttrPath, getFilteredQueryParameters(IETF_LINK_ATTR_READ_FIELDS));\n            if(linkAttributes != null) {\n                List<?> existingNspAttr = (List<?>)linkAttributes.get(\"nsp-ietf-network-topology:nsp-attributes\");\n                if(!existingNspAttr.contains(nspServiceId)){\n                    existingNspAttr.forEach(attr -> nspServiceIdList.add(attr.toString()));\n                    nspServiceIdList.add(nspServiceId);\n                    lLinkAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n                }\n\n                //below logic is needed for nfmp managing scenario when link name is updated multiple times\n                //how to decide if ietf link name should be updated??\n                //try comparing nspServiceId with the first in the existing list\n                if(isNameUpdate && nspServiceId.equals(existingNspAttr.get(0).toString())) {\n                    lLinkAttrObj.setProperty(\"name\", aInSrcObject.get(\"name\"));\n                }\n\n                //if name is the same, then update delay\n                if(linkAttributes.get(\"name\").equals(aInSrcObject.get(\"name\"))) {\n                    lLinkAttrObj.setProperty(\"delay\", aInSrcObject.get(\"latency\"));\n                }\n            }\n        }\n        else {\n            //set name only on create and don't overwrite by duplicates\n            lLinkAttrObj.setProperty(\"name\", aInSrcObject.get(\"name\"));\n            lLinkAttrObj.setProperty(\"delay\", aInSrcObject.get(\"latency\"));\n            nspServiceIdList.add(nspServiceId);\n            lLinkAttrObj.setProperty(\"nsp-ietf-network-topology:nsp-attributes\", nspServiceIdList);\n            lLinkAttrObj.setProperty(\"flags\", Collections.singletonList(\"nsp-ietf-network-topology:\" + getServiceTypeFromPath(aInSrcObject.getIdentifier())));\n        }\n        lLinkObject.setProperty(\"ietf-l2-topology:l2-link-attributes\", lLinkAttrObj);\n\n        if (!isLinkExists) {\n            if(!isPortUpdate){\n                handleLinkLogger.debug(\"CREATING LINK \" + lLinkPath);\n                yangDB.createChild(IETF_L2_NETWORK_PATH, IETF_LINK_TYPE, lLinkObject, qp);\n            }\n        } else {\n            handleLinkLogger.debug(\"UPDATING LINK \" + lLinkPath);\n            yangDB.update(lLinkPath, lLinkObject, qp);\n        }\n    }\n\n    private void getLinkExtraFromEndpoints (List<?> endpoints, Map<String,String> linkExtraProps, IYangDB yangDB) {\n        endpoints.forEach(endpoint -> {\n            String endpointId = ((IYangObject) endpoint).get(\"endpoint-id\").toString();\n            String siteId = getSiteIdForEndpoint((IYangObject) endpoint);\n            String lNodePath = String.format(IETF_L2_NODE_PATH, siteId);\n            String lTpPath = String.format(IETF_L2_TP_PATH, siteId, endpointId);\n            List<?> nspSources = (List<?>)((YangObject) endpoint).getExtraDatas().get(\"sources\");\n            nspSources.forEach(source -> {\n                if (source.toString().contains(\"@endpointA\")) {\n                    linkExtraProps.put(\"srcNode\", lNodePath);\n                    linkExtraProps.put(\"srcTp\", lTpPath);\n                    linkExtraProps.put(\"srcNodeId\", siteId);\n                    linkExtraProps.put(\"srcTpId\", endpointId);\n                }\n                else if (source.toString().contains(\"@endpointB\")) {\n                    linkExtraProps.put(\"destNode\", lNodePath);\n                    linkExtraProps.put(\"destTp\", lTpPath);\n                    linkExtraProps.put(\"destNodeId\", siteId);\n                    linkExtraProps.put(\"destTpId\", endpointId);\n                }\n            });\n            if (((YangObject) endpoint).get(\"port-bindings\") != null && !((List<?>) ((YangObject) endpoint).get(\"port-bindings\")).isEmpty()) {\n                Object resource = ((YangObject) ((List<?>) ((YangObject) endpoint).get(\"port-bindings\")).get(0)).get(\"resource\");\n                if (resource != null && isValidYangPath(resource.toString())) {\n                    String portDetailsPath = resource + \"/port-details\";\n                    IYangObject lPortDetails = yangDB.getSingle(\n                            portDetailsPath,\n                            getFilteredQueryParameters(NSP_PORT_DETAILS_READ_FIELDS_FOR_LINK));\n                    if (lPortDetails != null) {\n                        if (lPortDetails.get(\"actual-rate\") != null && lPortDetails.get(\"actual-rate-units\") != null) {\n                            double rate = Double.parseDouble(lPortDetails.get(\"actual-rate\").toString());\n                            String units = lPortDetails.get(\"actual-rate-units\").toString();\n                            if(units.equals(\"mbps\")) {\n                                rate *= 1000;\n                            }\n                            else if(!units.equals(\"kbps\")) {\n                                rate = 0;\n                            }\n                            linkExtraProps.put(\"rate\", String.valueOf(rate));\n                        }\n                        if (lPortDetails.get(\"operational-duplex\") != null) {\n                            String duplex = convertDuplex(lPortDetails.get(\"operational-duplex\").toString());\n                            if (duplex != null) {\n                                linkExtraProps.put(\"duplex\", lPortDetails.get(\"operational-duplex\").toString());\n                            }\n                        }\n                        if (lPortDetails.get(\"auto-negotiate\") != null) {\n                            linkExtraProps.put(\"auto-nego\", lPortDetails.get(\"auto-negotiate\").toString());\n                        }\n                    }\n                }\n            }\n            else {\n                handleLinkLogger.debug(\"LINK PORT-BINDINGS MISSING {}, {}\", endpointId, siteId);\n            }\n        });\n    }\n\n    private String getServiceIdFromEndpointPath(String endpointPath) {\n        String idKey = \"[id='\";\n        return endpointPath.substring(endpointPath.indexOf(idKey) + idKey.length(), endpointPath.indexOf(\"']/link-endpoint\"));\n    }\n\n    private String getServiceTypeFromPath(String servicePath) {\n        return servicePath.substring(\"/nsp-service:services/physical-layer/\".length(), servicePath.indexOf(\"[id=\"));\n    }\n\n    private String getNodeIdFromTpPath(String tpPath) {\n        String nodeIdKey = \"[node-id='\";\n        return tpPath.substring(tpPath.indexOf(nodeIdKey) + nodeIdKey.length(), tpPath.indexOf(\"']/ietf\"));\n    }\n\n    private String getTpIdFromTpPath(String tpPath) {\n        String tpIdKey = \"[tp-id='\";\n        return tpPath.substring(tpPath.indexOf(tpIdKey) + tpIdKey.length(), tpPath.lastIndexOf(\"']\"));\n    }\n\n    private String getIetfLinkId (String srcNodeId, String srcTpId, String destNodeId, String destTpId) {\n        return srcNodeId + \":\" + srcTpId + \"--\" + destNodeId + \":\" + destTpId;\n    }\n\n    //this is a way to filter out manual lag links\n    //check if objectDetails.linkType is set - manually created links don't have linkType entry\n    private boolean isValidLinkType (String nspServiceId, IYangDB yangDB) {\n        String query = String.format(\"SELECT count(s.dbId) FROM %s s JOIN s.objectDetails sod ON (KEY(sod) = :sodKey) \"\n                                     + \"WHERE s.id = :nspServiceId\", NSP_SERVICE_TABLE);\n        Long count = execute(yangDB.getDb(), tx -> (Long)tx.getEntityManager()\n                .createQuery(query)\n                .setParameter(\"sodKey\", \"linkType\")\n                .setParameter(\"nspServiceId\", nspServiceId)\n                .getSingleResult());\n        return !(count != null && count.intValue() == 0);\n    }\n\n    //Filtering out links terminating on NE, Lag, Bundle, GNI, unmanaged\n    private boolean isValidLinkEndpoints (List<?> endpoints) {\n        boolean isValidEndpoint = true;\n        for(Object endpoint : endpoints) {\n            isValidEndpoint &= isValidPortEndpoint((IYangObject)endpoint);\n        }\n        return isValidEndpoint;\n    }\n\n    private boolean isValidLagEndpoints (List<?> endpoints) {\n        boolean isValidEndpoint = true;\n        for(Object endpoint : endpoints) {\n            isValidEndpoint &= isValidLagEndpoint((IYangObject)endpoint);\n        }\n        return isValidEndpoint;\n    }\n\n    private boolean isValidPortEndpoint (IYangObject aInEndpointObject) {\n        return isValidId(aInEndpointObject.get(\"endpoint-id\").toString())\n               && isValidSiteId(getSiteIdForEndpoint(aInEndpointObject))\n               && (aInEndpointObject.get(\"type\").toString().equals(\"physical-port\"));\n    }\n\n    private boolean isValidLagEndpoint (IYangObject aInEndpointObject) {\n        return isValidId(aInEndpointObject.get(\"endpoint-id\").toString())\n               && isValidSiteId(getSiteIdForEndpoint(aInEndpointObject))\n               && aInEndpointObject.get(\"type\").toString().equals(\"lag\");\n    }\n\n    private String getSiteIdForEndpoint (IYangObject aInEndpointObject) {\n        return aInEndpointObject.get(\"site-id\") != null\n               ? aInEndpointObject.get(\"site-id\").toString() : \"0.0.0.0\";\n    }\n\n    private boolean isValidSiteId (String siteId) {\n        return isValidId(siteId) && !(\"0.0.0.0\").equals(siteId);\n    }\n\n    private boolean isValidId (String id) {\n        return (null != id) && (0 != id.length());\n    }\n\n    private boolean isValidYangPath (String path) {\n        return path.startsWith(\"/nsp-equipment:\")\n               || path.startsWith(\"/nsp-service:\")\n               || path.startsWith(\"/ietf-network:\");\n    }\n\n    //todo: map encap-type?? ietf-l2-topology encap-types: ethernet, vlan, qinq, pbb, trill, vpls, vxlan\n    private String convertEncapType (String encapType) {\n        switch (encapType) {\n            case \"qinq\":\n                return IetfL2EncapType.QINQ.value;\n            case \"dot1q\":\n                return IetfL2EncapType.VLAN.value;//?\n            case \"null-encap\":\n                return IetfL2EncapType.ETHERNET.value;//?\n            default:\n                return null;\n        }\n    }\n\n    private String convertDuplex (String duplex) {\n        switch (duplex) {\n            case \"full-duplex\":\n                return IetfDuplexMode.FULL.value;\n            case \"half-duplex\":\n                return IetfDuplexMode.HALF.value;\n            default:\n                return null;\n        }\n    }\n\n    private String convertMacAddress (String aInMacAddress) {\n        String macAddress = aInMacAddress.replace(\"-\", \":\").replace(\".\", \"\");\n        if (MAC_ADDRESS_PATTERN.matcher(macAddress).matches()) {\n            return macAddress;\n        }\n        if (RAW_MAC_ADDRESS_PATTERN.matcher(macAddress).matches()) {\n            StringBuilder macAddressSB = new StringBuilder(macAddress);\n            macAddressSB.insert(10, ':')\n                    .insert(8, ':')\n                    .insert(6, ':')\n                    .insert(4, ':')\n                    .insert(2, ':');\n            return macAddressSB.toString();\n        }\n        return null;\n    }\n\n    private QueryParameters getFilteredQueryParameters (Fields fields) {\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n        return setFilterOnQueryParameters(qp, fields);\n    }\n\n    private QueryParameters setFilterOnQueryParameters (QueryParameters qp, Fields fields) {\n        qp.setFields(fields);\n        return qp;\n    }\n\n    private IYangObject getSingleFromYangDb(IYangDB yangDB, String path, QueryParameters qp) {\n        List<IYangObject> list = yangDB.getMany(path, qp);\n        if(list != null && !list.isEmpty()){\n            return list.get(0);\n        }\n        return null;\n    }\n\n    private <T> T execute(IDB db, Function<ITransactionContext, T> fn) {\n        try {\n            if (Transactor.isInTransaction()) {\n                return fn.apply(Transactor.getContext());\n            } else {\n                return Transactor.execute(db, fn, true);\n            }\n        } catch (DBRuntimeException e) {\n            dataBaseAccessLogger.error(\"DB ACCESS ERROR: \", e);\n            return null;\n        }\n    }\n\n}\n"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "java-class-path": "com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler",
                        "version": "2.0.2",
                        "java-code": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler/java-code",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.L3UnicastTopologyHandler']/java-code[page-number='1']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "page-number": 1,
                            "page": "/**\n * ***************************************************************************\n *\n * $RCSfile$\n *\n * <Your Name Here>\n *\n * ***************************************************************************\n *\n * $Revision$\n *\n * $Id$\n *\n * ***************************************************************************\n *\n * Copyright (c) 2022 NOKIA Inc. All Rights Reserved. Please read the associated COPYRIGHTS file for more details.\n *\n * ***************************************************************************\n */\npackage com.nokia.nsp.md.converter.yang.plugin;\n\nimport com.alu.nms.common.util.model.ModelFdn;\nimport com.google.common.net.InetAddresses;\nimport com.google.common.primitives.Ints;\nimport com.google.common.util.concurrent.ThreadFactoryBuilder;\nimport com.nokia.nsp.md.common.notif.ObjectCreation;\nimport com.nokia.nsp.md.common.notif.ObjectDeletion;\nimport com.nokia.nsp.md.common.notif.ObjectModification;\nimport com.nokia.nsp.md.common.notif.ObjectReplacement;\nimport com.nokia.nsp.md.converter.api.IMdConverterFw;\nimport com.nokia.nsp.md.converter.yang.plugin.common.ICustomHandler;\nimport com.nokia.nsp.md.converter.yang.plugin.common.IHandleDeleteTracking;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SrcClass;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SyncClass;\n\nimport com.nokia.nsp.md.common.IYangObject;\nimport com.nokia.nsp.md.common.YangObject;\nimport com.nokia.nsp.md.db.yang.api.ExecutionContext;\nimport com.nokia.nsp.md.db.yang.api.QueryParameters;\nimport com.nokia.nsp.md.db.yang.api.config.YangDBConfig;\nimport com.nokia.nsp.md.db.yang.spi.DBType;\nimport com.nokia.nsp.md.ifg.yang.api.Field;\nimport com.nokia.nsp.md.ifg.yang.api.Fields;\nimport com.nokia.nsp.md.ifg.yang.api.YangException;\nimport com.nokia.nsp.md.restconf.client.api.IRestConfClient;\nimport com.nokia.nspos.persistence.api.IDB;\nimport com.nokia.nspos.persistence.impl.db.transaction.DBRuntimeException;\nimport com.nokia.nspos.persistence.impl.db.transaction.ITransactionContext;\nimport com.nokia.nspos.persistence.impl.db.transaction.Transactor;\nimport com.nokia.nspos.persistence.impl.db.util.ModelFdnUtil;\nimport com.nokia.nspos.persistence.yang.api.IYangDB;\nimport edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n@SuppressFBWarnings({\"BX_UNBOXING_IMMEDIATELY_REBOXED\", \"DM_NUMBER_CTOR\", \"BX_UNBOXING_IMMEDIATELY_REBOXED\", \"NP_ALWAYS_NULL\", \"NP_LOAD_OF_KNOWN_NULL_VALUE\"})\npublic class L3UnicastTopologyHandler implements ICustomHandler, IHandleDeleteTracking\n{\n    private static final Logger handleSrcClassLogger = LoggerFactory.getLogger(L3UnicastTopologyHandler.class.getName() + \".handleSrcClass\");\n    private static final Logger handleUpdateLogger = LoggerFactory.getLogger(L3UnicastTopologyHandler.class.getName() + \".handleUpdate\");\n    private static final Logger logger = LoggerFactory.getLogger(L3UnicastTopologyHandler.class.getName());\n\n    private static String NETWORKS_PATH = \"/ietf-network:networks\";\n    private static String L3_NETWORK_PATH = NETWORKS_PATH + \"/network[network-id='%s']\";\n    private static final String LINK_PATH_PREFIX = \"/ietf-network-topology:link\";\n    private static final String LINK_PATH = LINK_PATH_PREFIX + \"[link-id='%s']\";\n    private static final String NODE_PATH = \"/node[node-id='%s']\";\n    private static final String TP_PATH = \"/ietf-network-topology:termination-point[tp-id='%s']\";\n\n    private static final String TP_TYPE = \"ietf-network-topology:termination-point\";\n    private static final String LINK_TYPE = \"ietf-network-topology:link\";\n    private static final String NETWORK_CLASS_PATH =\"ietf-network:/networks/network\";\n    private static final String NODE_CLASS_PATH = NETWORK_CLASS_PATH + \"/node\";\n    private static final String LINK_CLASS_PATH = NETWORK_CLASS_PATH + \"/\" + LINK_TYPE;\n    private static final String SR_MPLS_TYPE = \"ietf-sr-mpls-topology:sr-mpls\";\n\n    private static final String NETWORK_ID = \"network-id\";\n    private static final String NODE_ID = \"node-id\";\n    private static final String LINK_ID = \"link-id\";\n    private static final String TP_ID = \"tp-id\";\n    private static final String NAME = \"name\";\n    private static final String ROUTER_ID = \"router-id\";\n    private static final String IP_ADDRESS = \"ip-address\";\n    private static final String ID = \"id\";\n    private static final String PREFIX = \"prefix\";\n    private static final String MSDS = \"msds\";\n    private static final String SIDS = \"sids\";\n    private static final String MSD_TYPE = \"msd-type\";\n    private static final String MSD_VALUE= \"msd-value\";\n    private static final String VALUE_TYPE= \"value-type\";\n    private static final String SID= \"sid\";\n    private static final String ADDRESS_FAMILY= \"address-family\";\n    private static final String IS_ELG_PROT= \"is-eligible-for-protection\";\n    private static final String IS_LOCAL= \"is-local\";\n    private static final String IS_PART_SET= \"is-part-of-set\";\n    private static final String IS_PERS= \"is-persistent\";\n    private static final String IS_ON_LAN= \"is-on-lan\";\n    private static final String WEIGHT= \"weight\";\n    private static final String SUBNET = \"subnet\";\n    private static final String NODE_TYPE = \"node-type\";\n\n    private static final String IETF_NETWORK_PATH = NETWORKS_PATH + \"/network\";\n\n    private static final String NSP_SERVICE_IGP_LAYER_PATH = \"/nsp-service:services/igp-layer\";\n    private static final String NSP_SERVICE_ADMIN_DOMAIN_PATH = NSP_SERVICE_IGP_LAYER_PATH + \"/admin-domain[name='%s']\";\n    private static final String NSP_SERVICE_ROUTING_INS_PATH = \"/routing-instance[id='%s']\";\n    private static final String NSP_SERVICE_SUBNET_PATH = \"/subnet[id='%s']\";\n    private static final String NSP_SERVICE_LINK_PATH = NSP_SERVICE_IGP_LAYER_PATH + \"/ip-links[name='%s']\";\n    private static final String NSP_SERVICE_GENERIC_PREFIX = NSP_SERVICE_IGP_LAYER_PATH + \"/admin-domain/routing-instance/prefix\";\n\n    private static final String CREATE = \"CREATE\";\n    private static final String UPDATE = \"UPDATE\";\n    private static final String DELETE = \"DELETE\";\n\n    private static final String L2_NETWORK_ID = \"L2Topology\";\n    private static final String L2_NETWORK_PATH = String.format(L3_NETWORK_PATH, L2_NETWORK_ID);\n    private static final String NETWORK_REF = \"network-ref\";\n    private static final String NODE_REF = \"node-ref\";\n    private static final String TP_REF = \"tp-ref\";\n    private static final String LINK_REF = \"link-ref\";\n\n    private static final String SUBINTERFACE_FILTER = \"/nsp-network:network/node[node-id='%s']/node-root/\" +\n            \"openconfig-interfaces:interfaces/interface/subinterfaces/subinterface\";\n    private static final String SUBINTERFACE_UNNUM_FILTER = \"[index='%s']\";\n    private static final String SUPPORTING_NETWORK = \"supporting-network\";\n    private static final String SUPPORTING_NODE = \"supporting-node\";\n    private static final String SUPPORTING_TP = \"supporting-termination-point\";\n    private static final String SUPPORTING_LINK = \"supporting-link\";\n\n    private static final String ADMIN_DOMAIN_SRC_PATH = \"nsp-service:/services/igp-layer/admin-domain\";\n    private static final String ADMIN_DOMAIN_FIELDS = \"name\";\n    private static final String IP_LINK_SRC_PATH =  \"nsp-service:/services/igp-layer/ip-links\";\n    private static final String IP_LINK_FIELDS = \"admin-domains;protocol;name;destination-node;source-node;ip-address;\" +\n            \"cost;te-metric;latency;opposite-link;isis-level;bw;available-bw;un-resv-bw;one-way-min-delay;one-way-max-delay;\" +\n            \"srg-labels;sids\";\n    private static final String ROUTING_INSTANCE_SRC_PATH =  \"nsp-service:/services/igp-layer/admin-domain/routing-instance\";\n    private static final String ROUTING_INSTANCE_FIELDS = \"node-type;protocols;id;name;router/ne;router-id;\" +\n            \"prefix(ip-address;metric);msds\";\n    private static final String SUBNET_SRC_PATH =  \"nsp-service:/services/igp-layer/admin-domain/subnet\";\n    private static final String SUBNET_FIELDS = \"node-type;protocol;id;name;dr-ip-address\";\n    private static final String PREFIX_SRC_PATH =  \"nsp-service:/services/igp-layer/admin-domain/routing-instance/prefix\";\n\n    public static final boolean TE_TOPOLOGY_ENABLED = true;\n    private static final String TIME_FIELD_LAST_MODIFIED = \"lastModifiedTime\";\n\n    private List<String> srcClasses = new ArrayList<> (Arrays.asList(\n            \"nsp-service:/services/igp-layer/admin-domain\",\n            \"nsp-service:/services/igp-layer/admin-domain/routing-instance\",\n            \"nsp-service:/services/igp-layer/admin-domain/routing-instance/prefix\",\n            \"nsp-service:/services/igp-layer/admin-domain/subnet\",\n            \"nsp-service:/services/igp-layer/ip-links\"\n    ));\n\n    private static Map<String, Set<String>> supportingNodeMap = new ConcurrentHashMap();\n    private static Map<String, String> supportingTpMap = new ConcurrentHashMap();\n    private static Map<String, String> supportingLinkMap = new ConcurrentHashMap();\n    private static Map<String, String> oppLinkMap = new ConcurrentHashMap();\n\n    private ScheduledExecutorService correlationService;\n    private ThreadPoolExecutor correlationWorker;\n    private static Map<String, L2TpCreateTask> l2TpCreateEvents = new ConcurrentHashMap();\n    private static Map<String, L2TpDeleteTask> l2TpDeleteEvents = new ConcurrentHashMap();\n    private static Map<String, L2LinkCreateTask> l2LinkCreateEvents = new ConcurrentHashMap();\n    private static Map<String, L2LinkDeleteTask> l2LinkDeleteEvents = new ConcurrentHashMap();\n\n    public L3UnicastTopologyHandler() {\n        try {\n            YangPluginMdConverterProvider mdConverterFw = YangPluginMdConverterProvider.getInstance();\n            IMdConverterFw converterFw = mdConverterFw.getiMdConverterFw();\n            IYangDB yangDB = converterFw.getIYangDB();\n            populateSuportingNodeMap(yangDB);\n            populateSuportingTpMap(yangDB);\n            populateSuportingLinkMap(yangDB);\n            correlationWorker = new ThreadPoolExecutor(\n                    1, 2, 5L, TimeUnit.MINUTES, new LinkedBlockingQueue<>(),\n                    new ThreadFactoryBuilder().setNameFormat(\"L3-correlaion-worker-%d\").build());\n            correlationWorker.allowCoreThreadTimeOut(true);\n        }\n        catch (Exception e) {\n            logger.warn(\"Could not populate the correlation cache\");\n        }\n    }\n\n    void handleL2CreateEvent(ObjectCreation aInObjectNotification, IMdConverterFw aInMdConverterFw) {\n        String instanceId = aInObjectNotification.getInstanceId();\n        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - handleL2CreateEvent - {}\", instanceId);\n        }\n        if(instanceId.contains(L2_NETWORK_PATH)) {\n            if (instanceId.equals(L2_NETWORK_PATH)) {\n                QueryParameters qp = getFilteredQueryParameters(NETWORK_ID);\n                qp.setDepth(2);\n                List<IYangObject> l3NetworkObjList = yangDB.getMany(IETF_NETWORK_PATH, qp);\n                if(l3NetworkObjList != null && !l3NetworkObjList.isEmpty()) {\n                    for(IYangObject l3NetworkObj : l3NetworkObjList) {\n                        String networkId = (String) l3NetworkObj.get(NETWORK_ID);\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - NETWORK ID : {}\", networkId);\n                        }\n                        if(networkId != null && (networkId.contains(\"-ospf\") || networkId.contains(\"-isis\"))) {\n                            String supportingNetworkIdentifier = String.format(L3_NETWORK_PATH, networkId) + \"/\" + SUPPORTING_NETWORK;\n                            if(!yangDB.exists(supportingNetworkIdentifier)) {\n                                logger.debug(\"L3 - createSupportingNetwork {}\", instanceId);\n                                createSupportingNetwork(yangDB, getFilteredQueryParameters(null), networkId, instanceId);\n                            }\n                        }\n                    }\n                }\n            } else if (instanceId.contains(TP_TYPE)) {\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                String port = StringUtils.substringBetween(instanceId, \"[tp-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    if (l2TpCreateEvents.containsKey(neId)) {\n                        L2TpCreateTask l2TpTask = l2TpCreateEvents.get(neId);\n                        if(l2TpDeleteEvents.containsKey(neId) && l2TpDeleteEvents.get(neId).portsToDelete.contains(port)) {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} not added to the queue {} as it was in the list to be removed\", port, neId);\n                            }\n                            l2TpDeleteEvents.get(neId).portsToDelete.remove(port);\n                        }\n                        else {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} added to the queue {} \", port, neId);\n                            }\n                            l2TpTask.portsToAdd.put(port, 1);\n                        }\n                    } else {\n                        L2TpCreateTask tpTask = new L2TpCreateTask(neId, port, aInMdConverterFw);\n                        l2TpCreateEvents.put(neId, tpTask);\n                    }\n                    synchronized (this) {\n                        if (correlationService == null || correlationService.isShutdown()) {\n                            logger.debug(\"L3 - L2 - Correlation - correlationService has been started that will run periodically until correlation is complete\");\n                            correlationService = Executors.newScheduledThreadPool(1,\n                                    new ThreadFactoryBuilder().setNameFormat(\"L3-CorrelationHandler-to-L2\").build());\n                            correlationService.scheduleAtFixedRate(() -> correlateTpsAndLinks(), 2, 2, TimeUnit.MINUTES);\n                        }\n                    }\n                }\n            } else if (instanceId.contains(\"/node\")) {\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - NE ID - {}\", neId);\n                    }\n                    List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n                    for(List<String> router: routers) {\n                        String networkId = router.get(1) + \"-\" + router.get(2);\n                        String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                        String supportingNodeIden = nodeIdentifer + \"/\" + SUPPORTING_NODE;\n                        if(!yangDB.exists(supportingNodeIden) && yangDB.exists(nodeIdentifer)) {\n                            logger.debug(\"L3 - createSupportingNode {}\", instanceId);\n                            createSupportingNode(yangDB, getFilteredQueryParameters(null), networkId, router.get(0), instanceId, nodeIdentifer);\n                        }\n                    }\n                }\n            } else if(instanceId.contains(LINK_TYPE)) {\n                if(!l2LinkCreateEvents.containsKey(instanceId)) {\n                    L2LinkCreateTask l2LinkCreateTask = new L2LinkCreateTask(instanceId, aInMdConverterFw);\n                    l2LinkCreateEvents.put(instanceId, l2LinkCreateTask);\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - correlation - links to correlate: {}\", l2LinkCreateEvents.keySet());\n                    }\n                    startCorrelationService();\n                }\n            }\n        }\n    }\n\n    List<String> getTpDetails(String[] tpDetails, IYangDB yangDB, IMdConverterFw aInMdConverterFw, List<String> aInNetworkDetails) {\n        List<String> l3SourceTps = new ArrayList<>();\n        if(tpDetails != null && tpDetails.length == 2) {\n            String sourceNeId = tpDetails[0];\n            String sourcePort = tpDetails[1];\n            List<List<String>> routers = getRouterDetailsFromNeId(yangDB, sourceNeId);\n            if(routers == null) {\n                return l3SourceTps;\n            }\n            for(List<String> router: routers) {\n                String networkId = router.get(1) + \"-\" + router.get(2);\n                String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                if(aInNetworkDetails != null) {\n                    aInNetworkDetails.add(networkId);\n                }\n                QueryParameters qp = getFilteredQueryParameters(\"tp-id;\" + SUPPORTING_TP);\n                qp.setDepth(2);\n                List<IYangObject> tpList = yangDB.getMany(nodeIdentifer + \"/\" + TP_TYPE, qp);\n                if(tpList != null && !tpList.isEmpty()) {\n                    for(IYangObject tp : tpList) {\n                        String tpId = (String) tp.get(\"tp-id\");\n                        String portName = null;\n                        if(tp.get(SUPPORTING_TP) == null || ((List<IYangObject>) tp.get(SUPPORTING_TP)).isEmpty()) {\n                            portName = getPortDetailsFromDb(tpId, yangDB, sourceNeId);\n                            if (portName == null) {\n                                //try to get the details via openconfig restconf. It works for mdm managed nodes\n                                portName = getSubInterfaces(sourceNeId, aInMdConverterFw, tpId);\n                            }\n                        }\n                        else {\n                            List<IYangObject> supportingTp = (List<IYangObject>) tp.get(SUPPORTING_TP);\n                            String tpRef = (String) supportingTp.get(0).get(TP_REF);\n                            portName = StringUtils.substringBetween(tpRef, \"[tp-id='\", \"']\");\n                        }\n                        if(portName != null && portName.equals(sourcePort)) {\n                            l3SourceTps.add(router.get(0) + \":\" + tpId);\n                        }\n                    }\n                }\n            }\n        }\n        return l3SourceTps;\n    }\n\n    void handleL2DeleteEvent(ObjectDeletion aInObjectNotification, IMdConverterFw aInMdConverterFw) {\n        String instanceId = aInObjectNotification.getInstanceId();\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - handleL2DeleteEvent - {}\", instanceId);\n        }\n        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n\n        if(instanceId.contains(L2_NETWORK_PATH)) {\n            if (instanceId.equals(L2_NETWORK_PATH)) {\n                QueryParameters qp = getFilteredQueryParameters(NETWORK_ID);\n                qp.setDepth(2);\n                List<IYangObject> l3NetworkObjList = yangDB.getMany(IETF_NETWORK_PATH, qp);\n                if(l3NetworkObjList != null && !l3NetworkObjList.isEmpty()) {\n                    for(IYangObject l3NetworkObj : l3NetworkObjList) {\n                        String networkId = (String) l3NetworkObj.get(NETWORK_ID);\n                        if(networkId != null && (networkId.contains(\"-ospf\") || networkId.contains(\"-isis\"))) {\n                            String supportingNetworkIdentifier = String.format(L3_NETWORK_PATH, networkId) + \"/\" + SUPPORTING_NETWORK;\n                            if(yangDB.exists(supportingNetworkIdentifier)) {\n                                updateInDb(yangDB, null, supportingNetworkIdentifier, null, null, DELETE, null, qp);\n                            }\n                        }\n                    }\n                }\n            } else if (instanceId.contains(TP_TYPE)) {\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                String port = StringUtils.substringBetween(instanceId, \"[tp-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    if (l2TpDeleteEvents.containsKey(neId)) {\n                        L2TpDeleteTask l2TpTask = l2TpDeleteEvents.get(neId);\n                        if(l2TpCreateEvents.containsKey(neId) && l2TpCreateEvents.get(neId).portsToAdd.containsKey(port)) {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} not added to the delete queue {} as it was in the list to be added\", port, neId);\n                            }\n                            l2TpCreateEvents.get(neId).portsToAdd.remove(port);\n                        }\n                        else {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - Correlation - Port {} added to the delete queue {} \", port, neId);\n                            }\n                            l2TpTask.portsToDelete.add(port);\n                        }\n                    } else {\n                        L2TpDeleteTask tpTask = new L2TpDeleteTask(neId, port, aInMdConverterFw);\n                        l2TpDeleteEvents.put(neId, tpTask);\n                    }\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(l2TpDeleteEvents.keySet().toString());\n                    }\n                    startCorrelationService();\n                }\n            } else if (instanceId.contains(\"/node\")) {\n                if(supportingNodeMap.containsKey(instanceId)) {\n                    for (String nodeIden : supportingNodeMap.get(instanceId)) {\n                        String supportingNodeIden = nodeIden + \"/\" + SUPPORTING_NODE;\n                        if (yangDB.exists(supportingNodeIden)) {\n                            logger.debug(\"L3 - deleteSupportingNode {}\", supportingNodeIden);\n                            updateInDb(yangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                            String supportingTpIden = nodeIden + \"/\" + TP_TYPE + \"/\" + SUPPORTING_TP;\n                            if(yangDB.exists(supportingTpIden)) {\n                                logger.debug(\"L3 - deleteSupportingTps on node {}\", supportingNodeIden);\n                                updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                supportingTpMap.entrySet().removeIf(entry -> entry.getKey().startsWith(instanceId));\n                            }\n                        }\n                    }\n                    supportingNodeMap.remove(instanceId);\n                    return;\n                }\n                String neId = StringUtils.substringBetween(instanceId, \"[node-id='\", \"']\");\n                if(neId != null || !neId.isEmpty()) {\n                    List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n                    if(routers != null) {\n                        for (List<String> router : routers) {\n                            String networkId = router.get(1) + \"-\" + router.get(2);\n                            String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                            String supportingNodeIden = nodeIdentifer + \"/\" + SUPPORTING_NODE;\n                            if (yangDB.exists(supportingNodeIden)) {\n                                logger.debug(\"L3 - deleteSupportingNode {}\", supportingNodeIden);\n                                updateInDb(yangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                            }\n                        }\n                    }\n                }\n            } else if(instanceId.contains(LINK_TYPE)) {\n                if(!l2LinkDeleteEvents.containsKey(instanceId)) {\n                    L2LinkDeleteTask l2LinkDeleteTask = new L2LinkDeleteTask(instanceId, aInMdConverterFw);\n                    l2LinkDeleteEvents.put(instanceId, l2LinkDeleteTask);\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - correlation - links to delete correlation: {}\", l2LinkDeleteEvents.keySet());\n                    }\n                    startCorrelationService();\n                }\n            }\n        }\n    }\n\n    private void deleteL2SupportingTps(List<String> portsToDelete, String neId, IYangDB yangDB) {\n        List<String> deletedPorts = new ArrayList<>();\n        for(String port : portsToDelete) {\n            String instanceId = L2_NETWORK_PATH + String.format(NODE_PATH, neId) + String.format(TP_PATH, port);\n            if (supportingTpMap.containsKey(instanceId)) {\n                String supportingTpIden = supportingTpMap.get(instanceId) + \"/\" + SUPPORTING_TP;\n                if (yangDB.exists(supportingTpIden)) {\n                    logger.debug(\"L3 - deleteSupportingTp {}\", supportingTpIden);\n                    updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                }\n                supportingTpMap.remove(instanceId);\n                deletedPorts.add(port);\n            }\n        }\n\n        portsToDelete.removeAll(deletedPorts);\n        if(portsToDelete.isEmpty()) {\n            return;\n        }\n\n        List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n        if(routers != null) {\n            for (List<String> router : routers) {\n                String networkId = router.get(1) + \"-\" + router.get(2);\n                String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                QueryParameters qp = getFilteredQueryParameters(\"tp-id;\" + SUPPORTING_TP);\n                qp.setDepth(2);\n                List<IYangObject> tpList = yangDB.getMany(nodeIdentifer + \"/\" + TP_TYPE, qp);\n                if (tpList != null && !tpList.isEmpty()) {\n                    for (IYangObject tp : tpList) {\n                        if (tp.get(SUPPORTING_TP) != null) {\n                            String supportingTpRef = (String) ((IYangObject) ((List) tp.get(SUPPORTING_TP)).get(0)).get(TP_REF);\n                            String port = StringUtils.substringBetween(supportingTpRef, \"[tp-id='\", \"']\");\n                            if (portsToDelete.contains(port)) {\n                                String tpId = (String) tp.get(TP_ID);\n                                String tpIden = nodeIdentifer + String.format(TP_PATH, tpId);\n                                String supportingTpIden = tpIden + \"/\" + SUPPORTING_TP;\n                                if (yangDB.exists(supportingTpIden)) {\n                                    logger.debug(\"L3 - deleteSupportingTp {}\", supportingTpIden);\n                                    updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                }\n                                portsToDelete.remove(port);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private void correlateTpsAndLinks() {\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - Running routine correlation task\");\n        }\n        Map<String, L2TpCreateTask> l2TpCreateTaskMap =new HashMap<>(l2TpCreateEvents);\n        l2TpCreateEvents.clear();\n        Map<String, L2TpDeleteTask> l2TpDeleteTaskMap =new HashMap<>(l2TpDeleteEvents);\n        l2TpDeleteEvents.clear();\n        Map<String, L2LinkCreateTask> l2LinkCreateTaskMap =new HashMap<>(l2LinkCreateEvents);\n        l2LinkCreateEvents.clear();\n        Map<String, L2LinkDeleteTask> l2LinkDeleteTaskMap =new HashMap<>(l2LinkDeleteEvents);\n        l2LinkDeleteEvents.clear();\n\n        if(!l2TpCreateTaskMap.isEmpty()) {\n            for(L2TpCreateTask l2TpTask : l2TpCreateTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate ports creation on {}\", l2TpTask.neId);\n                correlationWorker.execute(l2TpTask);\n            }\n        }\n\n        if(!l2TpDeleteTaskMap.isEmpty()) {\n            for(L2TpDeleteTask l2TpTask : l2TpDeleteTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate ports deletion on {}\", l2TpTask.neId);\n                correlationWorker.execute(l2TpTask);\n            }\n        }\n\n        if(!l2LinkCreateTaskMap.isEmpty()) {\n            for(L2LinkCreateTask l2LinkTask : l2LinkCreateTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate link creation {}\", l2LinkTask.linkId);\n                correlationWorker.execute(l2LinkTask);\n            }\n        }\n\n        if(!l2LinkDeleteTaskMap.isEmpty()) {\n            for(L2LinkDeleteTask l2LinkTask : l2LinkDeleteTaskMap.values()) {\n                logger.debug(\"L3 - Trying to correlate link deletion {}\", l2LinkTask.linkId);\n                correlationWorker.execute(l2LinkTask);\n            }\n        }\n\n        if(l2TpCreateEvents.isEmpty() && l2TpDeleteEvents.isEmpty()\n                && l2LinkCreateEvents.isEmpty() && l2LinkDeleteEvents.isEmpty()) {\n            logger.debug(\"L3 - correlationService is shutdown\");\n            correlationService.shutdown();\n        }\n\n    }\n\n    @Override\n    public int readSrcObjectDepth(String aInSrcClassPath) {\n        if(aInSrcClassPath.equals(ROUTING_INSTANCE_SRC_PATH)) {\n            return 3;\n        }\n        else {\n            return 2;\n        }\n    }\n\n    @Override\n    public Fields srcFilterFieldsToInclude(String aInSrcClassPath) {\n        if(aInSrcClassPath.equals(ADMIN_DOMAIN_SRC_PATH)) {\n            return Fields.parse(ADMIN_DOMAIN_FIELDS);\n        }\n        else if(aInSrcClassPath.equals(IP_LINK_SRC_PATH)) {\n            return Fields.parse(IP_LINK_FIELDS);\n        }\n        else if(aInSrcClassPath.equals(ROUTING_INSTANCE_SRC_PATH)) {\n            return Fields.parse(ROUTING_INSTANCE_FIELDS);\n        }\n        else if(aInSrcClassPath.equals(SUBNET_SRC_PATH)) {\n            return Fields.parse(SUBNET_FIELDS);\n        }\n        else {\n            return null;\n        }\n    }\n\n    @Override\n    public void handlePostResyncDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        //this method is called after the fwk deletes the object. extra post processing logics like cleaning up routing instances/tp.\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"POST RE-SYNC DELETE - aInSrcClass:{}, aInSyncClass:{}\", aInSrcClass, aInSyncClass);\n        }\n    }\n\n    @Override\n    public void handleTrackedDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, String aInIdentifier, Map<String, Object> aInData,  YangPluginMdConverterProvider aInYangPlugin)\n    {\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInIdentifier:{}, aInData:{}\", aInSrcClass, aInSyncClass, aInIdentifier, aInData);\n        }\n        IMdConverterFw converterFw = aInYangPlugin.getiMdConverterFw();\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n        IYangDB yangDB = converterFw.getIYangDB();\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInSrcClass.getSrcClassPath().equals(IP_LINK_SRC_PATH)) {\n            Map<String, Object> linkObj = new HashMap<>();\n            linkObj.put(NAME, StringUtils.substringBetween(aInIdentifier, \"ip-links[name='\", \"'\"));\n            logger.debug(\"L3 - handleTrackedDelete - DELETING LINK - {} \", aInIdentifier);\n            deleteLink(yangDB, qp, linkObj, dbConfig, null);\n        }\n        else if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n            String ipAddress = StringUtils.substringBetween(aInIdentifier, \"prefix[ip-address='\", \"'\");\n            logger.debug(\"L3 - handleTrackedDelete - DELETING PREFIX {}, {} \", aInIdentifier, ipAddress);\n            deletePrefix(yangDB, qp, aInIdentifier, ipAddress);\n        }\n        else if(aInSrcClass.getSrcClassPath().equals(SUBNET_SRC_PATH)) {\n            String networkId = extractAdminDomain(aInIdentifier) + \"-\" + aInData.get(\"protocols\");\n            logger.debug(\"L3 - handleTrackedDelete - DELETING SUBNET - {}, {} \", aInIdentifier, networkId);\n            deleteNode(yangDB, qp, aInData, dbConfig, networkId, null);\n        }\n        else if(aInSrcClass.getSrcClassPath().equals(ADMIN_DOMAIN_SRC_PATH)) {\n            String adminDomain = StringUtils.substringBetween(aInIdentifier, \"admin-domain[name='\", \"'\");\n            IYangObject yangObj = new YangObject();\n            yangObj.setProperty(NAME, adminDomain);\n            logger.debug(\"L3 - handleTrackedDelete - DELETING NETWORK - {} \", aInIdentifier);\n            deleteNetwork(yangDB, qp, yangObj);\n        }\n    }\n\n\n    public void handleResync(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInExistingObject,\n                             String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        if(handleSrcClassLogger.isDebugEnabled()) {\n            handleSrcClassLogger.debug(\"---------------------------------------------------------RE-SYNC----------------------------------------------------------------------\");\n            handleSrcClassLogger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n        }\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n\n        if (aInSyncClass.getDestClassPath().equals(NETWORK_CLASS_PATH)) {\n            handleSrcClassLogger.debug(\"L3 - RESYNC NETWORK - {}\", aInSrcObject.get(NAME) );\n            createL3Network(aInSrcObject, yangDB, dbConfig, converterFw);\n        }\n        else if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            Map<String, Object> srcObject = aInSrcObject.asMap();\n            handleSrcClassLogger.debug(\"L3 - RESYNC NODE - {}\", srcObject.get(ID));\n            String networkId = getNetworkIdFromMeta(yangDB, srcObject);\n            if(networkId == null) {\n                return;\n            }\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            QueryParameters qp = getFilteredQueryParameters(null);\n            //could be routing instance or subnet.\n            if(yangDB.exists(networkPathIdentifier, qp)) {\n                if (srcObject.get(NODE_TYPE).equals(SUBNET)) {\n                    if(handleSrcClassLogger.isDebugEnabled()) {\n                        handleSrcClassLogger.debug(\"L3 - SUBNET\");\n                    }\n                    createSubnet(srcObject, yangDB, dbConfig, networkId, null);\n                } else {\n                    if(handleSrcClassLogger.isDebugEnabled()) {\n                        handleSrcClassLogger.debug(\"L3 - NODE\");\n                    }\n                    createRoutingInstance(srcObject, yangDB, networkId);\n                }\n            }\n            else {\n                handleSrcClassLogger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", srcObject.get(ID));\n            }\n\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n            Map<String, Object> srcObject = aInSrcObject.asMap();\n            handleSrcClassLogger.debug(\"L3 - RESYNC LINK - {}\", srcObject.get(NAME));\n            String networkId = getNetworkIdFromLink((List<String>) srcObject.get(\"admin-domains\"), (String) srcObject.get(\"protocol\"));\n            if(networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                QueryParameters qp = getFilteredQueryParameters(null);\n                if (yangDB.exists(networkPathIdentifier, qp)) {\n                    createLink(srcObject, yangDB, converterFw, networkId, false, null);\n                }\n                else {\n                    handleSrcClassLogger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", srcObject.get(NAME));\n                }\n            }\n        }\n    }\n\n    @Override\n    public void handleCreateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectCreation aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n\n        if(aInEvent.getInstanceId().contains(L2_NETWORK_PATH)) {\n            handleL2CreateEvent(aInEvent, converterFw);\n            return;\n        }\n\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"---------------------------------------------------CREATION---------------------------------------------------------------------------\");\n        }\n        IYangDB yangDB = converterFw.getIYangDB();\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n        if (aInSyncClass.getDestClassPath().equals(NETWORK_CLASS_PATH)) {\n            logger.debug(\"L3 - CREATE NETWORK\");\n            createL3Network(aInEvent.getEntity(), yangDB, dbConfig, converterFw);\n        }\n        else if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n                logger.debug(\"L3 - CREATE PREFIX\");\n                createPrefix(yangDB, getFilteredQueryParameters(null), aInEvent);\n            }\n            else {\n                logger.debug(\"L3 - CREATE NODE\");\n                Map<String, Object> srcObject = aInEvent.getEntity().asMap();\n                String id = (String) srcObject.get(ID);\n                String adminDomain = getAdminDomainFromMeta(srcObject);\n                String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n                nspServiceNodeIden += srcObject.get(NODE_TYPE).equals(SUBNET) ? String.format(NSP_SERVICE_SUBNET_PATH, id)\n                        : String.format(NSP_SERVICE_ROUTING_INS_PATH, id);\n                QueryParameters qp = srcObject.get(NODE_TYPE).equals(SUBNET) ?\n                        getFilteredQueryParameters(\"node-type;protocol;id;name;dr-ip-address\") :\n                        getFilteredQueryParameters(\"node-type;protocols;id;name;router/ne;router-id;prefix(ip-address;metric)\");\n                //IYangObject nodeObj = yangDB.getSingle(nspServiceNodeIden, qp);\n                //GetMany for debug\n                qp.setLimit(2);\n                List<IYangObject> nodeObjs = yangDB.getMany(nspServiceNodeIden, qp);\n                IYangObject nodeObj=null;\n                if(nodeObjs.size()>0){\n                    nodeObj=nodeObjs.get(0);\n                }\n                if(nodeObjs.size()>1){\n                    logger.error(\"More than one object returned for path: {}\", nspServiceNodeIden);\n                }\n\n                if (nodeObj != null) {\n                    Map<String, Object> nodeMap = nodeObj.asMap();\n                    String networkId = getNetworkIdFromMeta(yangDB, nodeMap);\n                    if(networkId == null) {\n                        return;\n                    }\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    qp = getFilteredQueryParameters(null);\n                    //could be routing instance or subnet.\n                    if (yangDB.exists(networkPathIdentifier, qp)) {\n                        if (nodeMap.get(NODE_TYPE).equals(SUBNET)) {\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - CREATE SUBNET\");\n                            }\n                            createSubnet(nodeMap, yangDB, dbConfig, networkId, null);\n                        } else {\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - CREATE ROUTING-INSTANCE\");\n                            }\n                            createRoutingInstance(nodeMap, yangDB, networkId);\n                        }\n                    }\n                } else {\n                    logger.warn(\"L3 - Not found: \" + nspServiceNodeIden);\n                }\n            }\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n            logger.debug(\"L3 - CREATE LINK\");\n            String name = (String) aInEvent.getEntity().get(NAME);\n            String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n            QueryParameters qp = getFilteredQueryParameters(IP_LINK_FIELDS);\n            IYangObject linkObj = yangDB.getSingle(nspServiceIpLinkIden, qp);\n\n            if(linkObj != null) {\n                String networkId = getNetworkIdFromLink((List<String>) linkObj.get(\"admin-domains\"), (String) linkObj.get(\"protocol\"));\n                if (networkId != null) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    if (yangDB.exists(networkPathIdentifier, qp)) {\n                        createLink(linkObj.asMap(), yangDB, converterFw, networkId, true, null);\n                    } else {\n                        logger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", linkObj.get(NAME));\n                    }\n                }\n            }\n        }\n    }\n\n    void createL3Network(IYangObject aInSrcObject, IYangDB aInYangDB, YangDBConfig aInDbConfig, IMdConverterFw aInConverterFw) {\n\n        String adminDomain = (String) aInSrcObject.get(NAME);\n        if(\"UnknownDomain\".equals(adminDomain)) {\n            return;\n        }\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInSrcObject != null) {\n            String networkId = getNetworkId(aInYangDB, aInSrcObject);\n            if (networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                try {\n                    if (!aInYangDB.exists(networkPathIdentifier, qp)) {\n                        logger.debug(\"L3 - creating new network: {}\", networkId);\n                        qp = getFilteredQueryParameters(null);\n\n                        IYangObject l3NetworkObj = new YangObject();\n                        l3NetworkObj.setProperty(NETWORK_ID, networkId);\n                        IYangObject networkTypesObj = new YangObject();\n                        IYangObject l3UnicastNwObj = new YangObject();\n                        l3UnicastNwObj.setProperty(SR_MPLS_TYPE, new YangObject());\n                        networkTypesObj.setProperty(\"ietf-l3-unicast-topology:l3-unicast-topology\", l3UnicastNwObj);\n                        l3NetworkObj.setProperty(\"network-types\", networkTypesObj);\n\n                        YangObject topologyAttrObj = new YangObject();\n                        topologyAttrObj.setProperty(\"name\", aInSrcObject.get(NAME));\n                        l3NetworkObj.setProperty(\"ietf-l3-unicast-topology:l3-topology-attributes\", topologyAttrObj);\n\n                        updateInDb(aInYangDB, l3NetworkObj, \"\", NETWORKS_PATH, \"network\", CREATE, null, qp);\n\n\n                        //create supporting-network\n                        String supportingNetworkRef = getSupportingNetworkRef(aInYangDB, qp);\n                        if(supportingNetworkRef != null) {\n                            createSupportingNetwork(aInYangDB, qp, networkId, supportingNetworkRef);\n                        }\n                        /* resync is based on equipment.networkelement table and so if there are no corresponding NEs\n                        discovered for the routers, we wouldn't get any nodes. so it is important (at least for now) to\n                        get the network and build the nodes from that info instead of relying on the node resync events.\n                        */\n//                        createRoutingInstances(aInSrcObject.get(\"routing-instance\"), aInYangDB, networkId);\n//                        createSubnets(aInSrcObject.get(\"subnet\"), aInYangDB, aInDbConfig, networkId);\n                    } else {\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - network exists already - {} \", networkId);\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.error(\"L3 - Exception when creating IETF L3 network: \" + networkId, e);\n                    return;\n                }\n\n                //create TE Network\n                String teNetworkRef = createTeNetwork(networkId, aInYangDB);\n                if(teNetworkRef != null) {\n                    createTeNetworkRef(aInYangDB, getFilteredQueryParameters(null), networkId, teNetworkRef);\n                }\n            }\n        }\n    }\n\n    String createTeNetwork(String networkId, IYangDB aInYangDB) {\n        if(!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n        String teNetworkId = getTeNetworkId(networkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n        try {\n            if (!aInYangDB.exists(teNetworkPathIdentifier, qp)) {\n                logger.debug(\"TE Topology - creating new network: {}\", teNetworkId);\n\n                IYangObject networkObj = new YangObject();\n                networkObj.setProperty(NETWORK_ID, teNetworkId);\n                IYangObject networkTypesObj = new YangObject();\n                IYangObject packetTypesObj = new YangObject();\n                packetTypesObj.setProperty(\"ietf-te-topology-packet:packet\", new YangObject());\n                networkTypesObj.setProperty(\"ietf-te-topology:te-topology\", packetTypesObj);\n                networkObj.setProperty(\"network-types\", networkTypesObj);\n\n                YangObject topologyProviderIdObj = new YangObject();\n                topologyProviderIdObj.setProperty(\"topology-id\", \"\");\n                topologyProviderIdObj.setProperty(\"client-id\", 0);\n                topologyProviderIdObj.setProperty(\"provider-id\", 0);\n                networkObj.setProperty(\"ietf-te-topology:te-topology-identifier\", topologyProviderIdObj);\n\n                updateInDb(aInYangDB, networkObj, \"\", NETWORKS_PATH, \"network\", CREATE, null, qp);\n                return teNetworkPathIdentifier;\n            } else {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"TE Topology - network exists already - {} \", teNetworkId);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"TE Topology - Exception when creating TE network object {}: {}\", teNetworkId, e);\n        }\n        return  null;\n    }\n\n    void createSubnets(Object aInSubnets, IYangDB aInYangDB, YangDBConfig aInDbConfig, String networkId) {\n\n        if (aInSubnets != null && ((List) aInSubnets).size() > 0) {\n            List<IYangObject> subnets = (List<IYangObject>) aInSubnets;\n            for (IYangObject subnet : subnets) {\n                createSubnet(subnet.asMap(), aInYangDB, aInDbConfig, networkId, null);\n            }\n        }\n    }\n\n\n    void createSubnet(Map<String,Object> aInSubnet, IYangDB aInYangDB, YangDBConfig aInDbConfig, String networkId, String aInRouterId) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n        String systemId = getSubnetSystemId((String) aInSubnet.get(NAME));\n        String routerId = aInRouterId;\n        if(routerId == null) {\n            if (systemId.contains(\"dr\")) {\n                routerId = (String) aInSubnet.get(\"dr-ip-address\");\n            }\n            routerId = routerId == null ? InetAddresses.isInetAddress(systemId) ? systemId : getSubnetNodeIdFromDB(aInDbConfig, systemId, networkId) : routerId;\n            if (routerId == null) {\n                logger.error(\"Couldn't create the subnet node because router-id is null for {}\", systemId);\n                return;\n            }\n        }\n        String nodeId = routerId +\"-\"+getSubnetPsnId((String) aInSubnet.get(NAME));\n        String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n\n        if (!aInYangDB.exists(nodePathIdentifier, qp)) {\n            logger.debug(\"L3 - creating new subnet: {} on {}\", nodeId, networkId);\n            IYangObject nodeObj = new YangObject();\n            nodeObj.setProperty(NETWORK_ID, networkId);\n            nodeObj.setProperty(NODE_ID, nodeId);\n            IYangObject nodeAttrObj = new YangObject();\n            nodeAttrObj.setProperty(NETWORK_ID, networkId);\n            nodeAttrObj.setProperty(NAME, aInSubnet.get(NAME));\n            nodeAttrObj.setProperty(ROUTER_ID, Arrays.asList(new String[]{nodeId}));\n            nodeAttrObj.setProperty(\"flag\", Collections.singletonList(\"nsp-ietf-network-topology:subnet\"));\n            nodeObj.setProperty(\"ietf-l3-unicast-topology:l3-node-attributes\", nodeAttrObj);\n            logger.debug(\"L3 - createSubnet - {}\", networkPathIdentifier);\n            updateInDb(aInYangDB, nodeObj, \"\", networkPathIdentifier, \"node\", CREATE, null, qp);\n        }\n\n        //create TE network subnet\n        String teNodeRef = createTeNode(networkId, aInYangDB, nodeId, routerId);\n        if(teNodeRef != null) {\n            String teNetworkRef = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId));\n            createTeNodeRef(aInYangDB, getFilteredQueryParameters(null), networkId, nodeId, teNetworkRef, teNodeRef);\n        }\n    }\n\n    String createTeNode(String networkId,IYangDB aInYangDB, String nodeId, String teNodeId) {\n        if(!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n        String teNetworkId = getTeNetworkId(networkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n       String teNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, nodeId);\n\n        if (!aInYangDB.exists(teNodePathIdentifier, qp)) {\n            logger.debug(\"TE Topology - creating new node: {} on {}\", nodeId, teNetworkId);\n            IYangObject nodeObj = new YangObject();\n            nodeObj.setProperty(NETWORK_ID, teNetworkId);\n            nodeObj.setProperty(NODE_ID, nodeId);\n            nodeObj.setProperty(\"te-node-id\", teNodeId);\n            logger.debug(\"L3 - createTeNode - {}\", teNetworkPathIdentifier);\n            updateInDb(aInYangDB, nodeObj, \"\", teNetworkPathIdentifier, \"node\", CREATE, null, qp);\n            return teNodePathIdentifier;\n        }\n        return null;\n    }\n\n\n    void createRoutingInstances(Object aInRoutingInstances, IYangDB aInYangDB, String networkId) {\n\n        if (aInRoutingInstances != null && ((List) aInRoutingInstances).size() > 0) {\n            List<IYangObject> routingInstances = (List<IYangObject>) aInRoutingInstances;\n            for (IYangObject routingInstance : routingInstances) {\n                createRoutingInstance(routingInstance.asMap(), aInYangDB, networkId);\n            }\n        }\n    }\n\n    void createRoutingInstance(Map<String,Object> aInRoutingInstance, IYangDB aInYangDB, String networkId) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n        String nodeId = (String) aInRoutingInstance.get(ID);\n        String routerId = (String) aInRoutingInstance.get(ROUTER_ID);\n        String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n\n        if (!aInYangDB.exists(nodePathIdentifier, qp)) {\n            logger.debug(\"L3 - creating new routing instance: {} on {}\", nodeId, networkId);\n            IYangObject nodeObj = new YangObject();\n            nodeObj.setProperty(NETWORK_ID, networkId);\n            nodeObj.setProperty(NODE_ID, nodeId);\n            IYangObject nodeAttrObj = new YangObject();\n            nodeAttrObj.setProperty(NETWORK_ID, networkId);\n            nodeAttrObj.setProperty(NAME, aInRoutingInstance.get(NAME));\n            nodeAttrObj.setProperty(ROUTER_ID, Arrays.asList(new String[]{routerId}));\n            nodeAttrObj.setProperty(\"flag\", Collections.singletonList(\"nsp-ietf-network-topology:routing-instance\"));\n            nodeObj.setProperty(\"ietf-l3-unicast-topology:l3-node-attributes\", nodeAttrObj);\n\n            updateInDb(aInYangDB, nodeObj, \"\", networkPathIdentifier, \"node\", CREATE, null, qp);\n\n            //create supporting-node\n            Map routerDetails = (Map) aInRoutingInstance.get(\"router\");\n            if(routerDetails != null && routerDetails.containsKey(\"ne\")) {\n                String neId = extractNeId((String) routerDetails.get(\"ne\"));\n                if(neId != null) {\n                    String supportingNodeRef = getSupportingNodeRef(aInYangDB, qp, neId);\n                    if(supportingNodeRef != null) {\n                        String supportingNodeIden = nodePathIdentifier + \"/\" + SUPPORTING_NODE;\n                        if(!aInYangDB.exists(supportingNodeIden, qp)) {\n                            createSupportingNode(aInYangDB, qp, networkId, nodeId, supportingNodeRef, nodePathIdentifier);\n                        }\n                    }\n                }\n            }\n\n            //create prefixes\n            List<Map<String,Object>> prefixes = (List) aInRoutingInstance.get(PREFIX);\n            if(prefixes != null) {\n                Set<String> prefixSet = new HashSet<>();\n                for (Map<String, Object> prefix : prefixes) {\n                    if (!prefixSet.contains(prefix.get(IP_ADDRESS))) {\n                        prefixSet.add((String) prefix.get(IP_ADDRESS));\n                        IYangObject prefixObj = new YangObject();\n                        prefixObj.setProperty(NETWORK_ID, networkId);\n                        prefixObj.setProperty(NODE_ID, nodeId);\n                        prefixObj.setProperty(PREFIX, prefix.get(IP_ADDRESS));\n                        prefixObj.setProperty(\"metric\", prefix.get(\"metric\"));\n                        updateInDb(aInYangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, qp);\n                    }\n                }\n            }\n\n            //create sr mpls MSDs\n            List<Map<String,Object>> msds = (List) aInRoutingInstance.get(MSDS);\n            if(msds != null) {\n                IYangObject srMplsObj = new YangObject();\n                srMplsObj.setProperty(NETWORK_ID, networkId);\n                srMplsObj.setProperty(NODE_ID, nodeId);\n\n                IYangObject msdObj = new YangObject();\n                msdObj.setProperty(NETWORK_ID, networkId);\n                msdObj.setProperty(NODE_ID, nodeId);\n                srMplsObj.setProperty(MSDS, msdObj);\n\n                String nodeAttrIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\";\n                updateInDb(aInYangDB, srMplsObj, \"\", nodeAttrIden, SR_MPLS_TYPE, CREATE, null, qp);\n\n                for(Map<String, Object> msd : msds) {\n                    IYangObject nodeMsdObj = new YangObject();\n                    nodeMsdObj.setProperty(NETWORK_ID, networkId);\n                    nodeMsdObj.setProperty(NODE_ID, nodeId);\n                    nodeMsdObj.setProperty(MSD_TYPE, msd.get(MSD_TYPE));\n                    nodeMsdObj.setProperty(MSD_VALUE, msd.get(MSD_VALUE));\n                    updateInDb(aInYangDB, nodeMsdObj, \"\", nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"node-msd\", CREATE, null, qp);\n                }\n            }\n        }\n        else {\n            /** there could be updates during resync.\n             * prefix (L3) and msd (SR MPLS) could have been updated or created */\n\n            List<Map<String,Object>> prefixes = (List) aInRoutingInstance.get(PREFIX);\n            if(prefixes != null) {\n                Set<String> prefixSet = new HashSet<>();\n                for (Map<String, Object> prefix : prefixes) {\n                    String ipAddress = (String) prefix.get(IP_ADDRESS);\n                    if(!prefixSet.contains(prefix.get(IP_ADDRESS))) {\n                        String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                        QueryParameters queryParameters = getFilteredQueryParameters(null);\n                        if (aInYangDB.exists(prefixPathIden, queryParameters)) {\n                            //update\n                            logger.debug(\"L3 -  handleResync - prefix - UPDATE {}\", prefixPathIden);\n                            IYangObject prefixObj = aInYangDB.getSingle(prefixPathIden, queryParameters);\n                            if (prefixObj != null) {\n                                int metric = (int) prefix.get(\"metric\");\n                                prefixObj.setProperty(\"metric\", metric);\n                                updateInDb(aInYangDB, prefixObj, prefixPathIden, null, null, UPDATE, null, queryParameters);\n                            }\n                        } else {\n                            logger.debug(\"L3 -  handleResync - prefix - CREATE {}\", prefixPathIden);\n                            IYangObject prefixObj = new YangObject();\n                            prefixObj.setProperty(NETWORK_ID, networkId);\n                            prefixObj.setProperty(NODE_ID, nodeId);\n                            prefixObj.setProperty(PREFIX, prefix.get(IP_ADDRESS));\n                            prefixObj.setProperty(\"metric\", prefix.get(\"metric\"));\n                            updateInDb(aInYangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, qp);\n                        }\n                        prefixSet.add((String) prefix.get(IP_ADDRESS));\n                    }\n                }\n            }\n\n            List<Map<String,Object>> msds = (List) aInRoutingInstance.get(MSDS);\n            if(msds != null) {\n                //copy code from updateMsds\n                updateMsd(aInYangDB, nodeId, aInRoutingInstance, networkId);\n            }\n\n            //create supporting-node\n            Map routerDetails = (Map) aInRoutingInstance.get(\"router\");\n            if(routerDetails != null && routerDetails.containsKey(\"ne\")) { //check this for unmanaged NE\n                String neId = extractNeId((String) routerDetails.get(\"ne\"));\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"*********** - NE {} {}\", neId, routerDetails.get(\"ne\"));\n                }\n                if(neId != null) {\n                    String supportingNodeRef = getSupportingNodeRef(aInYangDB, qp, neId);\n                    if(supportingNodeRef != null) {\n                        String supportingNodeIden = nodePathIdentifier + \"/\" + SUPPORTING_NODE;\n                        if(!aInYangDB.exists(supportingNodeIden, qp)) {\n                            logger.debug(\"L3 -  Resync Node - createSupportingNode {}\", supportingNodeIden);\n                            createSupportingNode(aInYangDB, qp, networkId, nodeId, supportingNodeRef, nodePathIdentifier);\n                        }\n                    }\n                }\n                else {\n                    //NE could have been unmanaged\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"*********** - Trying to delete supporting node {}\", nodePathIdentifier);\n                    }\n                    String supportingNodeIden = nodePathIdentifier + \"/\" + SUPPORTING_NODE;\n                    if (aInYangDB.exists(supportingNodeIden)) {\n                        IYangObject supportingNodeObj = aInYangDB.getSingle(supportingNodeIden, getFilteredQueryParameters(null));\n                        String l2NodeRef = (String) supportingNodeObj.get(\"node-ref\");\n                        if(supportingNodeMap.containsKey(l2NodeRef)) {\n                            for (String nodeIden : supportingNodeMap.get(l2NodeRef)) {\n                                if(nodeIden.equals(nodePathIdentifier)) {\n                                    logger.debug(\"L3 -  Resync Node - deleteSupportingNode {}\", supportingNodeIden);\n                                    updateInDb(aInYangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                }\n                                else {\n                                    supportingNodeIden = nodeIden + \"/\" + SUPPORTING_NODE;\n                                    if (aInYangDB.exists(supportingNodeIden)) {\n                                        logger.debug(\"L3 -  Resync Node - deleteSupportingNode {}\", supportingNodeIden);\n                                        updateInDb(aInYangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                                    }\n                                }\n                            }\n                            supportingNodeMap.remove(l2NodeRef);\n                        }\n                        else {\n                            logger.debug(\"L3 -  handleResync - delete supporting node {}\", supportingNodeIden);\n                            updateInDb(aInYangDB, null, supportingNodeIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                        }\n                    }\n                }\n            }\n\n        }\n\n        //create te node\n\n        String teNodeRef = createTeNode(networkId, aInYangDB, nodeId, nodeId);\n        if(teNodeRef != null) {\n            String teNetworkRef = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId));\n            createTeNodeRef(aInYangDB, getFilteredQueryParameters(null), networkId, nodeId, teNetworkRef, teNodeRef);\n        }\n    }\n\n    boolean createTerminationPoint(IYangDB aInYangDB, String aInNodeIdentifier, IMdConverterFw aInConverterFw, String aInTpIdentifier,\n                                   String aInNetworkId, String aInNodeId, String aInTpId, List<String> aInTpDetails) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n        if(aInYangDB.exists(aInNodeIdentifier, qp)) {\n            String neId = getNeIdFromRouterId(aInYangDB, aInNetworkId, aInNodeId);\n            String portName = null;\n            if(neId != null) {\n                portName = getPortDetailsFromDb(aInTpId, aInYangDB, neId);\n                if (portName == null) {\n                    //try to get the details via openconfig restconf. It works for mdm managed nodes\n                    portName = getSubInterfaces(neId, aInConverterFw, aInTpId);\n                    if(portName == null) {\n                        logger.warn(\"Couldn't find L2 port on the NE-ID:{} for the L3 TP-ID: {}. \" +\n                                \"So correlation is not established.\", neId, aInTpId);\n                    }\n                }\n            }\n            if(!aInYangDB.exists(aInTpIdentifier, qp)) {\n                IYangObject tpObj = new YangObject();\n                tpObj.setProperty(NETWORK_ID, aInNetworkId);\n                tpObj.setProperty(NODE_ID, aInNodeId);\n                tpObj.setProperty(TP_ID, aInTpId);\n                IYangObject tpAttrObj = new YangObject();\n                tpAttrObj.setProperty(NETWORK_ID, aInNetworkId);\n                tpAttrObj.setProperty(NODE_ID, aInNodeId);\n                tpAttrObj.setProperty(TP_ID, aInTpId);\n                if(aInTpId.contains(\"%\")) {\n                    int unnumbered = Integer.parseInt(aInTpId.split(\"%\")[1]);\n                    tpAttrObj.setProperty(\"unnumbered-id\", unnumbered);\n                } else{\n                    try{\n                        int unnumbered = Integer.parseInt(aInTpId);\n                        tpAttrObj.setProperty(\"unnumbered-id\", unnumbered);\n                    }\n                    catch(NumberFormatException e) {\n                        tpAttrObj.setProperty(IP_ADDRESS, Arrays.asList(new String[]{aInTpId}));\n                    }\n                }\n                tpObj.setProperty(\"ietf-l3-unicast-topology:l3-termination-point-attributes\", tpAttrObj);\n\n                updateInDb(aInYangDB, tpObj, \"\", aInNodeIdentifier, TP_TYPE, CREATE, null, qp);\n\n                if(neId != null && portName != null) {\n                    String supportingTpRef = getSupportingTpRef(aInYangDB, qp, neId, portName);\n                    if (supportingTpRef != null) {\n                        String supportingTpIden = aInTpIdentifier + \"/\" + SUPPORTING_TP;\n                        if(!aInYangDB.exists(supportingTpIden, qp)) {\n                            createSupportingTp(aInYangDB, qp, aInNetworkId, aInNodeId, aInTpId, neId, supportingTpRef, aInTpIdentifier);\n                        }\n                    }\n                }\n            }\n            else {\n                // supporting port could have been created/deleted.\n                // node could have been managed/unmanaged.\n                String supportingTpIden = aInTpIdentifier + \"/\" + SUPPORTING_TP;\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"******------ - L3 -  SUPPORTING TP UPDATE {} {} \", neId, portName);\n                }\n                if(neId != null) {\n                    if(portName != null) {\n                        // ne could have been managed or port could have been created\n                        String supportingTpRef = getSupportingTpRef(aInYangDB, qp, neId, portName);\n                        if (supportingTpRef != null) {\n                            if(!aInYangDB.exists(supportingTpIden, qp)) {\n                                logger.debug(\"L3 - RESYNC TP - createSupportingTp {} , {}\", supportingTpIden, supportingTpRef);\n                                createSupportingTp(aInYangDB, qp, aInNetworkId, aInNodeId, aInTpId, neId, supportingTpRef, aInTpIdentifier);\n                            }\n                        }\n                    }\n                    else {\n                        // port could have been deleted\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"******------ - L3 -  PORT IS NULL - TRYING TO DELETE SUPPORTING TP {} \", supportingTpIden);\n                        }\n                        deleteSupportingTp(supportingTpIden, aInYangDB);\n                    }\n                }\n                else { //ne id will be null if the ne is unmanaged.\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"******------ - L3 - NE IS NULL - TRYING TO DELETE SUPPORTING TP {} \", supportingTpIden);\n                    }\n                    deleteSupportingTp(supportingTpIden, aInYangDB);\n                }\n            }\n            if(neId != null && portName != null) {\n                aInTpDetails.add(neId);\n                aInTpDetails.add(portName);\n            }\n            return true;\n        } else {\n            logger.warn(\"L3 - Couldn't create termination point \" + aInTpIdentifier + \" because node doesn't exist - \" + aInNodeIdentifier);\n            return false;\n        }\n    }\n\n    String createTeTerminationPoint(String aInNetworkId, IYangDB aInYangDB, String aInNodeId, String aInTpId) {\n        if(!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n        String teNetworkId = getTeNetworkId(aInNetworkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n        String teNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, aInNodeId);\n        String teTPPathIdentifier = teNodePathIdentifier + String.format(TP_PATH, aInTpId);\n\n        if (aInYangDB.exists(teNodePathIdentifier,qp) && !aInYangDB.exists(teTPPathIdentifier, qp)) {\n            logger.debug(\"TE Topology - creating new TP: {} on {}\", aInTpId, aInNodeId);\n            IYangObject tpObj = new YangObject();\n            tpObj.setProperty(NETWORK_ID, teNetworkId);\n            tpObj.setProperty(NODE_ID, aInNodeId);\n            tpObj.setProperty(TP_ID, aInTpId);\n            if(aInTpId.contains(\"%\")) {\n                tpObj.setProperty(\"te-tp-id\", aInTpId.split(\"%\")[1]);\n            }\n            else {\n                tpObj.setProperty(\"te-tp-id\", aInTpId);\n            }\n\n            updateInDb(aInYangDB, tpObj, \"\", teNodePathIdentifier, TP_TYPE, CREATE, null, qp);\n\n            //update the L3 to TE ref.\n            createTeTpRef(aInYangDB, getFilteredQueryParameters(null), aInNetworkId, aInNodeId, aInTpId, teNetworkPathIdentifier, teNodePathIdentifier, teTPPathIdentifier);\n            return teTPPathIdentifier;\n        }\n        return null;\n    }\n\n    void createLink(Map<String,Object> aInLink, IYangDB aInYangDB, IMdConverterFw aInConverterFw, String networkId, boolean aInCheckOppLink, String aInDstTpId) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n        logger.debug(\"Creating Link {}, \", aInLink.get(NAME));\n        Map<String, String> srcNode =  getLinkNodeDetails((String) aInLink.get(\"source-node\"));\n        Map<String, String> dstNode =  getLinkNodeDetails((String) aInLink.get(\"destination-node\"));\n        if(srcNode.isEmpty() || dstNode.isEmpty()) {\n            logger.warn(\"L3 - parsing error to get src node / dst node on the link {}\", aInLink.entrySet().toString());\n            return;\n        }\n        String srcNodeId = srcNode.get(ID);\n        String dstNodeId = dstNode.get(ID);\n        String srcTpId = (String) aInLink.get(IP_ADDRESS);\n        String dstTpId = null;\n\n        if(aInDstTpId != null) {\n            dstTpId = aInDstTpId;\n        }\n        else {\n            if (srcNode.get(NODE_TYPE).equals(SUBNET)) {\n                IYangObject nodeObj = aInYangDB.getSingle((String) aInLink.get(\"source-node\"),\n                        getFilteredQueryParameters(\"name;dr-ip-address\"));\n\n                if (nodeObj != null) {\n                    String subnetNodeId = (String) nodeObj.get(\"dr-ip-address\");\n                    if(subnetNodeId == null || subnetNodeId.isEmpty()) {\n                        srcNodeId = (String) nodeObj.get(NAME);\n                        String systemId = getSubnetSystemId(srcNodeId);\n                        subnetNodeId = InetAddresses.isInetAddress(systemId) ? systemId :\n                                getSubnetNodeIdFromDB(aInConverterFw.getYangDBConfig(), systemId, networkId);\n                    }\n                    srcNodeId = subnetNodeId == null ? srcNodeId : subnetNodeId + \"-\" + getSubnetPsnId(srcNodeId);\n                    dstTpId = srcTpId;\n                }\n                else {\n                    logger.warn(\"L3 - CreateLink - SUBNET IS NOT IN DB\" + aInLink.get(\"source-node\"));\n                }\n\n            } else if (dstNode.get(NODE_TYPE).equals(SUBNET)) {\n                IYangObject nodeObj = aInYangDB.getSingle((String) aInLink.get(\"destination-node\"),\n                        getFilteredQueryParameters(\"name;dr-ip-address\"));\n\n                if (nodeObj != null) {\n                    String subnetNodeId = (String) nodeObj.get(\"dr-ip-address\");\n                    if(subnetNodeId == null || subnetNodeId.isEmpty()) {\n                        dstNodeId = (String) nodeObj.get(NAME);\n                        String systemId = getSubnetSystemId(dstNodeId);\n                        subnetNodeId = InetAddresses.isInetAddress(systemId) ? systemId :\n                                getSubnetNodeIdFromDB(aInConverterFw.getYangDBConfig(), systemId, networkId);\n                    }\n                    dstNodeId = subnetNodeId == null ? dstNodeId : subnetNodeId + \"-\" + getSubnetPsnId(dstNodeId);\n                    dstTpId = srcTpId;\n                }\n                else {\n                    logger.warn(\"L3 - CreateLink - SUBNET IS NOT IN DB\" + aInLink.get(\"destination-node\"));\n                }\n            }\n\n            dstTpId = dstTpId == null ? getTerminationPointId((String) aInLink.get(\"opposite-link\"), aInYangDB, networkId) : dstTpId;\n        }\n        if(dstTpId == null) {\n            logger.warn(\"L3 - couldn't find opposite L3 link and destination TP for {} on {}\", aInLink.get(NAME), networkId);\n            oppLinkMap.put(srcNodeId + \":\" + srcTpId + \"--\" + dstNodeId, aInLink.get(NAME).toString());\n            return;\n        }\n        String isisLevel =  aInLink.get(\"protocol\").equals(\"isis\") ? (String) aInLink.get(\"isis-level\") : null;\n        String linkId = getLinkId(srcNodeId, dstNodeId, srcTpId, dstTpId, isisLevel);\n        String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n\n        if (!aInYangDB.exists(linkPathIdentifier, qp)) {\n            logger.debug(\"creating new L3 link: {} on {}\", linkId, networkId);\n            IYangObject linkObj = new YangObject();\n            linkObj.setProperty(NETWORK_ID, networkId);\n            linkObj.setProperty(LINK_ID, linkId);\n            IYangObject linkAttrObj = new YangObject();\n            linkAttrObj.setProperty(NETWORK_ID, networkId);\n            linkAttrObj.setProperty(NAME, aInLink.get(NAME));\n            linkAttrObj.setProperty(\"metric1\", aInLink.get(\"cost\"));\n            linkAttrObj.setProperty(\"metric2\", aInLink.get(\"te-metric\"));\n            linkAttrObj.setProperty(\"flag\", Collections.singletonList(\"nsp-ietf-network-topology:igp\"));\n            linkObj.setProperty(\"ietf-l3-unicast-topology:l3-link-attributes\", linkAttrObj);\n\n            //source-node\n\n            String srcNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, srcNodeId);\n            String srcNodeTPIdentifier = srcNodeIdentifier + String.format(TP_PATH, srcTpId);\n            List<String> srcTpDetails = new ArrayList<>();\n            if(!createTerminationPoint(aInYangDB, srcNodeIdentifier, aInConverterFw, srcNodeTPIdentifier, networkId, srcNodeId, srcTpId, srcTpDetails))\n            {\n                logger.warn(\"L3 - Termination point creation failed {}, {}\", srcNodeIdentifier, srcNodeTPIdentifier);\n                return;\n            }\n            YangObject srcObj = new YangObject();\n            srcObj.setProperty(NETWORK_ID, networkId);\n            srcObj.setProperty(LINK_ID, linkId);\n            srcObj.setProperty(\"source-node\", srcNodeIdentifier);\n            srcObj.setProperty(\"source-tp\", srcNodeTPIdentifier);\n            linkObj.setProperty(\"source\", srcObj);\n\n            //destination-node\n            String dstNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, dstNodeId);\n            String dstNodeTPIdentifier = dstNodeIdentifier + String.format(TP_PATH, dstTpId);\n            List<String> dstTpDetails = new ArrayList<>();\n            if(!createTerminationPoint(aInYangDB, dstNodeIdentifier, aInConverterFw, dstNodeTPIdentifier, networkId, dstNodeId, dstTpId, dstTpDetails))\n            {\n                logger.warn(\"L3 - Termination point creation failed {}, {}\", dstNodeIdentifier, dstNodeTPIdentifier);\n                return;\n            }\n            YangObject dstObj = new YangObject();\n            dstObj.setProperty(NETWORK_ID, networkId);\n            dstObj.setProperty(LINK_ID, linkId);\n            dstObj.setProperty(\"dest-node\", dstNodeIdentifier);\n            dstObj.setProperty(\"dest-tp\", dstNodeTPIdentifier);\n            linkObj.setProperty(\"destination\", dstObj);\n\n            updateInDb(aInYangDB, linkObj, \"\", networkPathIdentifier, LINK_TYPE, CREATE, null, qp);\n\n            //create sr mpls MSDs and SIDs\n            List<Map<String,Object>> msds = (List) aInLink.get(MSDS);\n            List<Map<String,Object>> sids = (List) aInLink.get(SIDS);\n\n            if(msds != null || sids != null) {\n                IYangObject srMplsObj = new YangObject();\n                srMplsObj.setProperty(NETWORK_ID, networkId);\n                srMplsObj.setProperty(LINK_ID, linkId);\n                if(msds != null) {\n                    IYangObject msdObj = new YangObject();\n                    msdObj.setProperty(NETWORK_ID, networkId);\n                    msdObj.setProperty(LINK_ID, linkId);\n                    srMplsObj.setProperty(MSDS, msdObj);\n                }\n\n                if(sids != null) {\n                    IYangObject sidObject = new YangObject();\n                    sidObject.setProperty(NETWORK_ID, networkId);\n                    sidObject.setProperty(LINK_ID, linkId);\n                    srMplsObj.setProperty(SIDS, sidObject);\n                }\n\n                String linkAttrIden = linkPathIdentifier + \"/ietf-l3-unicast-topology:l3-link-attributes\";\n                updateInDb(aInYangDB, srMplsObj, \"\", linkAttrIden, SR_MPLS_TYPE, CREATE, null, qp);\n\n                if(msds != null) {\n                    for (Map<String, Object> msd : msds) {\n                        IYangObject nodeMsdObj = new YangObject();\n                        nodeMsdObj.setProperty(NETWORK_ID, networkId);\n                        nodeMsdObj.setProperty(LINK_ID, linkId);\n                        nodeMsdObj.setProperty(MSD_TYPE, msd.get(MSD_TYPE));\n                        nodeMsdObj.setProperty(MSD_VALUE, msd.get(MSD_VALUE));\n                        updateInDb(aInYangDB, nodeMsdObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"link-msd\", CREATE, null, qp);\n                    }\n                }\n\n                if(sids != null) {\n                    Set<String> existingSids = new HashSet<>();\n                    for (Map<String, Object> sid : sids) {\n                        IYangObject nodeSidObj = new YangObject();\n                        nodeSidObj.setProperty(NETWORK_ID, networkId);\n                        nodeSidObj.setProperty(LINK_ID, linkId);\n                        nodeSidObj.setProperty(VALUE_TYPE, sid.get(VALUE_TYPE));\n                        nodeSidObj.setProperty(SID, sid.get(SID));\n                        nodeSidObj.setProperty(ADDRESS_FAMILY, sid.get(ADDRESS_FAMILY));\n                        nodeSidObj.setProperty(IS_ELG_PROT, sid.get(IS_ELG_PROT));\n                        nodeSidObj.setProperty(IS_LOCAL, sid.get(IS_LOCAL));\n                        nodeSidObj.setProperty(IS_PART_SET, sid.get(IS_PART_SET));\n                        nodeSidObj.setProperty(IS_PERS, sid.get(IS_PERS));\n                        nodeSidObj.setProperty(IS_ON_LAN, sid.get(IS_ON_LAN));\n                        nodeSidObj.setProperty(WEIGHT, sid.get(WEIGHT));\n\n                        String sidKey = sid.get(VALUE_TYPE).toString() +\"-\"+ sid.get(SID);\n                        if(!existingSids.contains(sidKey)) {\n                            updateInDb(aInYangDB, nodeSidObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids\", \"sid\", CREATE, null, qp);\n                            existingSids.add(sidKey);\n                        }\n                    }\n                }\n            }\n\n            //supporting link\n\n            if(!srcTpDetails.isEmpty() && srcTpDetails.size() >= 2 && !dstTpDetails.isEmpty() && dstTpDetails.size() >=2) {\n                String supportingLinkRef = getSupportingLinkRef(aInYangDB, qp,\n                        getLinkId(srcTpDetails.get(0), dstTpDetails.get(0), srcTpDetails.get(1), dstTpDetails.get(1), null));\n                if (supportingLinkRef != null) {\n                    String supportingLinkIden = linkPathIdentifier + \"/\" + SUPPORTING_LINK;\n                    if(!aInYangDB.exists(supportingLinkIden, qp)) {\n                        createSupportingLink(aInYangDB, qp, networkId, linkId, supportingLinkRef, linkPathIdentifier);\n                    }\n                }\n            }\n        }\n        else {\n            // link properties could have got updated.resync the updatable properties\n\n            IYangObject ietfLinkObj = aInYangDB.getSingle(linkPathIdentifier, qp);\n            if (ietfLinkObj != null) {\n                logger.debug(\"L3 - RESYNC LINK - updating link: {} on {}\", linkId, networkId);\n                IYangObject linkAttrObj = (YangObject) ietfLinkObj.get(\"ietf-l3-unicast-topology:l3-link-attributes\");\n                linkAttrObj.setProperty(\"metric1\", aInLink.get(\"cost\"));\n                linkAttrObj.setProperty(\"metric2\", aInLink.get(\"te-metric\"));\n                ietfLinkObj.setProperty(\"ietf-l3-unicast-topology:l3-link-attributes\", linkAttrObj);\n                ietfLinkObj.removeProperty(SUPPORTING_LINK);\n                updateInDb(aInYangDB, ietfLinkObj, linkPathIdentifier, null, null, UPDATE, null, getFilteredQueryParameters(null));\n            }\n\n            if(aInLink.get(SIDS) != null) {\n                updateSid(aInYangDB, qp, aInLink, linkPathIdentifier, networkId, linkId);\n            }\n\n            // update supporting link.\n\n            //source-node\n            String srcNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, srcNodeId);\n            String srcNodeTPIdentifier = srcNodeIdentifier + String.format(TP_PATH, srcTpId);\n            List<String> srcTpDetails = new ArrayList<>();\n            createTerminationPoint(aInYangDB, srcNodeIdentifier, aInConverterFw, srcNodeTPIdentifier, networkId, srcNodeId, srcTpId, srcTpDetails);\n\n            //destination-node\n            String dstNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, dstNodeId);\n            String dstNodeTPIdentifier = dstNodeIdentifier + String.format(TP_PATH, dstTpId);\n            List<String> dstTpDetails = new ArrayList<>();\n            createTerminationPoint(aInYangDB, dstNodeIdentifier, aInConverterFw, dstNodeTPIdentifier, networkId, dstNodeId, dstTpId, dstTpDetails);\n\n            String supportingLinkIden = linkPathIdentifier + \"/\" + SUPPORTING_LINK;\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"******------ - L3 -  SUPPORTING TP UPDATE {} {} \", supportingLinkIden, !srcTpDetails.isEmpty() && srcTpDetails.size() >= 2 && !dstTpDetails.isEmpty() && dstTpDetails.size() >= 2);\n            }\n            if(!srcTpDetails.isEmpty() && srcTpDetails.size() >= 2 && !dstTpDetails.isEmpty() && dstTpDetails.size() >=2) {\n                String supportingLinkRef = getSupportingLinkRef(aInYangDB, qp,\n                        getLinkId(srcTpDetails.get(0), dstTpDetails.get(0), srcTpDetails.get(1), dstTpDetails.get(1), null));\n                if (supportingLinkRef != null) {\n                    if(!aInYangDB.exists(supportingLinkIden, qp)) {\n                        logger.debug(\"L3 - RESYNC LINK - CREATING SUPPORTING LINK {} \", supportingLinkIden);\n                        createSupportingLink(aInYangDB, qp, networkId, linkId, supportingLinkRef, linkPathIdentifier);\n                    }\n                    else if(logger.isDebugEnabled()) {\n                        logger.debug(\"******------ - SUPPORTING LINK EXISTS {} \", supportingLinkIden);\n                    }\n                }\n                else {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"******------ - L3 TRYING TO DELETE SUPPORTING LINK {} \", supportingLinkIden);\n                    }\n                    deleteSupportingLink(supportingLinkIden, aInYangDB);\n                }\n\n            }\n            else if(aInYangDB.exists(supportingLinkIden, qp)) {\n               //delete supporting link ref\n                logger.debug(\"*********** - L3 TRYING TO DELETE SUPPORTING LINK {} \", supportingLinkIden);\n                deleteSupportingLink(supportingLinkIden, aInYangDB);\n            }\n        }\n\n        createTeLink(networkId, aInYangDB, aInLink, linkId, srcNodeId, srcTpId, dstNodeId, dstTpId);\n\n        // Sometimes during eventing, it happens that both the link is not in dmodel and so we failed to create the opp link earlier.\n        // so this is our second chance\n        if(aInCheckOppLink) {\n            String[] idSplits = linkId.split(\"--\");\n            String[] dstSplit = idSplits[0].split(\":\");\n            if(oppLinkMap.containsKey(idSplits[1] + \"--\" + dstSplit[0])) {\n                String name = oppLinkMap.remove(idSplits[1] + \"--\" + dstSplit[0]);\n                String oppLinkId = getOppIetfLinkId(linkId);\n                String oppLinkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, oppLinkId);\n                if (!aInYangDB.exists(oppLinkPathIdentifier, getFilteredQueryParameters(null))) {\n                    //create the opposite link\n                    logger.debug(\"L3 - CREATING OPP LINK with name: {} \", name);\n                    String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n                    IYangObject linkObj = aInYangDB.getSingle(nspServiceIpLinkIden, getFilteredQueryParameters(IP_LINK_FIELDS));\n\n                    if (linkObj != null) {\n                        createLink(linkObj.asMap(), aInYangDB, aInConverterFw, networkId, false, dstSplit[1]);\n                    }\n                }\n            }\n        }\n    }\n\n    String createTeLink(String aInNetworkId, IYangDB aInYangDB, Map<String,Object> aInLink, String aInLinkId,\n                      String aInSrcNodeId, String aInSrcTpId, String aInDstNodeId, String aInDstTpId) {\n        if (!TE_TOPOLOGY_ENABLED) {\n            return null;\n        }\n\n        createTeTerminationPoint(aInNetworkId, aInYangDB, aInSrcNodeId, aInSrcTpId);\n        createTeTerminationPoint(aInNetworkId, aInYangDB, aInDstNodeId, aInDstTpId);\n\n        String teNetworkId = getTeNetworkId(aInNetworkId);\n        String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n        QueryParameters qp = getFilteredQueryParameters(null);\n\n        String teSrcNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, aInSrcNodeId);\n        String teSrcTPPathIdentifier = teSrcNodePathIdentifier + String.format(TP_PATH, aInSrcTpId);\n\n        String teDstNodePathIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, aInDstNodeId);\n        String teDstTPPathIdentifier = teDstNodePathIdentifier + String.format(TP_PATH, aInDstTpId);\n\n        String teLinkPathIdentifier = teNetworkPathIdentifier + String.format(LINK_PATH, aInLinkId);\n\n        if (!aInYangDB.exists(teLinkPathIdentifier, qp)) {\n            logger.debug(\"TE Topology - creating new Link: {} on {}\", aInLinkId, teNetworkId);\n            IYangObject linkObj = new YangObject();\n            linkObj.setProperty(NETWORK_ID, teNetworkId);\n            linkObj.setProperty(LINK_ID, aInLinkId);\n            YangObject srcObj = new YangObject();\n            srcObj.setProperty(NETWORK_ID, teNetworkId);\n            srcObj.setProperty(LINK_ID, aInLinkId);\n            srcObj.setProperty(\"source-node\", teSrcNodePathIdentifier);\n            srcObj.setProperty(\"source-tp\", teSrcTPPathIdentifier);\n            linkObj.setProperty(\"source\", srcObj);\n\n            YangObject dstObj = new YangObject();\n            dstObj.setProperty(NETWORK_ID, teNetworkId);\n            dstObj.setProperty(LINK_ID, aInLinkId);\n            dstObj.setProperty(\"dest-node\", teDstNodePathIdentifier);\n            dstObj.setProperty(\"dest-tp\", teDstTPPathIdentifier);\n            linkObj.setProperty(\"destination\", dstObj);\n\n            IYangObject teObj = new YangObject();\n            IYangObject linkAttrObj = new YangObject();\n            linkAttrObj.setProperty(NETWORK_ID, teNetworkId);\n            linkAttrObj.setProperty(LINK_ID, aInLinkId);\n            linkAttrObj.setProperty(\"te-default-metric\", aInLink.get(\"te-metric\"));\n            linkAttrObj.setProperty(\"te-delay-metric\", aInLink.get(\"latency\"));\n            linkAttrObj.setProperty(\"te-igp-metric\", aInLink.get(\"cost\"));\n\n            if(aInLink.get(\"bw\") != null) {\n\n                IYangObject maxLinkBandwidth = new YangObject();\n                maxLinkBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxLinkBandwidth.setProperty(LINK_ID, aInLinkId);\n                IYangObject maxLinkTeBandwidth = new YangObject();\n                maxLinkTeBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxLinkTeBandwidth.setProperty(LINK_ID, aInLinkId);\n                // convert kilo bits to bytes and then to IEEE 754 format.\n                maxLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes((Long) aInLink.get(\"bw\")))));\n                maxLinkBandwidth.setProperty(\"te-bandwidth\", maxLinkTeBandwidth);\n\n                IYangObject maxResvLinkBandwidth = new YangObject();\n                maxResvLinkBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxResvLinkBandwidth.setProperty(LINK_ID, aInLinkId);\n                IYangObject maxResvLinkTeBandwidth = new YangObject();\n                maxResvLinkTeBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxResvLinkTeBandwidth.setProperty(LINK_ID, aInLinkId);\n                maxResvLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes((Long) aInLink.get(\"bw\")))));\n                maxResvLinkBandwidth.setProperty(\"te-bandwidth\", maxResvLinkTeBandwidth);\n\n                linkAttrObj.setProperty(\"max-link-bandwidth\", maxLinkBandwidth);\n                linkAttrObj.setProperty(\"max-resv-link-bandwidth\", maxResvLinkBandwidth);\n            }\n\n            IYangObject tesrlgs = new YangObject();\n            tesrlgs.setProperty(\"value\", aInLink.get(\"srg-labels\"));\n            linkAttrObj.setProperty(\"te-srlgs\", tesrlgs);\n\n            IYangObject performanceMetricsOneWay = new YangObject();\n            performanceMetricsOneWay.setProperty(NETWORK_ID, teNetworkId);\n            performanceMetricsOneWay.setProperty(LINK_ID, aInLinkId);\n            performanceMetricsOneWay.setProperty(\"one-way-delay\", aInLink.get(\"latency\"));\n            performanceMetricsOneWay.setProperty(\"one-way-min-delay\", aInLink.get(\"one-way-min-delay\"));\n            performanceMetricsOneWay.setProperty(\"one-way-max-delay\", aInLink.get(\"one-way-max-delay\"));\n            if(aInLink.get(\"available-bw\") != null) {\n                performanceMetricsOneWay.setProperty(\"one-way-utilized-bandwidth\", String.format(\"%a\",\n                        Float.valueOf(convertKiloBitstoBytes((Long) aInLink.get(\"available-bw\")))));\n            }\n            linkAttrObj.setProperty(\"ietf-te-topology-packet:performance-metrics-one-way\", performanceMetricsOneWay);\n            linkAttrObj.setProperty(NAME, aInLink.get(NAME));\n\n            teObj.setProperty(\"te-link-attributes\", linkAttrObj);\n            teObj.setProperty(NETWORK_ID, teNetworkId);\n            teObj.setProperty(LINK_ID, aInLinkId);\n            linkObj.setProperty(\"ietf-te-topology:te\", teObj);\n\n            updateInDb(aInYangDB, linkObj, \"\", teNetworkPathIdentifier, LINK_TYPE, CREATE, null, qp);\n            createTeLinkRef(aInYangDB, getFilteredQueryParameters(null), aInNetworkId, aInLinkId, teNetworkPathIdentifier, teLinkPathIdentifier);\n\n            for(int i = 0 ; i <= 7 ; i++) {\n                IYangObject maxUnResvBandwidth = new YangObject();\n                maxUnResvBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxUnResvBandwidth.setProperty(LINK_ID, aInLinkId);\n                maxUnResvBandwidth.setProperty(\"priority\", i);\n                IYangObject maxUnResvTeBandwidth = new YangObject();\n                maxUnResvTeBandwidth.setProperty(NETWORK_ID, teNetworkId);\n                maxUnResvTeBandwidth.setProperty(LINK_ID, aInLinkId);\n                maxUnResvTeBandwidth.setProperty(\"priority\", i);\n                Long unResvBw = (Long) aInLink.get(\"un-resv-bw\");\n                unResvBw = unResvBw == null ? 0 : unResvBw;\n                maxUnResvTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes(unResvBw))));\n                maxUnResvBandwidth.setProperty(\"te-bandwidth\", maxUnResvTeBandwidth);\n                updateInDb(aInYangDB, maxUnResvBandwidth, \"\", teLinkPathIdentifier + \"/ietf-te-topology:te/te-link-attributes\" , \"unreserved-bandwidth\", CREATE, null, qp);\n            }\n            return teLinkPathIdentifier;\n        }\n        else {\n            //TE link could have got updated. resync the properties.\n            if(updateTeLink(aInYangDB, qp, aInLink, teLinkPathIdentifier, teNetworkId, aInLinkId, true)) {\n                    updateTeLinkPriority(aInYangDB, aInLink, teLinkPathIdentifier);\n            }\n        }\n        return null;\n    }\n\n    long convertKiloBitstoBytes(long aInBW) {\n        return aInBW * 125;\n    }\n\n    private void createPrefix(IYangDB aInYangDB, QueryParameters aInQp, ObjectCreation aInEvent) {\n\n        String instanceId = aInEvent.getInstanceId();\n        String adminDomain = extractAdminDomain(instanceId);\n        String nodeId = StringUtils.substringBetween(instanceId, \"routing-instance[id='\", \"'\");\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n        nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, nodeId);\n        QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols\");\n        IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n\n        if (nodeObj != null) {\n            Map<String, Object> nodeMap = nodeObj.asMap();\n            String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n            if (networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                String ipAddress = (String) aInEvent.getEntity().get(IP_ADDRESS);\n                String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                if (aInYangDB.exists(nodePathIdentifier) && !aInYangDB.exists(prefixPathIden, aInQp)) {\n                    IYangObject prefixObj = new YangObject();\n                    prefixObj.setProperty(NETWORK_ID, networkId);\n                    prefixObj.setProperty(NODE_ID, nodeId);\n                    prefixObj.setProperty(PREFIX, ipAddress);\n                    prefixObj.setProperty(\"metric\", aInEvent.getEntity().get(\"metric\"));\n                    updateInDb(aInYangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, aInQp);\n                }\n            }\n        }\n    }\n\n    public void handleUpdateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectModification aInEvent,\n                                  String aInNeId, YangPluginMdConverterProvider aInMdResyncFw)\n    {\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n            logger.debug(\"---------------------------------------------------UPDATE---------------------------------------------------------------------------\");\n        }\n\n        IMdConverterFw converterFw = aInMdResyncFw.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n                logger.debug(\"L3 - handleUpdateEvent - UPDATE PREFIX\");\n                updatePrefix(yangDB, getFilteredQueryParameters(null), aInEvent);\n            }\n            else {\n                boolean isValidSrMplsUpdate = false;\n                for (ObjectModification.Change change : aInEvent.getChanges()) {\n                    if(MSDS.equals(change.getName())) {\n                        logger.debug(\"L3 - handleUpdateEvent - node MSD update\");\n                        Map<String, Object> node = aInEvent.getEntity().asMap();\n                        updateMsd(yangDB, StringUtils.substringBetween(aInEvent.getInstanceId(),\n                                \"routing-instance[id='\", \"'\"), node, getNetworkIdFromMeta(yangDB, node));\n                    }\n                    else if(ID.equals(change.getName())) {\n                        logger.debug(\"L3 - handleUpdateEvent - node ID update\");\n                        updateNodeAndLinks(yangDB, change.getOldValue().toString(), change.getNewValue().toString(),\n                                aInEvent.getInstanceId(), converterFw);\n                    }\n                }\n            }\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n            logger.debug(\"L3 - handleUpdateEvent - UPDATE LINK\");\n            updateLink(yangDB, aInEvent, converterFw);\n        }\n    }\n\n    private void updateNodeAndLinks(IYangDB aInYangDB, String aInOldRouterId, String aInNewRouterId, String aInInstanceId,\n                                    IMdConverterFw aInConverterFw) {\n        /*Router-id has changed due to correlation.\n        1. delete the old node/tps/links and subnet node if any.\n        2. create new node and the links, tps, etc.\n        */\n        YangDBConfig dbConfig = aInConverterFw.getYangDBConfig();\n        String adminDomain = extractAdminDomain(aInInstanceId);\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n        nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, aInNewRouterId);\n        QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols;id;name;router/ne;router-id;prefix(ip-address;metric)\");\n        IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n        if (nodeObj != null) {\n            Map<String, Object> nodeMap = nodeObj.asMap();\n            String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n            if (networkId != null) {\n                //There can be more than one nodes in IETF as there can be subnets on that node\n                List<Object> nodeIds = getNodeIds(aInYangDB, aInOldRouterId, networkId);\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"<><><><><> nodes: {}\", nodeIds.toString());\n                }\n                List<String> linkNames = new ArrayList<>();\n                Map<String,String> subnetNames = new HashMap<>();\n                if(CollectionUtils.isNotEmpty(nodeIds)) {\n                    nodeIds.forEach(node -> {\n                        String nodeId = node.toString();\n                        //get the links that originate or end on this nodeId\n                        List<Map<String,Object>> linkList = getLinkDetails(aInYangDB, nodeId, networkId);\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"<><><><><> links : {}\", linkList.toString());\n                        }\n                        if(CollectionUtils.isNotEmpty(linkList)) {\n                            linkList.forEach(linkMap -> {\n                                Object[] linkObj = new Object[2];\n                                linkObj[0] = linkMap.get(LINK_ID);\n                                linkObj[1] = networkId;\n                                List<Object> linkObjList = new ArrayList<>();\n                                linkObjList.add(linkObj);\n                                deleteLink(aInYangDB, getFilteredQueryParameters(null), linkMap, dbConfig, linkObjList);\n                                linkNames.add(linkMap.get(NAME).toString());\n                            });\n                        }\n                        if(nodeId.contains(\"psn\")) {\n                            List<Object> subnetName = getSubnetName(aInYangDB, nodeId, networkId);\n                            if(CollectionUtils.isNotEmpty(subnetName)) {\n                                subnetNames.put(nodeId, subnetName.get(0).toString());\n                            }\n                        }\n                        deleteNode(aInYangDB, getFilteredQueryParameters(null), null, dbConfig, networkId, nodeId);\n                    });\n                }\n\n                //Now create the new node and the links..\n                nodeIds.forEach(nodeId -> {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"<><><><><> creating equivalent node for {}\", nodeId);\n                    }\n\n                    if(nodeId.toString().contains(\"psn\")) {\n                        Map<String, Object> subnetMap = new HashMap<>();\n                        subnetMap.put(NAME, subnetNames.get(nodeId));\n                        createSubnet(nodeMap, aInYangDB, dbConfig, networkId, aInNewRouterId);\n                    }\n                    else {\n                        createRoutingInstance(nodeMap, aInYangDB, networkId);\n                    }\n                });\n\n                QueryParameters linkQp = getFilteredQueryParameters(IP_LINK_FIELDS);\n                //create links and tps.\n                linkNames.forEach(name -> {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"<><><><><> creating link : {}\", name);\n                    }\n                    String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n                    IYangObject linkObj = aInYangDB.getSingle(nspServiceIpLinkIden, linkQp);\n\n                    if(linkObj != null) {\n                        String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                        if (aInYangDB.exists(networkPathIdentifier, qp)) {\n                            createLink(linkObj.asMap(), aInYangDB, aInConverterFw, networkId, true, null);\n                            return;\n                        } else {\n                            logger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", name);\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    private List<Object> getNodeIds(IYangDB aInYangDb, String aInNodeId, String aInNetworkId)\n    {\n        return execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT n.nodeId FROM ietf.ietf_network_networks_network_node n WHERE n.networkId = \" +\n                        \":networkId AND n.nodeId LIKE :pattern\")\n                .setParameter(\"networkId\", aInNetworkId)\n                .setParameter(\"pattern\", aInNodeId + \"%\")\n                .getResultList());\n\n    }\n\n    private List<Map<String,Object>> getLinkDetails(IYangDB aInYangDb, String aInNodeId, String aInNetworkId)\n    {\n        List<Object[]> linkDetails = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT la.linkId, la.name FROM ietf.ietf_241652239nk_ietf_l3_unicast_topology_l3_link_attributes la\" +\n                        \" WHERE la.networkId = :networkId AND la.linkId LIKE :linkId\")\n                .setParameter(\"networkId\", aInNetworkId)\n                .setParameter(\"linkId\", \"%\" + aInNodeId + \":%\")\n                .getResultList());\n\n       List<Map<String,Object>> linkList = new ArrayList<>();\n        if(CollectionUtils.isNotEmpty(linkDetails)) {\n            linkDetails.forEach(obj -> {\n                Map<String,Object> linkMap = new HashMap<>();\n                linkMap.put(LINK_ID, obj[0]);\n                linkMap.put(NAME, obj[1]);\n                linkList.add(linkMap);\n            });\n        }\n\n        return linkList;\n\n    }\n\n    private List<Object> getSubnetName(IYangDB aInYangDb, String aInNodeId, String aInNetworkId)\n    {\n        return execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT n.name FROM ietf.ietf_220877889de_ietf_l3_unicast_topology_l3_node_attributes n WHERE n.networkId = \" +\n                        \":networkId AND n.nodeId = :nodeId\")\n                .setParameter(\"networkId\", aInNetworkId)\n                .setParameter(\"nodeId\", aInNodeId)\n                .getResultList());\n\n    }\n\n    private void updatePrefix(IYangDB aInYangDB, QueryParameters aInQp, ObjectModification aInEvent) {\n\n        //if the changed property is not one of the properties that could change, ignore the event.\n\n        Set<String> updateableAttributes = new HashSet<>(Arrays.asList(\"metric\"));\n        Map<String, Object> prefix  = aInEvent.getEntity().asMap();\n        boolean isValidUpdate = false;\n        for (ObjectModification.Change change : aInEvent.getChanges()) {\n            if (updateableAttributes.contains(change.getName())) {\n                isValidUpdate = true;\n                break;\n            }\n        }\n\n        if(isValidUpdate) {\n            String instanceId = aInEvent.getInstanceId();\n            String adminDomain = extractAdminDomain(instanceId);\n            String nodeId = StringUtils.substringBetween(instanceId, \"routing-instance[id='\", \"'\");\n            String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n            nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, nodeId);\n            QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols\");\n            IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n\n            if (nodeObj != null) {\n                Map<String, Object> nodeMap = nodeObj.asMap();\n                String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n                if (networkId != null) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                    String ipAddress = (String) prefix.get(IP_ADDRESS);\n                    String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                    IYangObject prefixObj = aInYangDB.getSingle(prefixPathIden, aInQp);\n                    if (prefixObj != null) {\n                        int metric = (int) prefix.get(\"metric\");\n                        prefixObj.setProperty(\"metric\", metric);\n                        updateInDb(aInYangDB, prefixObj, prefixPathIden, null, null, UPDATE, null, aInQp);\n                    }\n                }\n            }\n\n        }\n    }\n\n    private void updateMsd(IYangDB aInYangDB, String aInNodeId, Map<String,Object> aInNode, String aInNetworkId) {\n\n        if (aInNode != null && aInNetworkId != null) {\n            QueryParameters qp = getFilteredQueryParameters(null);\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId);\n            String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, aInNodeId);\n            String nodeAttrIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\";\n            IYangObject srMplsObj = aInYangDB.getSingle(nodeAttrIden + \"/\" + SR_MPLS_TYPE);\n            Map<String, IYangObject> existingMsds = new HashMap<>();\n            if(srMplsObj != null) {\n                Collection<IYangObject> msdsList = ((IYangObject)srMplsObj.getProperty(MSDS)).getProperty(\"node-msd\");\n\n                if(msdsList != null && !msdsList.isEmpty()) {\n                    for(IYangObject msd : msdsList) {\n                        String[] msdIden = msd.get(MSD_TYPE).toString().split(\":\");\n                        existingMsds.put(msdIden.length == 2 ? msdIden[1]:msdIden[0], msd);\n                    }\n                }\n            }\n\n            List<Map> currentMsds = ((List)aInNode.get(MSDS));\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"L3 - EXISTING IETF MSDs - {}\", existingMsds.keySet().toString());\n                logger.debug(\"L3 - CURRENT NSP MSDs - {}\", currentMsds.toString());\n            }\n            if(currentMsds == null || currentMsds.isEmpty()) {\n                if(srMplsObj != null) {\n                    //delete the sr-mpls type.\n                    logger.debug(\"L3 - Update Node - delete msd sr mpls  {}\", nodeAttrIden);\n                    updateInDb(aInYangDB, null, nodeAttrIden + \"/\" + SR_MPLS_TYPE, null, null, DELETE, null, qp);\n                }\n            }\n            else {\n\n                for(Map msd : currentMsds) {\n                    String msdKey = msd.get(MSD_TYPE).toString();\n                    if(!existingMsds.containsKey(msdKey) && srMplsObj != null) {\n                        //creation\n                        IYangObject newMsdObj = getMsdYangObject(new YangObject(), msd, aInNetworkId, aInNodeId);\n                        updateInDb(aInYangDB, newMsdObj, \"\", nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"node-msd\", CREATE, null, qp);\n                        logger.debug(\"L3 - Update Node - create msd {}, {}\", msdKey, nodeAttrIden);\n                    }\n                    else if(!existingMsds.containsKey(msdKey) && srMplsObj == null) {\n                        srMplsObj = new YangObject();\n                        srMplsObj.setProperty(NETWORK_ID, aInNetworkId);\n                        srMplsObj.setProperty(NODE_ID, aInNodeId);\n\n                        IYangObject msdObj = new YangObject();\n                        msdObj.setProperty(NETWORK_ID, aInNetworkId);\n                        msdObj.setProperty(NODE_ID, aInNodeId);\n                        srMplsObj.setProperty(MSDS, msdObj);\n\n                        updateInDb(aInYangDB, srMplsObj, \"\", nodeAttrIden, SR_MPLS_TYPE, CREATE, null, qp);\n\n                        IYangObject newMsdObj = getMsdYangObject(new YangObject(), msd, aInNetworkId, aInNodeId);\n                        updateInDb(aInYangDB, newMsdObj, \"\", nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds\", \"node-msd\", CREATE, null, qp);\n                        logger.debug(\"L3 - Update Node - create msd {}, {}\", msdKey, nodeAttrIden);\n                    }\n                    else {\n                        //update\n                        IYangObject aInTargetMsd = existingMsds.get(msdKey);\n                        aInTargetMsd.setProperty(MSD_VALUE, msd.get(MSD_VALUE));\n                        logger.debug(\"L3 - Update Node - update msd {}, {}\", msdKey, nodeAttrIden);\n                        updateInDb(aInYangDB, srMplsObj, nodeAttrIden + \"/\" + SR_MPLS_TYPE, null, null, UPDATE, null, getFilteredQueryParameters(null));\n                        existingMsds.remove(msdKey);\n                    }\n                }\n                if(!existingMsds.isEmpty()) {\n                    //deletion\n                    for(IYangObject deleteMsd : existingMsds.values()) {\n                        String msdPath = String.format(nodeAttrIden + \"/\" + SR_MPLS_TYPE + \"/msds/node-msd[msd-type='%s']\",\n                                deleteMsd.get(MSD_TYPE));\n                        logger.debug(\"L3 - Update Node - delete msd {}\", msdPath);\n                        updateInDb(aInYangDB, null, msdPath, null, null, DELETE, null, getFilteredQueryParameters(null));\n                    }\n                }\n            }\n        }\n    }\n\n    private IYangObject getMsdYangObject(IYangObject aInTargetMsd, Map aInSourceMsd, String aInNetworkId, String aInNodeId) {\n        aInTargetMsd.setProperty(NETWORK_ID, aInNetworkId);\n        aInTargetMsd.setProperty(LINK_ID, aInNodeId);\n        aInTargetMsd.setProperty(MSD_TYPE, aInSourceMsd.get(MSD_TYPE));\n        aInTargetMsd.setProperty(MSD_VALUE, aInSourceMsd.get(MSD_VALUE));\n        return aInTargetMsd;\n    }\n\n    private void updateLink(IYangDB aInYangDB, ObjectModification aInEvent, IMdConverterFw aInConverterFw) {\n\n        //if the changed property is not one of the properties that could change, ignore the event.\n\n        Set<String> updateableAttributes = new HashSet<>(Arrays.asList(\"te-metric\", \"cost\"));\n        Set<String> updateableTeAttributes = new HashSet<>(Arrays.asList(\"te-metric\", \"cost\", \"latency\", \"isis-level\",\n                \"bw\", \"available-bw\", \"one-way-min-delay\", \"one-way-max-delay\", \"srg-labels\"));\n        Set<String> updatableSrMplsAttributes = new HashSet<>(Arrays.asList(SIDS));\n        Map<String, Object> link  = aInEvent.getEntity().asMap();\n        boolean isValidLinkUpdate = false;\n        boolean isValidTeLinkUpdate = false;\n        boolean isValidPriorityUpdate = false;\n        boolean isValidIpUpdate = false;\n        boolean isValidSrMplsUpdate = false;\n\n        for (ObjectModification.Change change : aInEvent.getChanges()) {\n            isValidLinkUpdate = updateableAttributes.contains(change.getName());\n            isValidSrMplsUpdate = updatableSrMplsAttributes.contains(change.getName());\n        }\n        if(TE_TOPOLOGY_ENABLED) {\n            isValidTeLinkUpdate = aInEvent.getChanges().size() == 1; // srlg changes are coming as empty.\n            for (ObjectModification.Change change : aInEvent.getChanges()) {\n                if (\"un-resv-bw\".equals(change.getName())) {\n                    isValidPriorityUpdate = true;\n                }\n                if (updateableTeAttributes.contains(change.getName())) {\n                    isValidTeLinkUpdate = true;\n                }\n                isValidIpUpdate = \"ip-address\".equals(change.getName());\n            }\n        }\n\n        // if ip-address is changed, the link needs to be created.\n        if(isValidIpUpdate) {\n            logger.debug(\"L3 - CREATE LINK FROM IP-ADDRESS UPDATE\");\n            String name = (String) link.get(NAME);\n            String nspServiceIpLinkIden = String.format(NSP_SERVICE_LINK_PATH, name);\n            QueryParameters qp = getFilteredQueryParameters(IP_LINK_FIELDS);\n            IYangObject linkObj = aInYangDB.getSingle(nspServiceIpLinkIden, qp);\n\n            if(linkObj != null) {\n                String networkId = getNetworkIdFromLink((List<String>) linkObj.get(\"admin-domains\"), (String) linkObj.get(\"protocol\"));\n                if (networkId != null) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    if (aInYangDB.exists(networkPathIdentifier, qp)) {\n                        createLink(linkObj.asMap(), aInYangDB, aInConverterFw, networkId, true, null);\n                        return;\n                    } else {\n                        logger.warn(\"L3 - NETWORK IS NOT IN THE DB for {}\", linkObj.get(NAME));\n                    }\n                }\n            }\n        }\n\n        if(isValidLinkUpdate || isValidTeLinkUpdate || isValidPriorityUpdate || isValidSrMplsUpdate) {\n            String name = (String) link.get(NAME);\n            List<Object> linkDetails = getLinkFromDb(name, aInConverterFw.getYangDBConfig());\n            if(linkDetails != null && !linkDetails.isEmpty()) {\n                String linkId = ((Object[])linkDetails.get(0))[0].toString();\n                String networkId = ((Object[])linkDetails.get(0))[1].toString();\n                if(isValidLinkUpdate || isValidSrMplsUpdate) {\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n                    QueryParameters qp = getFilteredQueryParameters(null);\n                    if(isValidLinkUpdate) {\n                        IYangObject ietfLinkObj = aInYangDB.getSingle(linkPathIdentifier, qp);\n                        if (ietfLinkObj != null) {\n                            logger.debug(\"L3 - updating link: {} on {}\", linkId, networkId);\n                            IYangObject linkAttrObj = (YangObject) ietfLinkObj.get(\"ietf-l3-unicast-topology:l3-link-attributes\");\n                            linkAttrObj.setProperty(\"metric1\", link.get(\"cost\"));\n                            linkAttrObj.setProperty(\"metric2\", link.get(\"te-metric\"));\n                            ietfLinkObj.setProperty(\"ietf-l3-unicast-topology:l3-link-attributes\", linkAttrObj);\n                            ietfLinkObj.removeProperty(SUPPORTING_LINK);\n                            updateInDb(aInYangDB, ietfLinkObj, linkPathIdentifier, null, null, UPDATE, null, getFilteredQueryParameters(null));\n                        } else {\n                            logger.debug(\"L3 - LINK changes ignored - link doesn't exist. {}\", linkPathIdentifier);\n                        }\n                    }\n\n                    if(isValidSrMplsUpdate) {\n                        updateSid(aInYangDB, qp, link, linkPathIdentifier, networkId, linkId);\n                    }\n                }\n\n                //Update TE Properties\n                if(TE_TOPOLOGY_ENABLED && (isValidTeLinkUpdate || isValidPriorityUpdate)) {\n                    String teNetworkId = getTeNetworkId(networkId);\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, teNetworkId);\n                    String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n                    QueryParameters qp = getFilteredQueryParameters(null);\n                    if(updateTeLink(aInYangDB, qp, link, linkPathIdentifier, teNetworkId, linkId, isValidPriorityUpdate)) {\n                        if (isValidPriorityUpdate) {\n                            updateTeLinkPriority(aInYangDB, link, linkPathIdentifier);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            handleUpdateLogger.debug(\"L3 - LINK changes ignored - {} on {} \", aInEvent.getChanges(), link.toString());\n        }\n    }\n\n    private boolean updateTeLink(IYangDB aInYangDB,  QueryParameters aInQp, Map<String, Object> aInLink, String aInLinkPathIdentifier,\n                              String aInTeNetworkId, String aInLinkId, boolean isValidPriorityUpdate) {\n        IYangObject ietfTeLinkObj = aInYangDB.getSingle(aInLinkPathIdentifier, aInQp);\n        if (ietfTeLinkObj != null) {\n            logger.debug(\"L3 - updating TE link: {} on {}\", aInLinkId, aInTeNetworkId);\n            IYangObject teObj = (YangObject) ietfTeLinkObj.get(\"ietf-te-topology:te\");\n            IYangObject linkAttrObj = (YangObject) teObj.get(\"te-link-attributes\");\n            linkAttrObj.setProperty(\"te-default-metric\", aInLink.get(\"te-metric\"));\n            linkAttrObj.setProperty(\"te-delay-metric\", aInLink.get(\"latency\"));\n            linkAttrObj.setProperty(\"te-igp-metric\", aInLink.get(\"cost\"));\n            if(aInLink.get(\"bw\") != null) {\n                IYangObject maxLinkBandwidth = (YangObject) linkAttrObj.get(\"max-link-bandwidth\");\n                IYangObject maxLinkTeBandwidth = (YangObject) maxLinkBandwidth.get(\"te-bandwidth\");\n                // convert kilo bits to bytes and then to IEEE 754 format.\n                maxLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(\n                        convertKiloBitstoBytes(aInLink.get(\"bw\") instanceof Integer ? (Integer) aInLink.get(\"bw\") :\n                                (Long) aInLink.get(\"bw\")))));\n                maxLinkBandwidth.setProperty(\"te-bandwidth\", maxLinkTeBandwidth);\n\n                IYangObject maxResvLinkBandwidth = (YangObject) linkAttrObj.get(\"max-link-bandwidth\");\n                IYangObject maxResvLinkTeBandwidth = (YangObject) maxResvLinkBandwidth.get(\"te-bandwidth\");\n                maxResvLinkTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(\n                        convertKiloBitstoBytes(aInLink.get(\"bw\") instanceof Integer ? (Integer) aInLink.get(\"bw\") :\n                                (Long) aInLink.get(\"bw\")))));\n                maxResvLinkBandwidth.setProperty(\"te-bandwidth\", maxResvLinkTeBandwidth);\n                linkAttrObj.setProperty(\"max-link-bandwidth\", maxLinkBandwidth);\n                linkAttrObj.setProperty(\"max-resv-link-bandwidth\", maxResvLinkBandwidth);\n            }\n            IYangObject tesrlgs = (YangObject) linkAttrObj.get(\"te-srlgs\");\n            tesrlgs.setProperty(\"value\", aInLink.get(\"srg-labels\"));\n\n            linkAttrObj.setProperty(\"te-srlgs\", tesrlgs);\n\n\n\n            IYangObject performanceMetricsOneWay = (YangObject) linkAttrObj.get(\"ietf-te-topology-packet:performance-metrics-one-way\");\n            performanceMetricsOneWay.setProperty(\"one-way-delay\", aInLink.get(\"latency\"));\n            performanceMetricsOneWay.setProperty(\"one-way-min-delay\", aInLink.get(\"one-way-min-delay\"));\n            performanceMetricsOneWay.setProperty(\"one-way-max-delay\", aInLink.get(\"one-way-max-delay\"));\n            if(aInLink.get(\"available-bw\") != null) {\n                performanceMetricsOneWay.setProperty(\"one-way-utilized-bandwidth\", String.format(\"%a\",\n                        Float.valueOf(convertKiloBitstoBytes(\n                                aInLink.get(\"available-bw\") instanceof Integer ?\n                                        (Integer) aInLink.get(\"available-bw\") : (Long) aInLink.get(\"available-bw\")))));\n            }\n            linkAttrObj.setProperty(\"ietf-te-topology-packet:performance-metrics-one-way\", performanceMetricsOneWay);\n            linkAttrObj.setProperty(NAME, aInLink.get(NAME));\n            if (!isValidPriorityUpdate) {\n                linkAttrObj.removeProperty(\"unreserved-bandwidth\");\n            }\n            teObj.setProperty(\"te-link-attributes\", linkAttrObj);\n            ietfTeLinkObj.setProperty(\"ietf-te-topology:te\", teObj);\n            updateInDb(aInYangDB, ietfTeLinkObj, aInLinkPathIdentifier, null, null, UPDATE, null, getFilteredQueryParameters(null));\n            return true;\n        }\n        else {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"L3 - TE LINK changes ignored - link doesn't exist. {}\", aInLinkPathIdentifier);\n            }\n        }\n        return false;\n    }\n\n    private void updateTeLinkPriority(IYangDB aInYangDB, Map<String, Object> aInLink, String aInLinkPathIdentifier) {\n        String teUnResvBwPathIdentifier = aInLinkPathIdentifier + \"/ietf-te-topology:te/te-link-attributes/unreserved-bandwidth\";\n        List<IYangObject> teUnResvBwObjList = aInYangDB.getMany(teUnResvBwPathIdentifier, getFilteredQueryParameters(null));\n        if (teUnResvBwObjList != null && !teUnResvBwObjList.isEmpty()) {\n            for (IYangObject teUnResvBwObj : teUnResvBwObjList) {\n                IYangObject maxUnResvTeBandwidth = (YangObject) teUnResvBwObj.get(\"te-bandwidth\");\n                Long unResvBw = aInLink.get(\"un-resv-bw\") instanceof Integer ?\n                        new Long((Integer)aInLink.get(\"un-resv-bw\")) : (Long) aInLink.get(\"un-resv-bw\") ;\n                unResvBw = unResvBw == null ? 0 : unResvBw;\n                maxUnResvTeBandwidth.setProperty(\"generic\", String.format(\"%a\", Float.valueOf(convertKiloBitstoBytes(unResvBw))));\n                teUnResvBwObj.setProperty(\"te-bandwidth\", maxUnResvTeBandwidth);\n                updateInDb(aInYangDB, teUnResvBwObj, teUnResvBwPathIdentifier + String.format(\"[priority='%s']\",\n                        teUnResvBwObj.get(\"priority\")), null, null, UPDATE, null, getFilteredQueryParameters(null));\n            }\n        }\n    }\n\n    private void updateSid(IYangDB aInYangDB,  QueryParameters aInQp, Map<String, Object> aInLink, String aInLinkPathIdentifier,\n                           String aInNetworkId, String aInLinkId) {\n        String linkAttrIden = aInLinkPathIdentifier + \"/ietf-l3-unicast-topology:l3-link-attributes\";\n        IYangObject srMplsObj = aInYangDB.getSingle(linkAttrIden + \"/\" + SR_MPLS_TYPE);\n        Map<String, IYangObject> existingSids = new HashMap<>();\n        if(srMplsObj != null) {\n            Collection<IYangObject> sidsList = ((IYangObject)srMplsObj.getProperty(SIDS)).getProperty(SID);\n\n            if(sidsList != null && !sidsList.isEmpty()) {\n                for(IYangObject sid : sidsList) {\n                    String sidKey = sid.get(VALUE_TYPE).toString() +\"-\"+ sid.get(SID);\n                    existingSids.put(sidKey, sid);\n                }\n            }\n        }\n\n        List<Map> currentSids = ((List)aInLink.get(SIDS));\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"EXISTING IETF SIDS - {}\", existingSids.keySet().toString());\n            logger.debug(\"CURRENT NSP SIDS - {}\", currentSids.toString());\n        }\n        if(currentSids == null || currentSids.isEmpty()) {\n            if(srMplsObj != null) {\n                //delete the sr-mpls type.\n                logger.debug(\"L3 - Update Link - delete sid sr mpls  {}\", linkAttrIden);\n                updateInDb(aInYangDB, null, linkAttrIden + \"/\" + SR_MPLS_TYPE, null, null, DELETE, null, aInQp);\n            }\n        }\n        else {\n\n            for(Map sid : currentSids) {\n                String sidKey = sid.get(VALUE_TYPE).toString() +\"-\"+ sid.get(SID);\n                if(!existingSids.containsKey(sidKey) && srMplsObj != null) {\n                    //creation\n                    IYangObject newSidObj = getSidYangObject(new YangObject(), sid, aInNetworkId, aInLinkId);\n                    updateInDb(aInYangDB, newSidObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids\", \"sid\", CREATE, null, aInQp);\n                    logger.debug(\"L3 - Update Link - sid added to existing sids {}, {}\", sidKey, linkAttrIden);\n                }\n                else if(!existingSids.containsKey(sidKey) && srMplsObj == null) {\n                    srMplsObj = new YangObject();\n                    srMplsObj.setProperty(NETWORK_ID, aInNetworkId);\n                    srMplsObj.setProperty(LINK_ID, aInLinkId);\n\n                    IYangObject sidObj = new YangObject();\n                    sidObj.setProperty(NETWORK_ID, aInNetworkId);\n                    sidObj.setProperty(LINK_ID, aInLinkId);\n                    srMplsObj.setProperty(SIDS, sidObj);\n\n                    updateInDb(aInYangDB, srMplsObj, \"\", linkAttrIden, SR_MPLS_TYPE, CREATE, null, aInQp);\n\n                    IYangObject newSidObj = getSidYangObject(new YangObject(), sid, aInNetworkId, aInLinkId);\n                    updateInDb(aInYangDB, newSidObj, \"\", linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids\", \"sid\", CREATE, null, aInQp);\n                    logger.debug(\"L3 - Update Link - create sid {}, {}\", sidKey, linkAttrIden);\n                }\n                else {\n                    //update\n                    IYangObject aInTargetSid = existingSids.get(sidKey);\n                    aInTargetSid.setProperty(ADDRESS_FAMILY, sid.get(ADDRESS_FAMILY));\n                    aInTargetSid.setProperty(IS_ELG_PROT, sid.get(IS_ELG_PROT));\n                    aInTargetSid.setProperty(IS_LOCAL, sid.get(IS_LOCAL));\n                    aInTargetSid.setProperty(IS_PART_SET, sid.get(IS_PART_SET));\n                    aInTargetSid.setProperty(IS_PERS, sid.get(IS_PERS));\n                    aInTargetSid.setProperty(IS_ON_LAN, sid.get(IS_ON_LAN));\n                    aInTargetSid.setProperty(WEIGHT, sid.get(WEIGHT));\n                    logger.debug(\"L3 - Update Link - update sid {}, {}\", sidKey, linkAttrIden);\n                    updateInDb(aInYangDB, srMplsObj, linkAttrIden + \"/\" + SR_MPLS_TYPE, null, null, UPDATE, null, getFilteredQueryParameters(null));\n                    existingSids.remove(sidKey);\n                }\n            }\n            if(!existingSids.isEmpty()) {\n                //deletion\n                for(IYangObject deleteSid : existingSids.values()) {\n                    String sidPath = String.format(linkAttrIden + \"/\" + SR_MPLS_TYPE + \"/sids/sid[value-type='%s'][sid='%s']\",\n                            deleteSid.get(VALUE_TYPE), deleteSid.get(SID));\n                    logger.debug(\"L3 - Update Link - delete sid {}\", sidPath);\n                    updateInDb(aInYangDB, null, sidPath, null, null, DELETE, null, getFilteredQueryParameters(null));\n                }\n            }\n        }\n    }\n\n    private IYangObject getSidYangObject(IYangObject aInTargetSid, Map aInSourceSid, String aInNetworkId, String aInLinkId) {\n        aInTargetSid.setProperty(NETWORK_ID, aInNetworkId);\n        aInTargetSid.setProperty(LINK_ID, aInLinkId);\n        aInTargetSid.setProperty(VALUE_TYPE, aInSourceSid.get(VALUE_TYPE));\n        aInTargetSid.setProperty(SID, aInSourceSid.get(SID));\n        aInTargetSid.setProperty(ADDRESS_FAMILY, aInSourceSid.get(ADDRESS_FAMILY));\n        aInTargetSid.setProperty(IS_ELG_PROT, aInSourceSid.get(IS_ELG_PROT));\n        aInTargetSid.setProperty(IS_LOCAL, aInSourceSid.get(IS_LOCAL));\n        aInTargetSid.setProperty(IS_PART_SET, aInSourceSid.get(IS_PART_SET));\n        aInTargetSid.setProperty(IS_PERS, aInSourceSid.get(IS_PERS));\n        aInTargetSid.setProperty(IS_ON_LAN, aInSourceSid.get(IS_ON_LAN));\n        aInTargetSid.setProperty(WEIGHT, aInSourceSid.get(WEIGHT));\n        return aInTargetSid;\n    }\n\n    public void handleDeleteEvent(SrcClass aInSrcClass,SyncClass aInSyncClass, ObjectDeletion aInEvent,\n                                  String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        IMdConverterFw converterFw = aInMdConverterFw.getiMdConverterFw();\n\n        if(aInEvent.getInstanceId().contains(L2_NETWORK_PATH)) {\n            handleL2DeleteEvent(aInEvent, converterFw);\n            return;\n        }\n\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n            logger.debug(\"---------------------------------------------------DELETE---------------------------------------------------------------------------\");\n        }\n\n        YangDBConfig dbConfig = converterFw.getYangDBConfig();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        QueryParameters qp = getFilteredQueryParameters(null);\n        Map<String, Object> srcObject  = aInEvent.getEntity().asMap();\n        Map<String, Object> meta = (Map) srcObject.get(\"@\");\n        if(meta == null) {\n            logger.warn(\"L3 - meta details are missing on the event\");\n        }\n        else if(((String) meta.get(\"nsp-model:identifier\")).contains(NETWORKS_PATH) &&\n                !((String) meta.get(\"nsp-model:identifier\")).contains(L2_NETWORK_PATH))\n        {\n            if (logger.isDebugEnabled())\n            {\n                logger.debug(\"L3 - DELETE IGNORED {}\", meta.get(\"nsp-model:identifier\"));\n            }\n            return; //sometimes the srcobject has ietf object details\n        }\n\n        if (aInSyncClass.getDestClassPath().equals(NETWORK_CLASS_PATH)) {\n\n            logger.debug(\"L3 - DELETE NETWORK\");\n            deleteNetwork(yangDB, qp, aInEvent.getEntity());\n        }\n        else if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            if(aInSrcClass.getSrcClassPath().equals(PREFIX_SRC_PATH)) {\n                logger.debug(\"L3 - DELETE PREFIX\");\n                String instanceId = aInEvent.getInstanceId();\n                String ipAddress = (String) aInEvent.getEntity().get(IP_ADDRESS);\n                deletePrefix(yangDB, getFilteredQueryParameters(null), instanceId, ipAddress);\n            }\n            else {\n                logger.debug(\"L3 - DELETE NODE\");\n                deleteNode(yangDB, qp, srcObject, dbConfig, null, null);\n            }\n        }\n        else if (aInSyncClass.getDestClassPath().equals(LINK_CLASS_PATH)) {\n\n            logger.debug(\"L3 - DELETE LINK\");\n            deleteLink(yangDB, qp, srcObject, dbConfig, null);\n        }\n    }\n\n    private void deleteNetwork(IYangDB aInYangDB, QueryParameters aInQp, IYangObject aInSrcObject) {\n        String networkId = getNetworkId(aInYangDB, aInSrcObject);\n        if(networkId == null) {\n            //it could be one of isis or ospf.\n            String adminDomain = (String) aInSrcObject.get(NAME);\n            String ospfNetworkId = adminDomain + \"-ospf\";\n            String ospfNetworkPathIdentifier = String.format(L3_NETWORK_PATH, ospfNetworkId);\n            if(aInYangDB.exists(ospfNetworkPathIdentifier, aInQp))\n            {\n                networkId = ospfNetworkId;\n            }\n\n            String isisNetworkId = adminDomain + \"-isis\";\n            String isisNetworkPathIdentifier = String.format(L3_NETWORK_PATH, isisNetworkId);\n            if(aInYangDB.exists(isisNetworkPathIdentifier, aInQp)) {\n                // exit if both ospf and isis exists for the same admin domain\n                networkId = networkId == null ? isisNetworkId : null;\n            }\n        }\n\n        if(networkId != null) {\n            logger.debug(\"L3 - DELETING NETWORK {}\", networkId);\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            updateInDb(aInYangDB, null, networkPathIdentifier, networkId, null, DELETE, null, aInQp);\n            if(TE_TOPOLOGY_ENABLED) {\n                String teNetworkId = getTeNetworkId(networkId);\n                logger.debug(\"L3 - DELETING NETWORK {}\", teNetworkId);\n                updateInDb(aInYangDB, null, String.format(L3_NETWORK_PATH, teNetworkId), teNetworkId, null, DELETE, null, aInQp);\n            }\n        }\n        else {\n            logger.warn(\"L3 -  DELETING NETWORK - for admin domain {} failed. Couldn't find the right IETF network.\", aInSrcObject.get(NAME));\n        }\n    }\n\n    private void deleteNode(IYangDB aInYangDB, QueryParameters aInQp, Map<String,Object> aInSrcObject,\n                            YangDBConfig dbConfig, String aInNetworkId, String aInNodeId) {\n        String networkId =  aInNetworkId == null ? getNetworkIdFromMeta(aInYangDB, aInSrcObject) : aInNetworkId;\n        if(networkId != null) {\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            if(aInYangDB.exists(networkPathIdentifier, aInQp)) {\n                String nodeId = aInNodeId;\n                if(nodeId == null && SUBNET.equals(aInSrcObject.get(NODE_TYPE))) {\n                    String routerId = null;\n                    String systemId = getSubnetSystemId((String) aInSrcObject.get(NAME));\n                    if(systemId != null && systemId.contains(\"dr\")) {\n                        routerId = (String) aInSrcObject.get(\"dr-ip-address\");\n                    }\n                    routerId = routerId == null ? InetAddresses.isInetAddress(systemId) ? systemId : getSubnetNodeIdFromDB(dbConfig, systemId, networkId) : routerId;\n                    if(routerId == null) {\n                        logger.error(\"L3 - deleteNode - Couldn't delete the subnet node because router-id is null for {}\", systemId);\n                        return;\n                    }\n                    nodeId = routerId +\"-\"+getSubnetPsnId((String) aInSrcObject.get(NAME));\n                }\n                else if(nodeId == null) {\n                    nodeId = (String) aInSrcObject.get(ID);\n                }\n                String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                logger.debug(\"Deleting L3 node: {}\", nodePathIdentifier);\n                updateInDb(aInYangDB, null, nodePathIdentifier, null, null, DELETE, null, aInQp);\n                if(TE_TOPOLOGY_ENABLED) {\n                    String teNodePathIdentfier = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId)) + String.format(NODE_PATH, nodeId);\n                    if (aInYangDB.exists(teNodePathIdentfier, aInQp)) {\n                        logger.debug(\"Deleting TE node: {}\", teNodePathIdentfier);\n                        updateInDb(aInYangDB, null, teNodePathIdentfier, null, null, DELETE, null, aInQp);\n                    }\n                }\n            }\n        }\n    }\n\n    private void deletePrefix(IYangDB aInYangDB, QueryParameters aInQp, String aInInstanceId, String aInIpAddress) {\n\n        String adminDomain = extractAdminDomain(aInInstanceId);\n        String nodeId = StringUtils.substringBetween(aInInstanceId, \"routing-instance[id='\", \"'\");\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain);\n        nspServiceNodeIden += String.format(NSP_SERVICE_ROUTING_INS_PATH, nodeId);\n        QueryParameters qp = getFilteredQueryParameters(\"node-type;protocols\");\n        IYangObject nodeObj = aInYangDB.getSingle(nspServiceNodeIden, qp);\n\n        if (nodeObj != null) {\n            Map<String, Object> nodeMap = nodeObj.asMap();\n            String networkId = getNetworkIdFromMeta(aInYangDB, nodeMap);\n            if (networkId != null) {\n                String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + aInIpAddress + \"']\";\n                if (aInYangDB.exists(prefixPathIden, aInQp)) {\n                    updateInDb(aInYangDB, null, prefixPathIden, null, null, DELETE, null, aInQp);\n                }\n            }\n        }\n    }\n\n    private void deleteLink(IYangDB aInYangDB, QueryParameters aInQp, Map<String,Object> aInLink, YangDBConfig aInDbConfig,\n                            List<Object> aInLinkDetails) {\n        String name = (String) aInLink.get(NAME);\n        List<Object> linkDetails = CollectionUtils.isEmpty(aInLinkDetails) ? getLinkFromDb(name, aInDbConfig) : aInLinkDetails;\n        if(linkDetails != null && !linkDetails.isEmpty()) {\n            String linkId = ((Object[])linkDetails.get(0))[0].toString();\n            String networkId = ((Object[])linkDetails.get(0))[1].toString();\n\n            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n            String linkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, linkId);\n            logger.debug(\"L3 - deleteLink {}\", linkPathIdentifier);\n            updateInDb(aInYangDB, null, linkPathIdentifier, null, null, DELETE, null, aInQp);\n\n            String teNetworkPathIdentifier = String.format(L3_NETWORK_PATH, getTeNetworkId(networkId));\n            //delete TE link\n            if(TE_TOPOLOGY_ENABLED) {\n                String teLinkPathIdentifier = teNetworkPathIdentifier + String.format(LINK_PATH, linkId);\n                logger.debug(\"L3 - deleteLink {}\", teLinkPathIdentifier);\n                updateInDb(aInYangDB, null, teLinkPathIdentifier, null, null, DELETE, null, aInQp);\n            }\n            //can delete source tp and destination tp?\n            String oppLinkId = getOppIetfLinkId(linkId);\n            String oppLinkPathIdentifier = networkPathIdentifier + String.format(LINK_PATH, oppLinkId);\n            if (!aInYangDB.exists(oppLinkPathIdentifier, aInQp)) {\n                // no other link is using the same source and destination. delete the TPs.\n                List<String> linkObjIds = getLinkObjIds(linkId);\n                String srcNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(0));\n                String srcNodeTPIdentifier = srcNodeIdentifier + String.format(TP_PATH, linkObjIds.get(1));\n                if(canDeleteTp(aInYangDB, \"%\" + linkObjIds.get(0) + \":\" + linkObjIds.get(1) + \"%\", networkId)) {\n                    deleteTerminationPoint(aInYangDB, aInQp, srcNodeIdentifier, srcNodeTPIdentifier);\n\n                    // delete TE src termination point\n                    if (TE_TOPOLOGY_ENABLED) {\n                        String teSrcNodeIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(0));\n                        String teSrcNodeTPIdentifier = teSrcNodeIdentifier + String.format(TP_PATH, linkObjIds.get(1));\n                        deleteTerminationPoint(aInYangDB, aInQp, teSrcNodeIdentifier, teSrcNodeTPIdentifier);\n                    }\n                }\n\n                String dstNodeIdentifier = networkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(2));\n                String dstNodeTPIdentifier = dstNodeIdentifier + String.format(TP_PATH, linkObjIds.get(3));\n                if(canDeleteTp(aInYangDB, \"%\" + linkObjIds.get(2) + \":\" + linkObjIds.get(3) + \"%\", networkId)) {\n                    deleteTerminationPoint(aInYangDB, aInQp, dstNodeIdentifier, dstNodeTPIdentifier);\n\n                    // delete TE dst termination point\n                    if (TE_TOPOLOGY_ENABLED) {\n                        String teDstNodeIdentifier = teNetworkPathIdentifier + String.format(NODE_PATH, linkObjIds.get(2));\n                        String teDstNodeTPIdentifier = teDstNodeIdentifier + String.format(TP_PATH, linkObjIds.get(3));\n                        deleteTerminationPoint(aInYangDB, aInQp, teDstNodeIdentifier, teDstNodeTPIdentifier);\n                    }\n                }\n                //check whether the nodes has any more tps. if not delete the nodes as well.\n//                validateNode(aInYangDB, aInQp, srcNodeIdentifier, networkId);\n//                validateNode(aInYangDB, aInQp, dstNodeIdentifier, networkId);\n            }\n        }\n    }\n\n    @Override\n    public void handleReplaceEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectReplacement aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        if(!srcClasses.contains(aInSrcClass.getSrcClassPath())) {\n            return;\n        }\n        logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n        logger.debug(\"---------------------------------------------------REPLACE------------------------------------------------------------------\");\n    }\n\n//    void validateNode(IYangDB aInYangDB, QueryParameters aInQp, String aInNodeIdentifier, String networkId) {\n//        handleDeleteLogger.debug(\"VALIDATING NODE\");\n//        IYangObject nodeObj = aInYangDB.getSingle(aInNodeIdentifier, aInQp);\n//        if(nodeObj != null) {\n//            List tp = (List) nodeObj.get(\"ietf-network-topology:termination-point\");\n//            if(tp.isEmpty()) {\n//                handleDeleteLogger.debug(\"VALIDATING NODE - NO MORE TP. SO DELETING IT\");\n//                updateInDb(aInYangDB, null, aInNodeIdentifier, null, null, DELETE, null, aInQp);\n//            }\n//        }\n//    }\n\n    private void deleteTerminationPoint(IYangDB aInYangDB, QueryParameters aInQp, String aInSrcNodeIdentifier, String aInSrcNodeTPIdentifier) {\n        if(aInYangDB.exists(aInSrcNodeIdentifier, aInQp)) {\n            logger.debug(\"deleteTerminationPoint {}\", aInSrcNodeTPIdentifier);\n            updateInDb(aInYangDB, null, aInSrcNodeTPIdentifier, null, null, DELETE, null, aInQp);\n        }\n    }\n\n    public void handlePartialResync(SrcClass aInSrcClass, SyncClass aInSyncClass, long aInFromTime, String aInNeId, YangPluginMdConverterProvider aInYangPlugin) {\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass, aInSyncClass, aInNeId);\n            logger.debug(\"---------------------------------------------------handlePartialResync-----------------------------------------------------------\");\n        }\n\n        IMdConverterFw converterFw = aInYangPlugin.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        if (aInSyncClass.getDestClassPath().equals(NODE_CLASS_PATH)) {\n            logger.debug(\"L3 - handlePartialResync - UPDATE PREFIX after {}\", aInFromTime);\n            partialResyncPrefix(yangDB, aInFromTime);\n        }\n    }\n\n    void partialResyncPrefix(IYangDB yangDB, long aInFromTime) {\n        //get the prefixes that have changed after the timestamp.\n        QueryParameters  qp = getFilteredQueryParameters(null);\n        qp.setTimeField(TIME_FIELD_LAST_MODIFIED);\n        qp.setTimeFrom(aInFromTime);\n        List<IYangObject> prefixList = yangDB.getMany(NSP_SERVICE_GENERIC_PREFIX, qp);\n        if (prefixList != null && !prefixList.isEmpty()) {\n            prefixList.stream().forEach(prefix -> {\n                Map<String, Object> meta = (Map) prefix.asMap().get(\"@\"); //need to convert it to map to get the identifier\n                String identifier = (String) meta.get(\"nsp-model:identifier\");\n                String adminDomain = extractAdminDomain(identifier);\n                if(\"UnknownDomain\".equals(adminDomain) || adminDomain == null) {\n                    return;\n                }\n                String nodeId = StringUtils.substringBetween(identifier, \"routing-instance[id='\", \"'\");\n                String nodePath = extractNodePathFromPrefixPath(identifier);\n                IYangObject node = yangDB.getSingle(nodePath, getFilteredQueryParameters(\"protocols\"));\n                if(node != null) {\n                    String protocol = null;\n                    Collection<String> protocols = (Collection) node.get(\"protocols\");\n                    for (String p : protocols) {\n                        if(isValidProtocol(p)) {\n                            protocol = p;\n                            break;\n                        }\n                    }\n                    if(protocol == null) {\n                        return;\n                    }\n                    String networkId = adminDomain + \"-\" + protocol;\n                    String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkId);\n                    String nodePathIdentifier = networkPathIdentifier + String.format(NODE_PATH, nodeId);\n                    String ipAddress = (String) prefix.get(IP_ADDRESS);\n                    String prefixPathIden = nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes/prefix[prefix='\" + ipAddress + \"']\";\n                    QueryParameters queryParameters = getFilteredQueryParameters(null);\n                    if(yangDB.exists(prefixPathIden, queryParameters)) {\n                        //update\n                        logger.debug(\"L3 -  handlePartialResync - prefix - UPDATE {}\", prefixPathIden);\n                        IYangObject prefixObj = yangDB.getSingle(prefixPathIden, queryParameters);\n                        if (prefixObj != null) {\n                            int metric = (int) prefix.get(\"metric\");\n                            prefixObj.setProperty(\"metric\", metric);\n                            updateInDb(yangDB, prefixObj, prefixPathIden, null, null, UPDATE, null, queryParameters);\n                        }\n                    }\n                    else if (yangDB.exists(nodePathIdentifier)){\n                        //create\n                        logger.debug(\"L3 -  handlePartialResync - prefix - CREATE {}\", prefixPathIden);\n                        IYangObject prefixObj = new YangObject();\n                        prefixObj.setProperty(NETWORK_ID, networkId);\n                        prefixObj.setProperty(NODE_ID, nodeId);\n                        prefixObj.setProperty(PREFIX, ipAddress);\n                        prefixObj.setProperty(\"metric\", prefix.get(\"metric\"));\n                        updateInDb(yangDB, prefixObj, \"\", nodePathIdentifier + \"/ietf-l3-unicast-topology:l3-node-attributes\", \"prefix\", CREATE, null, queryParameters);\n\n                    }\n                }\n            });\n        }\n\n    }\n\n    private void updateInDb(IYangDB yangDB, IYangObject aInYangObject, String aInXPath, String aInParentPath,\n                            String aInChildType, String aInAction, ExecutionContext aInExecCtx, QueryParameters  aInQp) {\n\n        if (null != aInExecCtx) {\n            aInQp.setIExecutionContext(aInExecCtx);\n        }\n\n        if (null != aInAction) {\n            if (CREATE.equals(aInAction)) {\n                yangDB.createChild(aInParentPath, aInChildType, aInYangObject, aInQp);\n            } else if (\"UPDATE\".equals(aInAction)) {\n                yangDB.update(aInXPath, aInYangObject, aInQp);\n            } else {\n                yangDB.delete(aInXPath, aInQp);\n            }\n        }\n    }\n\n    List<String> getLinkObjIds(String aInLinkId) {\n        String[] idSplits = aInLinkId.split(\"--\");\n        String[] srcNodeSplits = idSplits[0].split(\":\");\n        String[] dstNodeSplits = idSplits[1].split(\":\");\n        List<String> linkObjIds = new ArrayList<>();\n        linkObjIds.add(srcNodeSplits[0]);\n        linkObjIds.add(srcNodeSplits[1]);\n        linkObjIds.add(dstNodeSplits[0]);\n        linkObjIds.add(dstNodeSplits[1]);\n        return linkObjIds;\n    }\n\n    String getOppIetfLinkId(String aInLinkId) {\n        String[] idSplits = aInLinkId.split(\"--\");\n        String oppLinkId = idSplits[1] + \"--\" + idSplits[0];\n        oppLinkId += (idSplits.length == 3) ? \"--\" + idSplits[2] : \"\";\n        return  oppLinkId;\n    }\n\n//    String getSubnetRouterId(String aInNodeId) {\n//        return aInNodeId.split(\"-psn\")[0];\n//    }\n\n    String getSubnetPsnId(String aInSubnetId) {\n        int fromIndex = aInSubnetId.indexOf(\"psn\");\n        if(fromIndex != -1 ) {\n            return(aInSubnetId.substring(fromIndex));\n        }\n        return aInSubnetId;\n    }\n\n    String getSubnetSystemId(String aInSubnetId) {\n        int toIndex = aInSubnetId.indexOf(\"-psn\");\n        if(toIndex != -1 ) {\n            return(aInSubnetId.substring(0, toIndex));\n        }\n\n        return aInSubnetId;\n    }\n\n    String getLinkId(String aInSrcNodeId, String aInDstNodeId, String aInSrcTpId, String aInDstTpId, String aInIsisLevel) {\n        String linkId = aInSrcNodeId + \":\" + aInSrcTpId + \"--\" + aInDstNodeId + \":\" + aInDstTpId;\n        if(aInIsisLevel != null) {\n            linkId = linkId + \"--\" + aInIsisLevel;\n        }\n        return linkId;\n    }\n\n    String getTerminationPointId( String aInOppLinkIdentifier, IYangDB aInYangDB, String aInNetworkId) {\n        logger.debug(\"Getting opposite link {}\", aInOppLinkIdentifier);\n        String dstTpId = null;\n        if(aInOppLinkIdentifier != null) {\n            QueryParameters qp = getFilteredQueryParameters(IP_ADDRESS);\n            List<IYangObject> oppLinkObjList = aInYangDB.getMany(aInOppLinkIdentifier, qp);\n            if(oppLinkObjList != null && !oppLinkObjList.isEmpty()) {\n                IYangObject oppLinkObj = oppLinkObjList.get(0);\n                dstTpId = (String) oppLinkObj.get(IP_ADDRESS);\n            }\n        }\n        return dstTpId;\n    }\n\n    Map<String,String> getLinkNodeDetails(String node) {\n        Map<String, String> nodeDetails = new HashMap<>();\n        if(node != null) {\n            String[] pathSplit = node.split(\"/\");\n            if (pathSplit.length > 0) {\n                String[] nodeSplit = pathSplit[pathSplit.length - 1].split(\"id=\");\n                if (nodeSplit.length > 1) {\n                    nodeDetails.put(NODE_TYPE, nodeSplit[0].substring(0, nodeSplit[0].length() - 1));\n                    nodeDetails.put(ID, nodeSplit[1].split(\"'\")[1]);\n                }\n            }\n        }\n        return nodeDetails;\n    }\n\n    String extractAdminDomain(String identifier) {\n        int fromIndex = identifier.indexOf(\"/admin-domain[name='\");\n        int toIndex = identifier.indexOf(\"'\", fromIndex+20);\n        return identifier.substring(fromIndex + 20, toIndex);\n    }\n\n    String extractNetworkIdFromIetfIdentifier(String identifier) {\n        return StringUtils.substringBetween(identifier, \"network-id='\", \"'\");\n    }\n\n    String extractLinkIdFromIetfIdentifier(String identifier) {\n        return StringUtils.substringBetween(identifier, \"link-id='\", \"'\");\n    }\n\n    String extractNodePathFromPrefixPath(String identifier) {\n        int fromIndex = 0;\n        int toIndex = identifier.indexOf(\"/prefix[\");\n        return identifier.substring(fromIndex, toIndex);\n    }\n\n    String getNetworkIdFromLink(List<String> aInDomains, String aInProtocol) {\n        String networkId = null;\n        if(aInDomains == null) {\n            logger.error(\"L3 - Link event missing admin domain info\");\n            return null;\n        }\n        for(String domain : aInDomains) {\n            String[] domainSplit = domain.split(\"'\");\n            networkId = domainSplit.length > 1 ? domainSplit[1] : null;\n            break;\n        }\n        if(networkId != null) {\n            if(aInProtocol.equals(\"ospf\") || aInProtocol.equals(\"isis\")) {\n                networkId = networkId + \"-\" + aInProtocol;\n                return networkId;\n            }\n        }\n        return null;\n    }\n\n    String getNetworkIdFromMeta(IYangDB aInYangDb, Map<String, Object> aInSrcObject) {\n        String networkId = null;\n        Map<String, Object> meta = (Map) aInSrcObject.get(\"@\");\n        String identifier = (String) meta.get(\"nsp-model:identifier\");\n        String adminDomain = extractAdminDomain(identifier);\n        if(\"UnknownDomain\".equals(adminDomain) || adminDomain == null) {\n            return null;\n        }\n        String protocol = null;\n        if(aInSrcObject.get(NODE_TYPE).equals(SUBNET)) {\n            protocol = (String) aInSrcObject.get(\"protocol\");\n        }\n        else {\n            Collection<String> protocols = (Collection) aInSrcObject.get(\"protocols\");\n            for (String p : protocols) {\n                if(isValidProtocol(p)) {\n                    protocol = p;\n                    break;\n                }\n            }\n        }\n\n        if(\"unknown\".equals(protocol) || protocol == null) {\n            protocol = getProtocolFromAdminDomain(aInYangDb, adminDomain);\n        }\n\n        if(isValidProtocol(protocol)) {\n            networkId = adminDomain + \"-\" + protocol;\n            return networkId;\n        }\n        else {\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"L3 - No valid protocol found for {}, {}\", adminDomain, protocol);\n            }\n        }\n\n        return networkId;\n\n    }\n\n    String getAdminDomainFromMeta(Map<String, Object> aInSrcObject) {\n        Map<String, Object> meta = (Map) aInSrcObject.get(\"@\");\n        String identifier = (String) meta.get(\"nsp-model:identifier\");\n        return extractAdminDomain(identifier);\n    }\n\n    String getNeIdFromRouterId(IYangDB aInYangDB, String aInNetworkId, String aInRouterId) {\n        if(aInRouterId.contains(\"psn\")) return null;\n        String[] domainSplit = aInNetworkId.split(\"-\");\n        String adminDomain = domainSplit[0] + \"-\" + domainSplit[1];\n        String nspServiceNodeIden = String.format(NSP_SERVICE_ADMIN_DOMAIN_PATH, adminDomain) + String.format(NSP_SERVICE_ROUTING_INS_PATH, aInRouterId);\n        QueryParameters qp = getFilteredQueryParameters(\"router/ne\");\n        List<IYangObject> nodeObjList = aInYangDB.getMany(nspServiceNodeIden, qp);\n        IYangObject nodeObj = (nodeObjList != null && !nodeObjList.isEmpty()) ? nodeObjList.get(0) : null;\n        if(nodeObj != null) {\n            IYangObject routerDetails = (IYangObject) nodeObj.get(\"router\");\n            if(routerDetails != null && routerDetails.get(\"ne\") != null) {\n                return extractNeId((String) routerDetails.get(\"ne\"));\n            }\n        }\n        return null;\n    }\n\n\n    boolean isValidProtocol(String protocol) {\n        return protocol != null && (protocol.equals(\"ospf\") || protocol.equals(\"isis\"));\n    }\n\n    String getNetworkId(IYangDB aInYangDb, IYangObject aInSrcObject) {\n        String networkId = (String) aInSrcObject.get(NAME);\n        if(networkId != null) {\n            String protocol = getProtocolFromAdminDomain(aInYangDb, networkId);\n            if (isValidProtocol(protocol)) {\n                networkId = networkId + \"-\" + protocol;\n                return networkId;\n            }\n        }\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"RETURNING NULL FOR {}\", networkId);\n        }\n        return null;\n    }\n\n    String getAdminDomainFromNetworkId(String aInNetworkId) {\n        String[] networkIds = aInNetworkId.split(\"-\");\n        return networkIds[0] + \"-\" + networkIds[1];\n    }\n\n    String getTeNetworkId(String networkId) {\n        return \"TE-\"+networkId;\n    }\n\n    String getSubnetNodeIdFromDB(YangDBConfig aInDbConfig, String aInSystemId, String aInNetworkId) {\n        String adminDomain = getAdminDomainFromNetworkId(aInNetworkId);\n\n        String lSql = \"SELECT id FROM service.routinginstance ri JOIN service.admindomain ad ON ad.dbid = ri.adminDomain_dbid\" +\n                    \" where systemId='\" + aInSystemId + \"' and ad.name = '\" + adminDomain + \"'\";\n        try {\n            final List<Object> query = aInDbConfig.getDb().selectQuery(lSql, new ArrayList<>(), new ArrayList<>(Arrays.asList(DBType.TEXT)));\n            if(query == null || query.isEmpty()) {\n                return null;\n            }\n            else {\n                return (String) query.get(0);\n            }\n        }\n        catch (Exception e)\n        {\n            logger.error(\"Exception when trying to get subnet-node-id for the system id: {} and admin domain: {}\", aInSystemId, adminDomain);\n        }\n        return null;\n    }\n\n    private List<Object> getLinkFromDb(String aInName, YangDBConfig aInDbConfig)\n    {\n        String lSql =  \"SELECT linkId, networkId FROM ietf.ietf_241652239nk_ietf_l3_unicast_topology_l3_link_attributes where name = '\" + aInName + \"'\";\n        try {\n            final List<Object> query = aInDbConfig.getDb().selectQuery(lSql, new ArrayList<>(), new ArrayList<>(Arrays.asList(DBType.TEXT, DBType.TEXT)));\n            return query;\n        }\n        catch (Exception e)\n        {\n            logger.error(\"Exception when trying to get the link {}\", aInName);\n        }\n        return null;\n    }\n\n    private String getPortDetailsFromDb(String aInTpId, IYangDB aInYangDb, String aInNeId)\n    {\n        List<Object> resourceList =  execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT erb.resource FROM service.endpointaddress ea JOIN service.endpointresourcebinding erb\" +\n                        \" ON ea.detailsParent_dbId = erb.endpoint_dbId WHERE ea.address = :address and erb.layer = 5\")\n                .setParameter(\"address\", aInTpId)\n                .getResultList());\n        if(resourceList == null || resourceList.isEmpty()) {\n            return null;\n        }\n        List<Long> dbIds = resourceList.stream().map(resource -> ModelFdnUtil.getId(ModelFdn.decode(resource.toString()))).collect(Collectors.toList());\n\n        if (dbIds != null && !dbIds.isEmpty()) {\n            try {\n                List<Object[]> portDetails = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                        .createQuery(\"SELECT eq.neId, eq.name FROM equipment_Equipment eq WHERE eq.dbId IN :dbids\")\n                        .setParameter(\"dbids\", dbIds)\n                        .getResultList());\n                if (!portDetails.isEmpty()) {\n                    for(Object[] portDetail : portDetails) {\n                        if(aInNeId.equals(portDetail[0])) {\n                            return (String) portDetail[1];\n                        }\n                    }\n                }\n            }\n            catch(Exception e) {\n                logger.error(\"L3 - Exception when finding the port name for the TP-ID: \" + aInTpId + \" and equipment dbIds: \" + dbIds.toString(), e);\n            }\n        }\n        return null;\n    }\n\n    private String getProtocolFromAdminDomain(IYangDB aInYangDb, String aInAdminDomain) {\n\n        try {\n            List<Object> protocols = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                    .createNativeQuery(\"SELECT rp.protocols FROM service.routinginstance ri \" +\n                            \"JOIN service.admindomain ad ON ri.admindomain_dbid = ad.dbid \" +\n                            \"JOIN service.routinginstance_protocols rp ON ri.dbid = rp.dbid \" +\n                            \"WHERE ad.name = :name AND ri.operstate = 1\")\n                    .setParameter(\"name\", aInAdminDomain)\n                    .getResultList());\n\n            if (!protocols.isEmpty()) {\n                for(Object protocol : protocols) {\n                    if((int)protocol == 1 || (int)protocol == 2) {\n                        return ((int)protocol == 1) ? \"isis\" : \"ospf\";\n                    }\n                }\n                return null;\n            }\n            else {\n                logger.warn(\"L3 - getProtocolFromAdminDomain - protocol is empty for {}\", aInAdminDomain);\n            }\n        }\n        catch (Exception e) {\n            return null;\n        }\n        return null;\n    }\n\n    private List<List<String>> getRouterDetailsFromNeId(IYangDB aInYangDb, String aInNeId)\n    {\n        List<Long> dbList =  execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createQuery(\"SELECT eq.dbId FROM equipment_NetworkElement eq WHERE eq.neId = :neId\")\n                .setParameter(\"neId\", aInNeId)\n                .getResultList());\n        if(dbList == null || dbList.isEmpty()) {\n            return null;\n        }\n\n        List<String> modelFdns = dbList.stream().map(dbId -> ModelFdn.encode(ModelFdnUtil.modelFdn(\"equipment.NetworkElement\", dbId))).collect(Collectors.toList());\n        List<List<String>> routerDetailsList = new ArrayList<>();\n        if (modelFdns != null && !modelFdns.isEmpty()) {\n            try {\n                List<Object[]> routerDetails = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                        .createNativeQuery(\"SELECT ri.id, ad.name, rp.protocols FROM service.routinginstance ri \" +\n                                \"JOIN service.admindomain ad ON ri.admindomain_dbid = ad.dbid \" +\n                                \"JOIN service.routinginstance_protocols rp ON ri.dbid = rp.dbid \" +\n                                \"JOIN service.router rr ON ri.router_dbid = rr.dbid \" +\n                                \"WHERE rr.ne IN :fdns OR rr.ne LIKE :pattern\")\n                        .setParameter(\"fdns\", modelFdns)\n                        /* sometimes when a node is re-managed, NRCP takes some time to update the router.ne field with the proper NE fdn.\n                         Until then it has one of the sources. Meanwhile we get the L2 correlation events and so we end up ignoring it.\n                         This pattern search will fix it */\n                        .setParameter(\"pattern\", \"%\" + aInNeId + \"%\")\n                        .getResultList());\n\n                if (routerDetails != null && !routerDetails.isEmpty()) {\n                    if(logger.isDebugEnabled()) {\n                        logger.debug(\"L3 - ROUTER DETAILS for NE-ID: {} are {}\", aInNeId, routerDetails.toString());\n                    }\n                    for(Object[] router : routerDetails) {\n                        int protocol = (int) router[2];\n                        String protocolName = (protocol == 1) ? \"isis\" : (protocol == 2) ? \"ospf\" : null;\n                        if(protocolName != null) {\n                            List<String> routerProps = new ArrayList<>();\n                            routerProps.add((String) router[0]);\n                            routerProps.add((String) router[1]);\n                            routerProps.add(protocolName);\n                            routerDetailsList.add(routerProps);\n                        }\n                    }\n                }\n                return routerDetailsList;\n            }\n            catch(Exception e) {\n                logger.error(\"L3 - Exception when finding the router ID for the NE-ID: \" + aInNeId, e);\n            }\n        }\n        return routerDetailsList;\n    }\n\n    public <T> T execute(IDB db, Function<ITransactionContext, T> fn) {\n        try {\n            if (Transactor.isInTransaction()) {\n                return fn.apply(Transactor.getContext());\n            } else {\n                return Transactor.execute(db, fn, true);\n            }\n        } catch (DBRuntimeException e) {\n            logger.error(\"L3 - DB ACCESS ERROR: \", e);\n            return null;\n        }\n    }\n\n\n    private String getSupportingNetworkRef(IYangDB aInYangDb, QueryParameters aInQp) {\n        return aInYangDb.exists(L2_NETWORK_PATH, aInQp) ? L2_NETWORK_PATH : null;\n    }\n\n    private String getSupportingNodeRef(IYangDB aInYangDb, QueryParameters aInQp, String aInNodeId) {\n        String supportingNodeRef = L2_NETWORK_PATH + String.format(NODE_PATH, aInNodeId);\n        supportingNodeRef = aInYangDb.exists(supportingNodeRef, aInQp) ? supportingNodeRef : null;\n        return supportingNodeRef;\n    }\n\n    private String getSupportingTpRef(IYangDB aInYangDb, QueryParameters aInQp, String aInNodeId, String aInTpId) {\n        String supportingTpRef = L2_NETWORK_PATH + String.format(NODE_PATH, aInNodeId)\n                + String.format(TP_PATH, aInTpId);\n        supportingTpRef = aInYangDb.exists(supportingTpRef, aInQp) ? supportingTpRef : null;\n        return supportingTpRef;\n    }\n\n    private String getSupportingLinkRef(IYangDB aInYangDb, QueryParameters aInQp, String aInLinkId) {\n        String supportingLinkRef = L2_NETWORK_PATH + String.format(LINK_PATH, aInLinkId);\n        supportingLinkRef = aInYangDb.exists(supportingLinkRef, aInQp) ? supportingLinkRef : null;\n        return supportingLinkRef;\n    }\n\n    String extractNeId(String identifier) {\n        if(identifier != null) {\n            int fromIndex = identifier.indexOf(\"ne-id='\");\n            if(fromIndex != -1) {\n                int toIndex = identifier.indexOf(\"'\", fromIndex + 7);\n                return identifier.substring(fromIndex + 7, toIndex);\n            }\n        }\n        return null;\n    }\n\n    public Map<String, String> getSubInterfacePortMap(String aInNodeId, IMdConverterFw aInConverterFw) {\n        String subInterfacePath = String.format(SUBINTERFACE_FILTER, aInNodeId);\n        Map<String, String> portInterfaceMap = new HashMap<>();\n        try {\n            IRestConfClient restConfClient = aInConverterFw.getRestConfClient();\n            Map<String,Object> lResponse = restConfClient.xpathGetData(subInterfacePath, \"fields=openconfig-if-ip:ipv4;config&depth=5\");\n            if (lResponse != null && !lResponse.isEmpty()) {\n                List<Map> subInterfaces = (List<Map>) lResponse.get(\"openconfig-interfaces:subinterface\");\n                if(subInterfaces != null) {\n                    for (Map subInterface : subInterfaces) {\n                        String ip = extractIpFromSubInterface((Map) subInterface.get(\"openconfig-if-ip:ipv4\"));\n                        if(ip != null) {\n                            String port = extractPortFromSubInterface((Map) subInterface.get(\"config\"));\n                            portInterfaceMap.put(ip, getPortNameFromOpenConfigPortName(port));\n                        }\n                    }\n                }\n            }\n        }\n        catch(Exception e) {\n            logger.warn(\"L3 - RestconfApi cannot get subinterfaces.\");\n        }\n        return portInterfaceMap;\n    }\n\n    public String getSubInterfaces(String aInNodeId, IMdConverterFw aInConverterFw, String ip) {\n         /* Getting errors when tried to query the parent based on the child attributes.\n           java.lang.IllegalArgumentException: only simple xpaths are supported - failing with this error message\n           So we have to get all the network interfaces on the node and find the matching one. Ideal filter below\n           /nsp-network:network/node[node-id='%s']/node-root/\" +\n           \"openconfig-interfaces:interfaces/interface/subinterfaces/subinterface\" +\n           \"[boolean(openconfig-if-ip:ipv4/addresses/address[ip='%s'])]\"\n         */\n        String subInterfacePath = String.format(SUBINTERFACE_FILTER, aInNodeId);\n        Integer unnumbered = Ints.tryParse(ip);\n        String unnumberedInterface = ip.contains(\"%\") ? ip.split(\"%\")[1] : unnumbered == null ? null : unnumbered.toString();\n        if(unnumberedInterface != null && !unnumberedInterface.isEmpty()) {\n            subInterfacePath += String.format(SUBINTERFACE_UNNUM_FILTER, unnumberedInterface);\n        }\n        try {\n            IRestConfClient restConfClient = aInConverterFw.getRestConfClient();\n            Map<String,Object> lResponse = restConfClient.xpathGetData(subInterfacePath, \"fields=openconfig-if-ip:ipv4;config&depth=5\");\n            if (lResponse != null && !lResponse.isEmpty()) {\n                List<Map> subInterfaces = (List<Map>) lResponse.get(\"openconfig-interfaces:subinterface\");\n                if(subInterfaces != null) {\n                    for (Map subInterface : subInterfaces) {\n                        if (!unnumberedInterface.isEmpty() || ip.equals(extractIpFromSubInterface((Map) subInterface.get(\"openconfig-if-ip:ipv4\")))){\n                            String port = extractPortFromSubInterface((Map) subInterface.get(\"config\"));\n                            return getPortNameFromOpenConfigPortName(port);\n                        }\n                    }\n                }\n            }\n        }\n        catch(Exception e) {\n            logger.warn(\"L3 - RestconfApi cannot get subinterfaces.\");\n        }\n        return null;\n    }\n\n    private String extractIpFromSubInterface(Map aInIpMap) {\n        if(aInIpMap != null) {\n            Map addresses = (Map) aInIpMap.get(\"addresses\");\n            if (addresses != null) {\n                List<Map> addressList = (List) addresses.get(\"address\");\n                if (addressList != null) {\n                    for (Map ipMap : addressList) {\n                        return (String) ipMap.getOrDefault(\"ip\", null);\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    private String extractPortFromSubInterface(Map aInConfigMap) {\n        if(aInConfigMap != null) {\n            return (String) aInConfigMap.getOrDefault(\"nsp-openconfig-interfaces-augments:port\", null);\n        }\n        return null;\n    }\n\n    private String getPortNameFromOpenConfigPortName(String portName) {\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"L3 - Port Name from openConfig api: {}\",portName);\n        }\n        if(portName == null) return null;\n\n//        if(portName.contains(\"GigabitEthernet\")) {\n//            //cisco\n//            String[] port = portName.split(\"GigabitEthernet\");\n//            return \"GigabitEthernet Port \" + port[1];\n//        }\n\n        if(portName.contains(\":\")) {\n            String[] port = portName.split(\":\");\n            return port[0];\n        }\n        else {\n            return portName;\n        }\n    }\n\n    private boolean canDeleteTp(IYangDB aInYangDb, String aInPattern, String aInNetworkId) {\n        BigInteger count = (BigInteger) execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT count(*) FROM \" +\n                        \"ietf.ietf_network_networks_network_ietf_network_topology_link sl WHERE sl.linkId LIKE :pattern \" +\n                        \"AND sl.networkId = :networkId\")\n                .setParameter(\"pattern\", aInPattern)\n                .setParameter(\"networkId\", aInNetworkId)\n                .getSingleResult());\n        return count != null && count.longValue() == 0;\n    }\n\n    private void createSupportingNetwork(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInSupportingNetworkRef) {\n        String networkPathIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId);\n        IYangObject supportingNetworkobj = new YangObject();\n        supportingNetworkobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingNetworkobj.setProperty(NETWORK_REF, aInSupportingNetworkRef);\n        updateInDb(aInYangDB, supportingNetworkobj, \"\", networkPathIdentifier, SUPPORTING_NETWORK, CREATE, null, aInQp);\n    }\n\n    private void createSupportingNode(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                                      String aInSupportingNodeRef, String aInNodePathIdentifier) {\n        IYangObject supportingNodeobj = new YangObject();\n        supportingNodeobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingNodeobj.setProperty(NODE_ID, aInNodeId);\n        supportingNodeobj.setProperty(NETWORK_REF, L2_NETWORK_PATH);\n        supportingNodeobj.setProperty(NODE_REF, aInSupportingNodeRef);\n        updateInDb(aInYangDB, supportingNodeobj, \"\", aInNodePathIdentifier, SUPPORTING_NODE, CREATE, null, aInQp);\n        if(supportingNodeMap.containsKey(aInSupportingNodeRef)) {\n            supportingNodeMap.get(aInSupportingNodeRef).add(aInNodePathIdentifier);\n        }\n        else {\n            supportingNodeMap.put(aInSupportingNodeRef, new HashSet<>(Arrays.asList(aInNodePathIdentifier)));\n        }\n    }\n\n    private void createSupportingTp(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                                    String aInTpId, String aInNeId, String aInSupportingTpRef, String aInTpPathIdentifier) {\n        IYangObject supportingTpobj = new YangObject();\n        supportingTpobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingTpobj.setProperty(NODE_ID, aInNodeId);\n        supportingTpobj.setProperty(TP_ID, aInTpId);\n        supportingTpobj.setProperty(NETWORK_REF, L2_NETWORK_PATH);\n        supportingTpobj.setProperty(NODE_REF, L2_NETWORK_PATH + String.format(NODE_PATH, aInNeId));\n        supportingTpobj.setProperty(TP_REF, aInSupportingTpRef);\n        updateInDb(aInYangDB, supportingTpobj, \"\", aInTpPathIdentifier, SUPPORTING_TP, CREATE, null, aInQp);\n        supportingTpMap.put(aInSupportingTpRef, aInTpPathIdentifier);\n        if(l2TpCreateEvents.containsKey(aInNeId)) {\n            l2TpCreateEvents.get(aInNeId).portsToAdd.remove(StringUtils.substringBetween(aInSupportingTpRef, \"[tp-id='\", \"']\"));\n        }\n    }\n\n    private void deleteSupportingTp(String aInSupportingTpIden, IYangDB aInYangDB) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInYangDB.exists(aInSupportingTpIden, qp)) {\n            IYangObject supportingTpObj = aInYangDB.getSingle(aInSupportingTpIden, qp);\n            String l2TpRef = (String) supportingTpObj.get(TP_REF);\n            logger.debug(\"L3 - RESYNC TP - deleteSupportingTp {} , {}\", aInSupportingTpIden, l2TpRef);\n            updateInDb(aInYangDB, null, aInSupportingTpIden, null, null, DELETE, null, qp);\n            supportingTpMap.remove(l2TpRef);\n        }\n    }\n\n    private void createSupportingLink(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInLinkId,\n                                      String aInSupportingLinkRef, String aInLinkIdentifier) {\n        IYangObject supportingLinkobj = new YangObject();\n        supportingLinkobj.setProperty(NETWORK_ID, aInNetworkId);\n        supportingLinkobj.setProperty(LINK_ID, aInLinkId);\n        supportingLinkobj.setProperty(NETWORK_REF, L2_NETWORK_PATH);\n        supportingLinkobj.setProperty(LINK_REF, aInSupportingLinkRef);\n        updateInDb(aInYangDB, supportingLinkobj, \"\", aInLinkIdentifier, SUPPORTING_LINK, CREATE, null, aInQp);\n        supportingLinkMap.put(aInSupportingLinkRef, aInLinkIdentifier);\n        l2LinkCreateEvents.remove(aInSupportingLinkRef);\n    }\n\n    private void deleteSupportingLink(String aInSupportingLinkIden, IYangDB aInYangDB) {\n        QueryParameters qp = getFilteredQueryParameters(null);\n        if(aInYangDB.exists(aInSupportingLinkIden, qp)) {\n            IYangObject supportingLinkObj = aInYangDB.getSingle(aInSupportingLinkIden, qp);\n            String l2TpRef = (String) supportingLinkObj.get(LINK_REF);\n            logger.debug(\"L3 - RESYNC LINK - deleteSupportingLink {} , {}\", aInSupportingLinkIden, l2TpRef);\n            updateInDb(aInYangDB, null, aInSupportingLinkIden, null, null, DELETE, null, qp);\n            supportingLinkMap.remove(l2TpRef);\n        }\n    }\n\n    private void createTeNetworkRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInTeNetworkRef) {\n        String networkTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) +\n                \"/ietf-l3-unicast-topology:l3-topology-attributes\";\n        if(!aInYangDB.exists(networkTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-topology-attributes\", aInQp)) {\n            IYangObject teNetworkRefObj = new YangObject();\n            teNetworkRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teNetworkRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            updateInDb(aInYangDB, teNetworkRefObj, \"\", networkTopoAttrIdentifier,\n                    \"ietf-l3-te-topology:l3-te-topology-attributes\", CREATE, null, aInQp);\n        }\n    }\n\n    private void createTeNodeRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                                 String aInTeNetworkRef, String aInTeNodeRef) {\n        String nodeTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) +\n                String.format(NODE_PATH, aInNodeId) + \"/ietf-l3-unicast-topology:l3-node-attributes\";\n        if(!aInYangDB.exists(nodeTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-node-attributes\", aInQp)) {\n            IYangObject teNodeRefObj = new YangObject();\n            teNodeRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teNodeRefObj.setProperty(NODE_ID, aInNodeId);\n            teNodeRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            teNodeRefObj.setProperty(NODE_REF, aInTeNodeRef);\n            updateInDb(aInYangDB, teNodeRefObj, \"\", nodeTopoAttrIdentifier,\n                    \"ietf-l3-te-topology:l3-te-node-attributes\", CREATE, null, aInQp);\n        }\n    }\n\n    private void createTeTpRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInNodeId,\n                               String aInTpId, String aInTeNetworkRef, String aInTeNodeRef, String aInTeTpRef) {\n        String tpTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) +\n                String.format(NODE_PATH, aInNodeId) + String.format(TP_PATH, aInTpId) +\n                \"/ietf-l3-unicast-topology:l3-termination-point-attributes\";\n        if(!aInYangDB.exists(tpTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-tp-attributes\", aInQp)) {\n            IYangObject teTpRefObj = new YangObject();\n            teTpRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teTpRefObj.setProperty(NODE_ID, aInNodeId);\n            teTpRefObj.setProperty(TP_ID, aInTpId);\n            teTpRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            teTpRefObj.setProperty(NODE_REF, aInTeNodeRef);\n            teTpRefObj.setProperty(TP_REF, aInTeTpRef);\n            updateInDb(aInYangDB, teTpRefObj, \"\", tpTopoAttrIdentifier, \"ietf-l3-te-topology:l3-te-tp-attributes\",\n                    CREATE, null, aInQp);\n        }\n    }\n\n    private void createTeLinkRef(IYangDB aInYangDB, QueryParameters aInQp, String aInNetworkId, String aInLinkId,\n                               String aInTeNetworkRef, String aInTeLinkRef) {\n        String linkTopoAttrIdentifier = String.format(L3_NETWORK_PATH, aInNetworkId) + String.format(LINK_PATH, aInLinkId)\n                + \"/ietf-l3-unicast-topology:l3-link-attributes\";\n        if(!aInYangDB.exists(linkTopoAttrIdentifier + \"/ietf-l3-te-topology:l3-te-link-attributes\", aInQp)) {\n            IYangObject teLinkRefObj = new YangObject();\n            teLinkRefObj.setProperty(NETWORK_ID, aInNetworkId);\n            teLinkRefObj.setProperty(LINK_ID, aInLinkId);\n            teLinkRefObj.setProperty(NETWORK_REF, aInTeNetworkRef);\n            teLinkRefObj.setProperty(LINK_REF, aInTeLinkRef);\n            updateInDb(aInYangDB, teLinkRefObj, \"\", linkTopoAttrIdentifier, \"ietf-l3-te-topology:l3-te-link-attributes\",\n                    CREATE, null, aInQp);\n        }\n    }\n\n    private QueryParameters getFilteredQueryParameters (String fields) {\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n        if(fields != null) {\n            qp.setFields(Fields.parse(fields));\n        }\n        return qp;\n    }\n\n    private void populateSuportingNodeMap(IYangDB aInYangDb) {\n        List<Object[]> nodeList = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT sn.networkId, sn.nodeId, sn.nodeRef FROM \" +\n                        \"ietf.ietf_network_networks_network_node_supporting_node sn WHERE sn.networkId LIKE :pattern1 \" +\n                        \"OR sn.networkId LIKE :pattern2\")\n                .setParameter(\"pattern1\", \"%ospf%\")\n                .setParameter(\"pattern2\", \"%isis%\")\n                .getResultList());\n        if (nodeList == null || nodeList.isEmpty()) {\n            return;\n        }\n\n        for(Object[] nodeInfo : nodeList) {\n            if(nodeInfo.length == 3) {\n                String l3NodeIden = String.format(L3_NETWORK_PATH, nodeInfo[0]) + String.format(NODE_PATH, nodeInfo[1]);\n                if (supportingNodeMap.containsKey(nodeInfo[2])) {\n                    supportingNodeMap.get(nodeInfo[2]).add(l3NodeIden);\n                } else {\n                    supportingNodeMap.put(nodeInfo[2].toString(), new HashSet<>(Arrays.asList(l3NodeIden)));\n                }\n            }\n        }\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(supportingNodeMap.toString());\n        }\n    }\n\n    private void populateSuportingTpMap(IYangDB aInYangDb) {\n        List<Object[]> tpList = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT sp.networkId, sp.nodeId, sp.tpId, sp.tpRef FROM \" +\n                        \"ietf.ietf_90278165_termination_point_supporting_termination_point sp WHERE sp.networkId LIKE :pattern1 \" +\n                        \"OR sp.networkId LIKE :pattern2\")\n                .setParameter(\"pattern1\", \"%ospf%\")\n                .setParameter(\"pattern2\", \"%isis%\")\n                .getResultList());\n        if (tpList == null || tpList.isEmpty()) {\n            return;\n        }\n\n        for(Object[] tpInfo : tpList) {\n            if(tpInfo.length == 4) {\n                String l3TpIden = String.format(L3_NETWORK_PATH, tpInfo[0]) + String.format(NODE_PATH, tpInfo[1]) +\n                        String.format(TP_PATH, tpInfo[2]);\n                supportingTpMap.put(tpInfo[3].toString(), l3TpIden);\n            }\n        }\n\n        if(logger.isDebugEnabled()) {\n            logger.debug(supportingTpMap.toString());\n        }\n    }\n\n    private void populateSuportingLinkMap(IYangDB aInYangDb) {\n        List<Object[]> linkListInfo = execute(aInYangDb.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(\"SELECT sl.networkId, sl.linkId, sl.linkRef FROM \" +\n                        \"ietf.ietf_139678392ork_ietf_network_topology_link_supporting_link sl WHERE sl.networkId LIKE :pattern1 \" +\n                        \"OR sl.networkId LIKE :pattern2\")\n                .setParameter(\"pattern1\", \"%ospf%\")\n                .setParameter(\"pattern2\", \"%isis%\")\n                .getResultList());\n        if (linkListInfo == null || linkListInfo.isEmpty()) {\n            return;\n        }\n\n        for(Object[] linkInfo : linkListInfo) {\n            if(linkInfo.length == 3) {\n                String l3LinkIden = String.format(L3_NETWORK_PATH, linkInfo[0]) + String.format(LINK_PATH, linkInfo[1]);\n                supportingLinkMap.put(linkInfo[2].toString(), l3LinkIden);\n            }\n        }\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(supportingLinkMap.toString());\n        }\n    }\n\n    private void startCorrelationService() {\n        synchronized (this) {\n            if (correlationService == null || correlationService.isShutdown()) {\n                logger.debug(\"L3 - L2 - Correlation - correlationService has been started that will run periodically until correlation is complete\");\n                correlationService = Executors.newScheduledThreadPool(1,\n                        new ThreadFactoryBuilder().setNameFormat(\"L3-CorrelationHandler-to-L2\").build());\n                correlationService.scheduleAtFixedRate(() -> correlateTpsAndLinks(), 2, 2, TimeUnit.MINUTES);\n            }\n        }\n    }\n\n    @SuppressFBWarnings(\"WMI_WRONG_MAP_ITERATOR\")\n    class L2TpCreateTask implements Runnable {\n        String neId;\n        Map<String, Integer> portsToAdd = new HashMap<>();\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n\n        L2TpCreateTask(String neId, String portToAdd,  IMdConverterFw converterFw ) {\n            this.neId = neId;\n            if(portToAdd != null && !portToAdd.isEmpty()) {\n                portsToAdd.put(portToAdd, 1);\n            }\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(!portsToAdd.isEmpty()) {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"Trying to add correlation for ports {} on {}\", portsToAdd.entrySet().toString(), neId);\n                }\n                List<List<String>> routers = getRouterDetailsFromNeId(yangDB, neId);\n                if(routers == null || routers.isEmpty()) {\n                    logger.debug(\"******** L3 - Correlation - no router found for the NE ID {}\", neId);\n                    return;\n                }\n                Map<String, String> portInterfaceMap = null;\n                for(List<String> router: routers) {\n                    String networkId = router.get(1) + \"-\" + router.get(2);\n                    String nodeIdentifer = String.format(L3_NETWORK_PATH, networkId) + String.format(NODE_PATH, router.get(0));\n                    QueryParameters qp = getFilteredQueryParameters(\"tp-id;\"+SUPPORTING_TP);\n                    qp.setDepth(2);\n\n                    /*\n                      1. call the openconfig subinterface query and get the map of port and interfaces for the NE ID\n                      2. For each router, get all the TPs\n                      3. If supporting tp is null\n                      3.1 If the map contains the TP, add correlation.\n                      3.2 If not, try to get the nfmp way or unnumbered interface way and add correlation\n                      3.3 remove the ports from the portsToadd list.\n                      4.If there is any port remaining, retry them (3 times).\n                    */\n\n                    List<IYangObject> tpList = yangDB.getMany(nodeIdentifer + \"/\" + TP_TYPE, qp);\n                    if(tpList != null && !tpList.isEmpty()) {\n                        for(IYangObject tp : tpList) {\n                            if(tp.get(SUPPORTING_TP) == null) {\n                                if(portInterfaceMap == null) {\n                                    portInterfaceMap = getSubInterfacePortMap(neId, converterFw);\n                                    if(logger.isDebugEnabled()) {\n                                        logger.debug(\"L3 - correlation mdm port interface map {} for {}\", portInterfaceMap.toString(), neId);\n                                    }\n                                }\n                                String tpId = (String) tp.get(\"tp-id\");\n                                String portName = portInterfaceMap.get(tpId);\n\n                                if(portName == null) {\n                                    portName = getPortDetailsFromDb(tpId, yangDB, neId);\n                                    if(portName == null && tpId.contains(\"%\")) {\n                                        portName = getSubInterfaces(neId, converterFw, tpId);\n                                        if(logger.isDebugEnabled() && portName == null) {\n                                            logger.debug(\"portName is still null for {} and {}\", tpId, neId);\n                                        }\n                                    }\n                                }\n\n                                if(portName != null && portsToAdd.containsKey(portName)) {\n                                    String tpIden = nodeIdentifer + String.format(TP_PATH, tpId);\n                                    String supportingTpIden = tpIden + \"/\" + SUPPORTING_TP;\n                                    if(!yangDB.exists(supportingTpIden)) {\n                                        String instanceId = L2_NETWORK_PATH + String.format(NODE_PATH, neId)\n                                                + String.format(TP_PATH, portName);\n                                        logger.debug(\"L3 - createSupportingTp {}\", instanceId);\n                                        qp = getFilteredQueryParameters(null);\n                                        createSupportingTp(yangDB, qp, networkId, router.get(0), tpId, neId, instanceId, tpIden);\n                                        portsToAdd.remove(portName);\n                                    }\n                                }\n                            }\n                        }\n                        // the remaining ports in portsToAdd can be re-tried.\n                        for(String port : portsToAdd.keySet()) {\n                            portsToAdd.put(port, portsToAdd.get(port) + 1);\n                        }\n                        //remove after 3 attempts.\n                        portsToAdd.entrySet().removeIf(e -> e.getValue() > 3);\n\n                    }\n                    else {\n                        portsToAdd.clear();\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - NO TP for {}\", nodeIdentifer + \"/\" + TP_TYPE);\n                        }\n                    }\n                }\n            }\n\n            //for retries\n            if(!portsToAdd.isEmpty()) {\n                portsToAdd.entrySet().removeIf(e -> supportingTpMap.containsKey(L2_NETWORK_PATH +\n                        String.format(NODE_PATH, neId) + String.format(TP_PATH, e.getKey())));\n\n                if(l2TpCreateEvents.containsKey(neId)) {\n                    for(Map.Entry<String,Integer> port : portsToAdd.entrySet()) {\n                        l2TpCreateEvents.get(neId).portsToAdd.put(port.getKey(), port.getValue());\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - correlation - retrying for port {} on {}\", port.getKey(), neId);\n                        }\n                    }\n                }\n                else {\n                    l2TpCreateEvents.put(neId, this);\n                }\n                startCorrelationService();\n            }\n        }\n    }\n\n    @SuppressFBWarnings(\"URF_UNREAD_FIELD\")\n    class L2TpDeleteTask implements Runnable {\n        String neId;\n        List<String> portsToDelete = new ArrayList<>();\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n\n        L2TpDeleteTask(String neId, String portToDelete, IMdConverterFw converterFw ) {\n            this.neId = neId;\n            if(portToDelete != null && !portToDelete.isEmpty()) {\n                portsToDelete.add(portToDelete);\n            }\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(!portsToDelete.isEmpty()) {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"correlation delete tp task is running\");\n                }\n                deleteL2SupportingTps(portsToDelete, neId, yangDB);\n                portsToDelete.clear();\n            }\n        }\n    }\n\n    class L2LinkCreateTask implements Runnable {\n        String instanceId;\n        String linkId;\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n        int retryAttempt = 1;\n\n        L2LinkCreateTask(String instanceId, IMdConverterFw converterFw) {\n            this.instanceId = instanceId;\n            this.linkId = StringUtils.substringBetween(instanceId, \"[link-id='\", \"']\");\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(linkId != null) {\n                if(logger.isDebugEnabled()) {\n                    logger.debug(\"L3- correlation - Trying to correlate link {}\", linkId);\n                }\n                String[] tps = linkId.split(\"--\");\n                if(tps != null && tps.length == 2) {\n                    List<String> networkDetails = new ArrayList<>();\n                    List<String> l3SourceTps = getTpDetails(tps[0].split(\":\"), yangDB, converterFw, networkDetails);\n                    if(!l3SourceTps.isEmpty()) {\n                        List<String> l3DstTps = getTpDetails(tps[1].split(\":\"), yangDB, converterFw, null);\n                        if(!l3DstTps.isEmpty()) {\n                            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkDetails.get(0));\n                            for(String sourceTp : l3SourceTps) {\n                                for (String dstTp : l3DstTps ) {\n                                    if(logger.isDebugEnabled()) {\n                                        logger.debug(\"L3 - correlation exists for L3 source and destination tps for {}\", linkId);\n                                    }\n                                    String l3LinkId = sourceTp + \"--\" + dstTp;\n                                    String linkIdentifier = networkPathIdentifier + String.format(LINK_PATH, l3LinkId);\n                                    String supportingLinkIden = linkIdentifier + \"/\" + SUPPORTING_LINK;\n                                    QueryParameters qp = getFilteredQueryParameters(null);\n                                    if(networkDetails.get(0).contains(\"isis\")) {\n                                        String l3IsisLinkId = l3LinkId + \"--l1\";\n                                        linkIdentifier = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId);\n                                        supportingLinkIden = linkIdentifier + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(linkIdentifier, qp) && !yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - createSupportingLink {}\", instanceId);\n                                            createSupportingLink(yangDB, qp, networkDetails.get(0), l3IsisLinkId, instanceId, linkIdentifier);\n                                        }\n\n                                        l3IsisLinkId = l3LinkId + \"--l2\";\n                                        linkIdentifier = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId);\n                                        supportingLinkIden = linkIdentifier + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(linkIdentifier, qp) && !yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - createSupportingLink {}\", instanceId);\n                                            createSupportingLink(yangDB, qp, networkDetails.get(0), l3IsisLinkId, instanceId, linkIdentifier);\n                                        }\n                                    }\n                                    else if(yangDB.exists(linkIdentifier, qp) && !yangDB.exists(supportingLinkIden, qp)) {\n                                        logger.debug(\"L3 - createSupportingLink {}\", instanceId);\n                                        createSupportingLink(yangDB, qp, networkDetails.get(0), l3LinkId, instanceId, linkIdentifier);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if(logger.isDebugEnabled()) {\n                                logger.debug(\"L3 - correlation - link retrying because destination tp is not correlated for {}\", this.linkId);\n                            }\n                            if(retryAttempt < 3 && !supportingLinkMap.containsKey(this.instanceId)) {\n                                this.retryAttempt++;\n                                l2LinkCreateEvents.put(this.instanceId, this);\n                                startCorrelationService();\n                            }\n\n                        }\n                    }\n                    else {\n                        if(logger.isDebugEnabled()) {\n                            logger.debug(\"L3 - correlation - link retrying because source tp is not correlated for {}\", this.linkId);\n                        }\n                        if(retryAttempt < 3 && !supportingLinkMap.containsKey(this.instanceId)) {\n                            this.retryAttempt++;\n                            l2LinkCreateEvents.put(this.instanceId, this);\n                            startCorrelationService();\n                        }\n                    }\n                }\n            }\n\n        }\n    }\n\n    class L2LinkDeleteTask implements Runnable {\n        String instanceId;\n        String linkId;\n        IYangDB yangDB;\n        IMdConverterFw converterFw;\n\n        L2LinkDeleteTask(String instanceId, IMdConverterFw converterFw) {\n            this.instanceId = instanceId;\n            this.linkId = StringUtils.substringBetween(instanceId, \"[link-id='\", \"']\");\n            this.converterFw = converterFw;\n            this.yangDB = converterFw.getIYangDB();\n        }\n\n        @Override\n        public void run() {\n            if(logger.isDebugEnabled()) {\n                logger.debug(\"correlation link delete task is running\");\n            }\n            List<String> linksDeleted = new ArrayList<>();\n            if(supportingLinkMap.containsKey(instanceId)) {\n                String supportingLinkIden = supportingLinkMap.get(instanceId) + \"/\" + SUPPORTING_LINK;\n                if(yangDB.exists(supportingLinkIden)) {\n                    logger.debug(\"L3 - deleteSupportingLink {}\", supportingLinkIden);\n                    updateInDb(yangDB, null, supportingLinkIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                }\n                linksDeleted.add(supportingLinkMap.get(instanceId));\n                supportingLinkMap.remove(instanceId);\n            }\n            else if(linkId != null) {\n                String[] tps = linkId.split(\"--\");\n                if(tps != null && tps.length == 2) {\n                    List<String> networkDetails = new ArrayList<>();\n                    List<String> l3SourceTps = getTpDetails(tps[0].split(\":\"), yangDB, converterFw, networkDetails);\n                    if(!l3SourceTps.isEmpty()) {\n                        List<String> l3DstTps = getTpDetails(tps[1].split(\":\"), yangDB, converterFw, null);\n                        if(!l3DstTps.isEmpty()) {\n                            String networkPathIdentifier = String.format(L3_NETWORK_PATH, networkDetails.get(0));\n                            for(String sourceTp : l3SourceTps) {\n                                for (String dstTp : l3DstTps ) {\n                                    String l3LinkId = sourceTp + \"--\" + dstTp;\n                                    QueryParameters qp = getFilteredQueryParameters(null);\n                                    if(networkDetails.get(0).contains(\"isis\")) {\n                                        String l3IsisLinkId = l3LinkId + \"--l1\";\n                                        String supportingLinkIden = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId) + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - deleteSupportingLink {}\", supportingLinkIden);\n                                            updateInDb(yangDB, null, supportingLinkIden, null, null, DELETE, null, qp);\n                                            linksDeleted.add(networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId));\n                                        }\n\n                                        l3IsisLinkId = l3LinkId + \"--l2\";\n                                        supportingLinkIden = networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId) + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(supportingLinkIden, qp)) {\n                                            logger.debug(\"L3 - deleteSupportingLink {}\", supportingLinkIden);\n                                            updateInDb(yangDB, null, supportingLinkIden, null, null, DELETE, null, qp);\n                                            linksDeleted.add(networkPathIdentifier + String.format(LINK_PATH, l3IsisLinkId));\n                                        }\n                                    }\n                                    else {\n                                        String supporingLinkIden = networkPathIdentifier + String.format(LINK_PATH, l3LinkId) + \"/\" + SUPPORTING_LINK;\n                                        if(yangDB.exists(supporingLinkIden, qp)) {\n                                            logger.debug(\"L3 - deleteSupportingLink {}\", supporingLinkIden);\n                                            updateInDb(yangDB, null, supporingLinkIden, null, null, DELETE, null, qp);\n                                            linksDeleted.add(networkPathIdentifier + String.format(LINK_PATH, l3LinkId));\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                }\n            }\n\n            //Delete the related correlated TPs for the deleted links.\n            if(!linksDeleted.isEmpty()) {\n                for(String l3Link : linksDeleted) {\n                    String l3LinkId = extractLinkIdFromIetfIdentifier(l3Link);\n                    String l3NetworkId = extractNetworkIdFromIetfIdentifier(l3Link);\n\n                    // build tp identifier and check for supporting identifier and delete it.\n                    String l3NetworkPathIdentifier = String.format(L3_NETWORK_PATH, l3NetworkId);\n                    String[] l3Tp = l3LinkId.split(\"--\");\n                    for(int i = 0; i < l3Tp.length; i++) {\n                        String[] tpDetails = l3Tp[i].split(\":\");\n                        if (tpDetails.length == 2) {\n                            String supportingTpIden = l3NetworkPathIdentifier + String.format(NODE_PATH, tpDetails[0])\n                                    + String.format(TP_PATH, tpDetails[1]) + \"/\" + SUPPORTING_TP;\n                            if(yangDB.exists(supportingTpIden)) {\n                                logger.debug(\"L3 - deleteSupportingTp {}\", supportingTpIden);\n                                updateInDb(yangDB, null, supportingTpIden, null, null, DELETE, null, getFilteredQueryParameters(null));\n                            }\n                        }\n                    }\n\n                    // build the port identifier and delete it from cache.\n\n                    String[] l2Tp = instanceId.split(\"--\");\n                    for(int i = 0; i < l2Tp.length - 1; i++) {\n                        String[] l2TpDetails = l2Tp[i].split(\":\");\n                        String l2TpIden = L2_NETWORK_PATH + String.format(NODE_PATH, l2TpDetails[0])\n                                + String.format(TP_PATH, l2TpDetails[1]);\n                        supportingTpMap.remove(l2TpIden);\n                    }\n                }\n            }\n        }\n    }\n}\n"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "java-class-path": "com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler",
                        "version": "2311.0.9",
                        "java-code": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler/java-code",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.SAPTopologyHandler']/java-code[page-number='1']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "page-number": 1,
                            "page": "package com.nokia.nsp.md.converter.yang.plugin;\n\nimport com.nokia.nsp.md.common.IYangObject;\nimport com.nokia.nsp.md.common.YangObject;\nimport com.nokia.nsp.md.common.notif.ObjectCreation;\nimport com.nokia.nsp.md.common.notif.ObjectDeletion;\nimport com.nokia.nsp.md.common.notif.ObjectEntityNotification;\nimport com.nokia.nsp.md.common.notif.ObjectModification;\nimport com.nokia.nsp.md.common.notif.ObjectReplacement;\nimport com.nokia.nsp.md.converter.api.IMdConverterFw;\nimport com.nokia.nsp.md.converter.yang.plugin.common.ICustomHandler;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SrcClass;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SyncClass;\nimport com.nokia.nsp.md.db.yang.api.ExecutionContext;\nimport com.nokia.nsp.md.db.yang.api.QueryParameters;\nimport com.nokia.nsp.md.ifg.yang.api.Fields;\nimport com.nokia.nspos.persistence.yang.api.IYangDB;\n\nimport org.slf4j.Logger;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class SAPTopologyHandler implements ICustomHandler//, IDeleteObjectFilter, IYangKafkaMessageConsumer\n{\n    private static final Logger classLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName());\n    private static final Logger handleResyncLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".handleResync\");\n    private static final Logger handlePostResyncDeleteLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".handlePostResyncDelete\");\n    private static final Logger handleCreateEventLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".handleCreateEvent\");\n    private static final Logger handleUpdateEventLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".handleUpdateEvent\");\n    private static final Logger handleReplaceEventLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".handleReplaceEvent\");\n    private static final Logger handleDeleteEventLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".handleDeleteEvent\");\n    private static final Logger canDeleteObjectLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".canDeleteObject\");\n    private static final Logger createOrUpdateIetfSapsForPortLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".createOrUpdateIetfSapsForPort\");\n    private static final Logger createorUpdateIetfSapsForLagLogger = org.slf4j.LoggerFactory.getLogger(SAPTopologyHandler.class.getName() + \".createorUpdateIetfSapsForLag\");\n\n    private static final String IETF_SAP_NETWORK_ID = \"SAPTopology\";\n\n    private static final String IETF_NETWORK_ID_PROP = \"network-id\";\n    private static final String IETF_NETWORK_PROP = \"network\";\n    private static final String IETF_NETWORK_TYPES_PROP = \"network-types\";\n    private static final String IETF_NODE_PROP = \"node\";\n    private static final String IETF_NODE_ID_PROP = \"node-id\";\n    private static final String IETF_SERVICE_TYPE_PROP = \"service-type\";\n    private static final String IETF_SAP_PROP = \"sap\";\n    private static final String IETF_SAP_ID_PROP = \"sap-id\";\n    private static final String IETF_PARENT_TERMINATION_POINT_PROP = \"parent-termination-point\";\n    private static final String IETF_ATTACHMENT_INTERFACE_PROP = \"attachment-interface\";\n    private static final String IETF_INTERFACE_TYPE_PROP = \"interface-type\";\n    private static final String IETF_ENCAPSULATION_TYPE_PROP = \"encapsulation-type\";\n    private static final String IETF_SAP_STATUS_PROP = \"sap-status\";\n    private static final String IETF_SERVICE_STATUS_PROP = \"service-status\";\n    private static final String IETF_STATUS_PROP = \"status\";\n    private static final String IETF_ROLE_PROP = \"role\";\n    private static final String IETF_SAP_NTW_SAP_NETWORK_PROP = \"ietf-sap-ntw:sap-network\";\n    private static final String IETF_SAP_NTW_SERVICE_PROP = \"ietf-sap-ntw:service\";\n\n    private static final String IETF_VPN_COMMON_VPWS = \"ietf-vpn-common:vpws\";\n    private static final String IETF_VPN_COMMON_VPLS = \"ietf-vpn-common:vpls\";\n    private static final String IETF_VPN_COMMON_L3VPN = \"ietf-vpn-common:l3vpn\";\n\n    private static final String IETF_NETWORK_CLASS_PATH = \"ietf-network:/networks/network\";\n    private static final String IETF_NODE_CLASS_PATH = \"ietf-network:/networks/network/node\";\n    private static final String IETF_SAP_CLASS_PATH = \"ietf-network:/networks/network/node/ietf-sap-ntw:service/sap\";\n\n    private static final String IETF_NETWORKS_YANG_PATH = \"/ietf-network:networks\";\n    private static final String IETF_SAP_NETWORK_YANG_PATH = String.format(\"/ietf-network:networks/network[network-id='%s']\", IETF_SAP_NETWORK_ID);\n    private static final String IETF_SAP_NETWORK_NODE_YANG_PATH = IETF_SAP_NETWORK_YANG_PATH + \"/node[node-id='%s']\";\n    private static final String IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH = IETF_SAP_NETWORK_NODE_YANG_PATH + \"/ietf-sap-ntw:service[service-type='%s']\";\n    private static final String IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH = IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH + \"/sap[sap-id='%s']\";\n\n    private static final String NSP_NE_CLASS_PATH = \"nsp-equipment:/network/network-element\";\n    private static final String NSP_PORT_CLASS_PATH = \"nsp-equipment:/network/network-element/hardware-component/port\";\n    private static final String NSP_PORT_DETAILS_CLASS_PATH = \"nsp-equipment:/network/network-element/hardware-component/port/port-details\";\n    private static final String NSP_LAG_CLASS_PATH = \"nsp-equipment:/network/network-element/lag\";\n    private static final String NSP_ELINE_ENDPOINT_CLASS_PATH = \"nsp-service:/services/service-layer/eline/endpoint\";\n    private static final String NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH = \"nsp-service:/services/service-layer/eline/endpoint/ipservice-endpoint-detail\";\n    private static final String NSP_ELAN_ENDPOINT_CLASS_PATH = \"nsp-service:/services/service-layer/elan/endpoint\";\n    private static final String NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH = \"nsp-service:/services/service-layer/elan/endpoint/ipservice-endpoint-detail\";\n    private static final String NSP_L3VPN_ENDPOINT_CLASS_PATH = \"nsp-service:/services/service-layer/l3vpn/endpoint\";\n    private static final String NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH = \"nsp-service:/services/service-layer/l3vpn/endpoint/ipservice-endpoint-detail\";\n\n    private static final String NSP_NE_CLASS_ID = \"/nsp-equipment:network/network-element\";\n    private static final String NSP_PORT_CLASS_ID = \"/nsp-equipment:network/network-element/hardware-component/port\";\n    private static final String NSP_LAG_MEMEBER_DETAILS_CLASS_ID = \"/nsp-equipment:network/network-element/hardware-component/port/lag-member-details\";\n    private static final String NSP_LAG_CLASS_ID = \"/nsp-equipment:network/network-element/lag\";\n    private static final String NSP_LAG_MEMBERS_CLASS_ID = \"/nsp-equipment:network/network-element/lag/members\";\n    private static final String NSP_ELINE_ENDPOINT_CLASS_ID = \"/nsp-service:services/service-layer/eline/endpoint\";\n    private static final String NSP_ELAN_ENDPOINT_CLASS_ID = \"/nsp-service:services/service-layer/elan/endpoint\";\n    private static final String NSP_L3VPN_ENDPOINT_CLASS_ID = \"/nsp-service:services/service-layer/l3vpn/endpoint\";\n\n    private static final String NSP_PORT_DETAILS_CLASS_ID = \"/nsp-equipment:network/network-element/hardware-component/port/port-details\";\n    private static final String NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID = \"/nsp-service:services/service-layer/eline/endpoint/ipservice-endpoint-detail\";\n    private static final String NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID = \"/nsp-service:services/service-layer/elan/endpoint/ipservice-endpoint-detail\";\n    private static final String NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID = \"/nsp-service:services/service-layer/l3vpn/endpoint/ipservice-endpoint-detail\";\n    private static final List<String> classIdsForIYangTopicConsumer = Arrays.asList(NSP_PORT_DETAILS_CLASS_ID,\n                                                                                    NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID,\n                                                                                    NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID,\n                                                                                    NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID);\n\n    private static final String NSP_NE_YANG_PATH = \"/nsp-equipment:network/network-element[ne-id='%s']\";\n    private static final String NSP_PORT_YANG_PATH = \"/nsp-equipment:network/network-element[ne-id='%s']/hardware-component/port[component-id='%s']\";\n    private static final String NSP_LAG_YANG_PATH = \"/nsp-equipment:network/network-element[ne-id='%s']/lag[lag-id='%s']\";\n    private static final String NSP_ELINE_ENDPOINT_YANG_PATH = \"/nsp-service:services/service-layer/eline[service-id='%s']/endpoint[endpoint-id='%s']\";\n    private static final String NSP_ELAN_ENDPOINT_YANG_PATH = \"/nsp-service:services/service-layer/elan[service-id='%s']/endpoint[endpoint-id='%s']\";\n    private static final String NSP_L3VPN_ENDPOINT_YANG_PATH = \"/nsp-service:services/service-layer/l3vpn[service-id='%s']/endpoint[endpoint-id='%s']\";\n\n    private static final String NSP_SERVICE_PROP = \"service\";\n    private static final String NSP_NAME_PROP = \"name\";\n    private static final String NSP_LAG_MEMEBER_DETAILS_PROP = \"lag-member-details\";\n    private static final String NSP_PORT_DETAILS_PROP = \"port-details\";\n    private static final String NSP_PORT_MODE_PROP = \"port-mode\";\n    private static final String NSP_COMPONENT_ID_PROP = \"component-id\";\n    private static final String NSP_ENCAP_TYPE_PROP = \"encap-type\";\n    private static final String NSP_OPER_STATE_PROP = \"oper-state\";\n    private static final String NSP_MEMBERS_PROP = \"members\";\n    private static final String NSP_LAG_MODE_PROP = \"lag-mode\";\n    private static final String NSP_LAG_ID_PROP = \"lag-id\";\n    private static final String NSP_MODEL_IDENTIFIER_PROP = \"nsp-model:identifier\";\n    private static final String NSP_PORT_BINDINGS_PROP = \"port-bindings\";\n    private static final String NSP_RESOURCE_PROP = \"resource\";\n    private static final String NSP_SITE_ID_PROP = \"site-id\";\n    private static final String NSP_IP_SERVICE_ENDPOINT_DETAIL_PROP = \"ipservice-endpoint-detail\";\n\n    private static final String ACCESS = \"access\";\n    private static final String HYBRID = \"hybrid\";\n\n    private static final String CLASS_ID = \"class-id\";\n\n    private static final String SAPTOPOLOGY_HANDLER_INSTANCE = \"SAPTopologyHandler.instance\";\n\n    private static final int QUERY_PARAMETERS_DEPTH_SRC = 3;\n    private static final int QUERY_PARAMETERS_DEPTH_DEST = 2;\n\n    public static final Fields NSP_PORT_READ_FIELDS = Fields.parse(\"name;oper-state;port-details(port-mode;encap-type);lag-member-details/lag-id\");\n    public static final Fields NSP_LAG_READ_FIELDS = Fields.parse(\"name;oper-state;lag-mode;members\");\n    public static final Fields NSP_SERVICE_ENDPOINT_READ_FIELDS = Fields.parse(\"name;oper-state;service;port-bindings/resource;ipservice-endpoint-detail/encap-type\");\n\n    public static final Fields IETF_SAP_READ_FIELDS = Fields.parse(\"sap-id;interface-type\");\n\n    private static final AtomicBoolean iYangTopicConsumerInitialized = new AtomicBoolean(false);\n    private static final AtomicBoolean ietfSapNetworkPresent = new AtomicBoolean(false);\n\n    private static final Object mutex = new Object();\n\n    private enum IetfInterfaceRole\n    {\n        UNI(\"ietf-sap-ntw:uni\"),\n        NNI(\"ietf-sap-ntw:nni\");\n\n        public String value;\n        private IetfInterfaceRole(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private enum IetfInterfaceType\n    {\n        PHY(\"ietf-sap-ntw:phy\"),\n        LOOPBACK(\"ietf-sap-ntw:loopback\"),\n        LAG(\"ietf-sap-ntw:lag\"),\n        IRB(\"ietf-sap-ntw:irb\"),\n        LOCAL_BRIDGE(\"ietf-sap-ntw:local-bridge\"),\n        LOGICAL(\"ietf-sap-ntw:logical\");\n\n        public String value;\n        private IetfInterfaceType(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private enum IetfEncapType\n    {\n        PRIORITY_TAGGED(\"ietf-vpn-common:priority-tagged\"),\n        DOT1Q(\"ietf-vpn-common:dot1q\"),\n        QINQ(\"ietf-vpn-common:qinq\"),\n        QINANY(\"ietf-vpn-common:qinany\"),\n        VXLAN(\"ietf-vpn-common:vxlan\"),\n        ETHERNET_TYPE(\"ietf-vpn-common:ethernet-type\"),\n        VLAN_TYPE(\"ietf-vpn-common:vlan-type\"),\n        UNTAGGED_INT(\"ietf-vpn-common:untagged-int\"),\n        TAGGED_INT(\"ietf-vpn-common:tagged-int\"),\n        LAG_INT(\"ietf-vpn-common:lag-int\");\n\n        public String value;\n        private IetfEncapType(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private enum IetfOperState\n    {\n        OP_UP(\"ietf-vpn-common:op-up\"),\n        OP_DOWN(\"ietf-vpn-common:op-down\"),\n        OP_UNKNOWN(\"ietf-vpn-common:op-unknown\");\n\n        public String value;\n        private IetfOperState(String value)\n        {\n            this.value = value;\n        }\n    }\n\n    private static Set<String> SUPPORTED_IETF_VPN_TYPES = new HashSet<>();\n    static {\n        SUPPORTED_IETF_VPN_TYPES.add(IETF_VPN_COMMON_VPWS);\n        SUPPORTED_IETF_VPN_TYPES.add(IETF_VPN_COMMON_VPLS);\n        SUPPORTED_IETF_VPN_TYPES.add(IETF_VPN_COMMON_L3VPN);\n    }\n\n//    @Override\n    public void init(YangPluginMdConverterProvider aInMdConverterFwProv)\n    {\n        //aInMdConverterFwProv.getiMdConverterFw().getIYangTopicConsumer().addConsumer(new SAPTopologyIYangMesageConsumer(aInMdConverterFwProv));\n//        aInMdConverterFwProv.getiMdConverterFw().getIYangTopicConsumer().addConsumer(this); // because this implements IYangKafkaMessageConsumer\n//        System.getProperties().put(SAPTOPOLOGY_HANDLER_INSTANCE, this);\n    }\n\n//    @Override\n    public void destroy(YangPluginMdConverterProvider aInMdConverterFwProv)\n    {\n//        IYangKafkaMessageConsumer oldHandlerInstance = (IYangKafkaMessageConsumer) System.getProperties().remove(SAPTOPOLOGY_HANDLER_INSTANCE);\n//        if(oldHandlerInstance != null)\n//            aInMdConverterFwProv.getiMdConverterFw().getIYangTopicConsumer().removeConsumer(oldHandlerInstance);\n    }\n\n    private static void deleteIfExists(String aInXpath, QueryParameters qp, IYangDB yangDB) {\n        if (yangDB.exists(aInXpath)) {\n            yangDB.delete(aInXpath, qp);\n        }\n    }\n\n    private static void deleteSap(String aInNeId, String aInInstanceId, String aInIetfVpnType, QueryParameters qp, IYangDB yangDB) {\n        if (!SUPPORTED_IETF_VPN_TYPES.contains(aInIetfVpnType)) {\n            throw new RuntimeException(\"Invalid ietf type \" + aInIetfVpnType);\n        }\n        String sapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, aInIetfVpnType, aInInstanceId);\n        deleteIfExists(sapPath, qp, yangDB);\n    }\n\n    private static void deleteAllSaps(String aInNeId, String aInInstanceId, QueryParameters qp, IYangDB yangDB) {\n        for (String ietfType : SUPPORTED_IETF_VPN_TYPES) {\n            deleteSap(aInNeId, aInInstanceId, ietfType, qp, yangDB);\n        }\n    }\n\n    @Override\n    public void handleResync(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInExistingObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFwProv)\n    {\n        if(handleResyncLogger.isDebugEnabled()) {\n            handleResyncLogger.debug(\"********** handleResync - aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}\", aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId);\n            handleResyncLogger.debug(\"********** aInSrcObject: {}\", aInSrcObject.asMap());\n        }\n        IMdConverterFw converterFw = aInMdConverterFwProv.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n        //IDB db = aInMdConverterProv.getiMdConverterFw().getIdb();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n//        createIetfSAPNetworkIfNotExists(yangDB, qp);\n        createIetfSAPNodeIfNotExists(yangDB, aInNeId, qp);\n\n//        if(!iYangTopicConsumerInitialized.get())\n//        {\n//            init(aInMdConverterFwProv);\n//            iYangTopicConsumerInitialized.set(true);\n//        }\n\n//        String lDestClassPath = aInSyncClass.getDestClassPath();\n\n//        createIetfNetworkIfNotExists(yangDB, qp);\n//\n//        if(IETF_NODE_CLASS_PATH.equals(lDestClassPath))\n//        {\n//            createIetfNodeIfNotExists(yangDB, aInNeId, qp);\n//        }\n//        else if(IETF_SAP_CLASS_PATH.equals(lDestClassPath))\n        {\n            handleSapResync(aInSrcClass, aInSyncClass, aInSrcObject, aInNeId, yangDB);\n        }\n    }\n\n    private void createIetfSAPNetworkIfNotExists(IYangDB yangDB, QueryParameters qp)\n    {\n        if(ietfSapNetworkPresent.get()) // IETF SAP Network object is already present, return\n            return;\n\n        synchronized (mutex)\n        {\n            if (yangDB.exists(IETF_SAP_NETWORK_YANG_PATH, qp))\n            {\n                // Converter app just started up OR new SAPTopologyHandler file was uploaded,\n                // variable is false, but IETF network object present in DB\n                // set to true and return\n                ietfSapNetworkPresent.set(true);\n                return;\n            }\n\n            IYangObject lSapNetworkObject = new YangObject();\n            lSapNetworkObject.setProperty(IETF_SERVICE_TYPE_PROP, Arrays.asList(IETF_VPN_COMMON_VPWS, IETF_VPN_COMMON_VPLS, IETF_VPN_COMMON_L3VPN));\n\n            IYangObject lNetworkTypesObj = new YangObject();\n            lNetworkTypesObj.setProperty(IETF_SAP_NTW_SAP_NETWORK_PROP, lSapNetworkObject);\n\n            IYangObject lNetworkObj = new YangObject();\n            lNetworkObj.setProperty(IETF_NETWORK_ID_PROP, IETF_SAP_NETWORK_ID);\n            lNetworkObj.setProperty(IETF_NETWORK_TYPES_PROP, lNetworkTypesObj);\n\n            yangDB.createChild(IETF_NETWORKS_YANG_PATH, IETF_NETWORK_PROP, lNetworkObj, qp);\n\n            // IETF network object was not present in DB and was just created. Set to true and return\n            ietfSapNetworkPresent.set(true);\n        }\n    }\n\n    private void  createIetfSAPNodeIfNotExists(IYangDB yangDB, String aInNeId, QueryParameters qp)\n    {\n        String nodePath = String.format(IETF_SAP_NETWORK_NODE_YANG_PATH, aInNeId);\n        if(yangDB.exists(nodePath, qp))\n            return;\n\n        IYangObject ietfVpwsServiceType = new YangObject();\n        ietfVpwsServiceType.setProperty(IETF_SERVICE_TYPE_PROP, IETF_VPN_COMMON_VPWS);\n\n        IYangObject ietfVplsServiceType = new YangObject();\n        ietfVplsServiceType.setProperty(IETF_SERVICE_TYPE_PROP, IETF_VPN_COMMON_VPLS);\n\n        IYangObject ietfl3vpnServiceType = new YangObject();\n        ietfl3vpnServiceType.setProperty(IETF_SERVICE_TYPE_PROP, IETF_VPN_COMMON_L3VPN);\n\n        IYangObject ietfSapNode = new YangObject();\n        ietfSapNode.setProperty(IETF_NODE_ID_PROP, aInNeId);\n        ietfSapNode.setProperty(IETF_SAP_NTW_SERVICE_PROP, Arrays.asList(ietfVpwsServiceType, ietfVplsServiceType, ietfl3vpnServiceType));\n\n        yangDB.createChild(IETF_SAP_NETWORK_YANG_PATH, IETF_NODE_PROP, ietfSapNode, qp);\n    }\n\n\n    @Override\n    public void handleCreateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectCreation aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw) {\n        if (handleCreateEventLogger.isInfoEnabled()){\n            handleCreateEventLogger.debug(\"********** handleCreateEvent - aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, ObjectCreation: {}\",\n                                         aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().asMap());\n        }\n\n        //String eventClassId = aInEvent.getClassId();\n        //String instanceId = aInEvent.getEntity().getIdentifier();\n\n        IYangDB yangDB = aInMdConverterFw.getiMdConverterFw().getIYangDB();\n\n//        if(NSP_NE_CLASS_ID.equals(eventClassId))\n//        {\n//            createIetfSAPNodeIfNotExists(yangDB, aInNeId, qp);\n//        }\n//        else\n        {\n            createOrUpdateSaps(aInEvent, aInNeId, yangDB);\n        }\n    }\n\n    @Override\n    public void handleUpdateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectModification aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n\n        if(handleUpdateEventLogger.isDebugEnabled()){\n            handleUpdateEventLogger.debug(\"********** handleUpdateEvent - aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, ObjectModification: {}\",\n                                          aInSrcClass.getSrcClassPath(), aInSyncClass.getDestClassPath(), aInNeId, aInEvent.getEntity().asMap());\n            handleUpdateEventLogger.debug(\"********** aInEvent.changes: {}\", aInEvent.getChanges());\n        }\n\n        IYangDB yangDB = aInMdConverterFw.getiMdConverterFw().getIYangDB();\n\n        createOrUpdateSaps(aInEvent, aInNeId, yangDB);\n    }\n\n    private void createOrUpdateSaps(ObjectEntityNotification aInEvent, String aInNeId, IYangDB yangDB)\n    {\n        // This method called for both create event and update event\n\n        // createIetfNetworkIfNotExists(yangDB, qp);\n\n        String eventClassId = aInEvent.getClassId();\n        String instanceId = aInEvent.getEntity().getIdentifier();\n\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        // Since we don't control the order in which events are published,\n        // We MAY get an event for a child object before the parent\n        createIetfSAPNodeIfNotExists(yangDB, aInNeId, qp);\n\n        Logger logger = aInEvent instanceof ObjectCreation ? handleCreateEventLogger : handleUpdateEventLogger;\n\n        if(NSP_PORT_CLASS_ID.equals(eventClassId))\n        {\n            qp.setFields(NSP_PORT_READ_FIELDS);\n            IYangObject yangObject = yangDB.getSingle(instanceId, qp); // have to re-read to get the full object, event will not have it\n            if(yangObject == null)\n            {\n                logger.error(\"Got an event for an object that does not exist!! instanceId: {}\", instanceId);\n                return;\n            }\n            createOrUpdateIetfSapsForPort(yangObject, aInNeId, yangDB);\n        }\n        else if (NSP_LAG_CLASS_ID.equals(eventClassId))\n        {\n            qp.setFields(NSP_LAG_READ_FIELDS);\n            IYangObject yangObject = yangDB.getSingle(instanceId, qp); // have to re-read to get the full object, event will not have it\n            if(yangObject == null)\n            {\n                logger.error(\"Got an event for an object that does not exist!! instanceId: {}\", instanceId);\n                return;\n            }\n            createorUpdateIetfSapsForLag(yangObject, aInNeId, yangDB);\n        }\n        else if(NSP_ELINE_ENDPOINT_CLASS_ID.equals(eventClassId))\n        {\n            qp.setFields(NSP_SERVICE_ENDPOINT_READ_FIELDS);\n            IYangObject yangObject = yangDB.getSingle(instanceId, qp); // have to re-read to get the full object, event will not have it\n            if(yangObject == null)\n            {\n                logger.error(\"Got an event for an object that does not exist!! instanceId: {}\", instanceId);\n                return;\n            }\n            createOrUpdateIetfSapsForServiceEndpoints(yangObject, aInNeId, IETF_VPN_COMMON_VPWS, yangDB);\n        }\n        else if(NSP_ELAN_ENDPOINT_CLASS_ID.equals(eventClassId))\n        {\n            qp.setFields(NSP_SERVICE_ENDPOINT_READ_FIELDS);\n            IYangObject yangObject = yangDB.getSingle(instanceId, qp); // have to re-read to get the full object, event will not have it\n            if(yangObject == null)\n            {\n                logger.error(\"Got an event for an object that does not exist!! instanceId: {}\", instanceId);\n                return;\n            }\n            createOrUpdateIetfSapsForServiceEndpoints(yangObject, aInNeId, IETF_VPN_COMMON_VPLS, yangDB);\n        }\n        else if (NSP_L3VPN_ENDPOINT_CLASS_ID.equals(eventClassId))\n        {\n            qp.setFields(NSP_SERVICE_ENDPOINT_READ_FIELDS);\n            IYangObject yangObject = yangDB.getSingle(instanceId, qp); // have to re-read to get the full object, event will not have it\n            if(yangObject == null)\n            {\n                logger.error(\"Got an event for an object that does not exist!! instanceId: {}\", instanceId);\n                return;\n            }\n            createOrUpdateIetfSapsForServiceEndpoints(yangObject, aInNeId, IETF_VPN_COMMON_L3VPN, yangDB);\n        }\n        else\n        {\n            if(aInEvent instanceof ObjectModification || aInEvent instanceof ObjectCreation)\n            {\n                if (NSP_PORT_DETAILS_CLASS_ID.equals(eventClassId))\n                {\n                    String portInstanceId = instanceId.split(\"/port-details\")[0];\n\n                    qp.setFields(NSP_PORT_READ_FIELDS);\n                    IYangObject nspPortObject = yangDB.getSingle(portInstanceId, qp);\n                    if(nspPortObject == null)\n                    {\n                        logger.error(\"Got an event for port-details of a port that does not exist!! instanceId: {}\", instanceId);\n                        return;\n                    }\n                    createOrUpdateIetfSapsForPort(nspPortObject, aInNeId, yangDB);\n                }\n                else if (NSP_LAG_MEMEBER_DETAILS_CLASS_ID.equals(eventClassId))\n                {\n                    //On lag member details event update saps to remove ports that are lags but also call create lag\n                    String portInstanceId = instanceId.split(\"/\"+NSP_LAG_MEMEBER_DETAILS_PROP)[0];\n                    //Create fake portObject with id and lag to delete ports\n                    IYangObject nspPortObject = new YangObject();\n                    nspPortObject.setIdentifier(portInstanceId);\n                    List<IYangObject> lagMemberDetails = new ArrayList<>();\n                    lagMemberDetails.add(aInEvent.getEntity());\n                    nspPortObject.setProperty(NSP_LAG_MEMEBER_DETAILS_PROP, lagMemberDetails);\n\n                    createOrUpdateIetfSapsForPort(nspPortObject, aInNeId, yangDB);\n\n                    if(aInEvent.getEntity().hasProperty(NSP_LAG_ID_PROP) && aInEvent.getEntity().getProperty(NSP_LAG_ID_PROP)!=null){\n                        String lagInstanceId= String.format(NSP_LAG_YANG_PATH, aInNeId, aInEvent.getEntity().getProperty(NSP_LAG_ID_PROP));\n                        qp.setFields(NSP_LAG_READ_FIELDS);\n                        IYangObject yangObject = yangDB.getSingle(lagInstanceId, qp);\n                        if(yangObject == null)\n                        {\n                            logger.error(\"Got an event for an \"+NSP_LAG_MEMEBER_DETAILS_PROP+\": {} lag: {} does not exist\", instanceId, lagInstanceId);\n                            return;\n                        }\n                        createorUpdateIetfSapsForLag(yangObject, aInNeId, yangDB);\n                    }\n                    else {\n                         logger.error(\"Got an event for an \"+NSP_LAG_MEMEBER_DETAILS_PROP+\": {} but lag-id is not set\", instanceId);\n                    }\n                }\n                else if (NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId) ||\n                             NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId) ||\n                             NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId))\n                {\n                    String endpointInstanceId = instanceId.split(\"/ipservice-endpoint-detail\")[0];\n\n                    qp.setFields(NSP_SERVICE_ENDPOINT_READ_FIELDS);\n                    IYangObject endpoint = yangDB.getSingle(endpointInstanceId, qp);\n                    if(endpoint == null)\n                    {\n                        logger.error(\"Got an event for ipservice-endpoint-detail of an endpoint that does not exist!! instanceId: {}\", instanceId);\n                        return;\n                    }\n                    createOrUpdateIetfSapsForServiceEndpoints(endpoint, aInNeId, mapClassIdToIetfServiceType(eventClassId), yangDB);\n                }\n            }\n            else\n            {\n                // aInEvent is ObjectCreation. WTF does it mean to create port-details without port or\n                // ipservice-endpoint-details without the endpoint\n            }\n        }\n    }\n\n    @Override\n    public void handleReplaceEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectReplacement aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        if(handleReplaceEventLogger.isDebugEnabled()) {\n            handleReplaceEventLogger.debug(\"********** handleReplaceEvent - aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, ObjectReplacement: {}\", aInSrcClass, aInSyncClass, aInNeId, aInEvent.getEntity().asMap());\n        }\n    }\n\n    @Override\n    public void handleDeleteEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectDeletion aInEvent, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        if(handleDeleteEventLogger.isDebugEnabled()) {\n            handleDeleteEventLogger.debug(\"********** handleDeleteEvent - aInSrcClass:{}, aInSyncClass:{}, aInNeId: {}, ObjectDeletion: {}\", aInSrcClass, aInSyncClass, aInNeId, aInEvent.getEntity().asMap());\n        }\n\n        IYangDB yangDB = aInMdConverterFw.getiMdConverterFw().getIYangDB();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        String eventClassId = aInEvent.getClassId();\n        String instanceId = aInEvent.getInstanceId();\n\n//        if(NSP_NE_CLASS_ID.equals(eventClassId))\n//        {\n//            // Delete this node; will delete all SAPs on this node as child objects\n//            String ietfNodePath = String.format(IETF_SAP_NETWORK_NODE_YANG_PATH, aInNeId);\n//            yangDB.delete(ietfNodePath, qp);\n//        }\n//        else\n        if(NSP_PORT_CLASS_ID.equals(eventClassId) || NSP_LAG_CLASS_ID.equals(eventClassId))\n        {\n            deleteAllSaps(aInNeId,instanceId,qp,yangDB);\n        }\n        else if(NSP_ELINE_ENDPOINT_CLASS_ID.equals(eventClassId))\n        {\n            deleteSap(aInNeId,instanceId,IETF_VPN_COMMON_VPWS,qp,yangDB);\n        }\n        else if(NSP_ELAN_ENDPOINT_CLASS_ID.equals(eventClassId))\n        {\n            deleteSap(aInNeId,instanceId,IETF_VPN_COMMON_VPLS,qp,yangDB);\n        }\n        else if(NSP_L3VPN_ENDPOINT_CLASS_ID.equals(eventClassId))\n        {\n            deleteSap(aInNeId,instanceId,IETF_VPN_COMMON_L3VPN,qp,yangDB);\n        }\n        else if (NSP_PORT_DETAILS_CLASS_ID.equals(eventClassId) ||\n                     NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId) ||\n                     NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId) ||\n                     NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId))\n        {\n            // WTF does it mean when only port-details get deleted from a port or\n            // ipservice-endpoint-detail gets deleted from a service endpoint?\n            return;\n        }\n    }\n\n    @Override\n    public void handlePostResyncDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInNeId, YangPluginMdConverterProvider aInMdConverterFw)\n    {\n        handlePostResyncDeleteLogger.debug(\"********** handlePostResyncDelete called\");\n    }\n\n//    @Override\n//    public boolean canDeleteObject(IYangObject aInIYangObject, SyncClass aInSyncClass, SrcClass aInSrcClass, IMdConverterFw aInMdConverterFw)\n//    {\n//        canDeleteObjectLogger.debug(\"********** canDeleteObject - aInSrcClass:{}, aInSyncClass:{}, aInIYangObject:{}\", aInSrcClass, aInSyncClass, aInIYangObject);\n//\n//        IYangDB yangDB = aInMdConverterFw.getIYangDB();\n//\n//        final QueryParameters qp = new QueryParameters();\n//        qp.setSuperUser(true);\n//        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n//\n//        String lDestClassPath = aInSyncClass.getDestClassPath();\n//        String lSrcClassPath = aInSrcClass.getSrcClassPath();\n//\n//        if (NSP_PORT_DETAILS_CLASS_PATH.equals(lSrcClassPath) ||\n//                NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(lSrcClassPath) ||\n//                NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(lSrcClassPath) ||\n//                NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(lSrcClassPath))\n//        {\n//            // Code should not reach here. FW should not call this.\n//            canDeleteObjectLogger.debug(\"<><><><><><><><><><> Code should not reach here. canDeleteObject called for srcClassPath: {}\", lSrcClassPath);\n//            return false;\n//        }\n//\n//        if(IETF_NETWORK_CLASS_PATH.equals(lDestClassPath))\n//        {\n//            return false; // We don't delete the IETF SAP topology network root object ever\n//        }\n//        else if(IETF_NODE_CLASS_PATH.equals(lDestClassPath))\n//        {\n//            String neId = aInIYangObject.getProperty(IETF_NODE_ID_PROP);\n//\n//            if (!yangDB.exists(String.format(NSP_NE_YANG_PATH, neId)))\n//            {\n//                return true; // if NSP no longer has this NE, delete it from IETF SAP topology\n//            }\n//        }\n//        else if(IETF_SAP_CLASS_PATH.equals(lDestClassPath))\n//        {\n//            String serviceType = StringUtils.substringBetween(aInIYangObject.getIdentifier(), \"[service-type='\", \"']\");\n//\n//            String sapInterfaceType = aInIYangObject.getProperty(IETF_INTERFACE_TYPE_PROP);\n//            String sapId = aInIYangObject.getProperty(IETF_SAP_ID_PROP);\n//\n//            /*\n//            The following complicated if-else conditions are required to prevent querying the DB using yangDB.exists() unnecessarily\n//            since this code will be hit for EVERY combination of lDestClassPath (all IETF SAPs) and lSrcClassPath (every port/LAG/SvcEndpoints).\n//            See IetfSapTopology.json mapping file entry for  \"destClassPath\": \"ietf-network:/networks/network/node/ietf-sap-ntw:service/sap\"\n//            For examples,\n//            lDestClassPath could be that of a SAP that corresponds to a LAG and lSrcClassPath could be that of a port\n//            lDestClassPath could be that of a SAP that corresponds to an ELINE endpoint and lSrcClassPath could be that of a L3VPN endpoint\n//             */\n//\n//            if (IetfInterfaceType.PHY.value.equals(sapInterfaceType) && NSP_PORT_CLASS_PATH.equals(lSrcClassPath))\n//            {\n//                //if(!yangDB.exists(String.format(NSP_PORT_YANG_PATH, neId, aInIYangObject.getProperty(IETF_SAP_ID_PROP))))\n//                if(!yangDB.exists(sapId))\n//                {\n//                    return true; // delete this SAP if NSP no longer has this port\n//                }\n//            }\n//            else if (IetfInterfaceType.LAG.value.equals(sapInterfaceType) && NSP_LAG_CLASS_PATH.equals(lSrcClassPath))\n//            {\n//                //if(!yangDB.exists(String.format(NSP_LAG_YANG_PATH, neId, aInIYangObject.getProperty(IETF_SAP_ID_PROP))))\n//                if(!yangDB.exists(sapId))\n//                {\n//                    return true; // delete this SAP if NSP no longer has this LAG\n//                }\n//            }\n//            else if (IetfInterfaceType.LOGICAL.value.equals(sapInterfaceType))\n//            {\n//                if(\n//                    (IETF_VPN_COMMON_VPWS.equals(serviceType) && NSP_ELINE_ENDPOINT_CLASS_PATH.equals(lSrcClassPath)) ||\n//                        (IETF_VPN_COMMON_VPLS.equals(serviceType) && NSP_ELAN_ENDPOINT_CLASS_PATH.equals(lSrcClassPath)) ||\n//                        (IETF_VPN_COMMON_L3VPN.equals(serviceType) && NSP_L3VPN_ENDPOINT_CLASS_PATH.equals(lSrcClassPath))\n//                )\n//                {\n//                    if(!yangDB.exists(sapId))\n//                    {\n//                        return true; // delete this SAP if NSP no longer has this ELINE/ELAN/L3VPN endpoint\n//                    }\n//                }\n//            }\n//        }\n//\n//        return false;\n//    }\n\n    private void handleSapResync(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInNeId, IYangDB yangDB)\n    {\n//        createIetfNodeIfNotExists(yangDB, aInNeId, qp);\n\n        String srcClassPath = aInSrcClass.getSrcClassPath();\n\n        if (NSP_PORT_CLASS_PATH.equals(srcClassPath))\n        {\n            createOrUpdateIetfSapsForPort(aInSrcObject, aInNeId, yangDB);\n        }\n        else if (NSP_LAG_CLASS_PATH.equals(srcClassPath))\n        {\n            createorUpdateIetfSapsForLag(aInSrcObject, aInNeId, yangDB);\n        }\n        else if (NSP_ELINE_ENDPOINT_CLASS_PATH.equals(srcClassPath))\n        {\n            createOrUpdateIetfSapsForServiceEndpoints(aInSrcObject, aInNeId, IETF_VPN_COMMON_VPWS, yangDB);\n        }\n        else if (NSP_ELAN_ENDPOINT_CLASS_PATH.equals(srcClassPath))\n        {\n            createOrUpdateIetfSapsForServiceEndpoints(aInSrcObject, aInNeId, IETF_VPN_COMMON_VPLS, yangDB);\n        }\n        else if (NSP_L3VPN_ENDPOINT_CLASS_PATH.equals(srcClassPath))\n        {\n            createOrUpdateIetfSapsForServiceEndpoints(aInSrcObject, aInNeId, IETF_VPN_COMMON_L3VPN, yangDB);\n        }\n        else if (NSP_PORT_DETAILS_CLASS_PATH.equals(srcClassPath) ||\n                NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(srcClassPath) ||\n                NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(srcClassPath) ||\n                NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_PATH.equals(srcClassPath))\n        {\n            // Code should not reach here. FW should not call this.\n            handleResyncLogger.debug(\"<><><><><><><><><><> Code should not reach here. handleResync called for srcClassPath: {}\", srcClassPath);\n        }\n    }\n\n    private void createOrUpdateIetfSapsForPort(IYangObject aInSrcObject, String aInNeId, IYangDB yangDB)\n    {\n        createOrUpdateIetfSapsForPortLogger.debug(\"********** createOrUpdateIetfSapsForPort - aInSrcObject {}\",aInSrcObject.asMap());\n        //String portComponentId = (String) aInSrcObject.get(NSP_COMPONENT_ID_PROP);\n        //String nspModelIdentifier = (String)((Map) aInSrcObject.get(\"@\")).get(NSP_MODEL_IDENTIFIER_PROP);\n        String nspModelIdentifier = aInSrcObject.getIdentifier();\n        String vpwsSapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPWS, nspModelIdentifier);\n        String vplsSapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPLS, nspModelIdentifier);\n        String l3vpnSapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, IETF_VPN_COMMON_L3VPN, nspModelIdentifier);\n        createOrUpdateIetfSapsForPortLogger.debug(\"********** SapPaths - vpwsSapPath: {}, vplsSapPath: {}, l3vpnSapPath: {}\", vpwsSapPath, vplsSapPath, l3vpnSapPath);\n\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        List<IYangObject> lagMemberDetailsList = aInSrcObject.getProperty(NSP_LAG_MEMEBER_DETAILS_PROP);\n        if (lagMemberDetailsList != null && !lagMemberDetailsList.isEmpty())\n        {\n            if(createOrUpdateIetfSapsForPortLogger.isDebugEnabled()) {\n                createOrUpdateIetfSapsForPortLogger.debug(\"********** deletePortIsLag - vpwsSapPath: {}\", vpwsSapPath);\n            }\n            // For first-resync/create event, no SAP will be created if this port is in a LAG\n            // For subsequent-resync/update event, if this port was just added to a LAG, existing SAPs, if present, will be deleted\n            deleteAllSaps(aInNeId,nspModelIdentifier,qp,yangDB);\n            return;\n        }\n        else{\n            if(createOrUpdateIetfSapsForPortLogger.isDebugEnabled()) {\n                createOrUpdateIetfSapsForPortLogger.debug(\"Keeping port without lag {}\", nspModelIdentifier);\n            }\n        }\n\n        IYangObject sap = new YangObject();\n        sap.setProperty(IETF_SAP_ID_PROP, nspModelIdentifier);\n        sap.setProperty(IETF_ATTACHMENT_INTERFACE_PROP, aInSrcObject.getProperty(NSP_NAME_PROP));\n        sap.setProperty(IETF_INTERFACE_TYPE_PROP, IetfInterfaceType.PHY.value);\n\n        List<IYangObject> portDetailsList = aInSrcObject.getProperty(NSP_PORT_DETAILS_PROP);\n        if(portDetailsList != null && !portDetailsList.isEmpty())\n        {\n            IYangObject portDetails = portDetailsList.get(0);\n            String portMode = portDetails.getProperty(NSP_PORT_MODE_PROP);\n\n            if (!ACCESS.equals(portMode) && !HYBRID.equals(portMode))\n            {\n                createOrUpdateIetfSapsForPortLogger.debug(\"********** deletePortIsNotAccess - vpwsSapPath: {}\", vpwsSapPath);\n                // For first-resync/create event, no SAP will be created if port is not access or hybrid\n                // For subsequent-resync/update event, if the port-mode was changed, existing SAPs, if present, will be deleted\n                deleteAllSaps(aInNeId,nspModelIdentifier,qp,yangDB);\n                return;\n            }\n            else\n            {\n                sap.setProperty(IETF_ROLE_PROP, IetfInterfaceRole.UNI.value); // If portDetailsList is empty, role will be null. Can't tell if its UNI/NNI.\n            }\n\n            String mappedEncapType = mapNspEquipmentModelEncapType(portDetails.getProperty(NSP_ENCAP_TYPE_PROP));\n            if (null != mappedEncapType)\n                sap.setProperty(IETF_ENCAPSULATION_TYPE_PROP, mappedEncapType);\n        }\n        else\n        {\n            if(createOrUpdateIetfSapsForPortLogger.isDebugEnabled()) {\n                createOrUpdateIetfSapsForPortLogger.debug(\"Keeping port without mode {}\", nspModelIdentifier);\n            }\n            // TODO do we still keep this SAP even if we don't know port-mode, role and encaptype? Is that useful?\n            sap.setProperty(IETF_ROLE_PROP, null);\n            sap.setProperty(IETF_ENCAPSULATION_TYPE_PROP, null);\n        }\n\n        IYangObject sapStatus = new YangObject();\n        sapStatus.setProperty(IETF_STATUS_PROP, mapOperState(aInSrcObject.getProperty(NSP_OPER_STATE_PROP)));\n\n        sap.setProperty(IETF_SAP_STATUS_PROP, sapStatus);\n\n        // For a port, one SAP will be created for each service-type: ietf-vpn-common:vpws, ietf-vpn-common:vpls, ietf-vpn-common:l3vpn\n\n        if (!yangDB.exists(vpwsSapPath, qp))\n        {\n            String vpwsServicePath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPWS);\n            if (!yangDB.exists(vpwsServicePath))\n            {\n                createOrUpdateIetfSapsForPortLogger.warn(\"SQUIBB: Trying to attach sap {} to a non-existent service {}. Dropping to let service conversion handle it.\", vpwsSapPath, vpwsServicePath);\n            }\n            else\n            {\n                yangDB.createChild(vpwsServicePath, IETF_SAP_PROP, sap, qp);\n            }\n        }\n        else\n        {\n            yangDB.update(vpwsSapPath, sap, qp);\n        }\n\n        if (!yangDB.exists(vplsSapPath, qp))\n        {\n            String vplsServicePath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPLS);\n            if (!yangDB.exists(vplsServicePath))\n            {\n                createOrUpdateIetfSapsForPortLogger.warn(\"SQUIBB: Trying to attach sap {} to a non-existent service {}. Dropping to let service conversion handle it.\", vplsSapPath, vplsServicePath);\n            }\n            else\n            {\n                yangDB.createChild(vplsServicePath, IETF_SAP_PROP, sap, qp);\n            }\n        }\n        else\n        {\n            yangDB.update(vplsSapPath, sap, qp);\n        }\n\n        if (!yangDB.exists(l3vpnSapPath, qp))\n        {\n            String l3vpnServicePath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH, aInNeId, IETF_VPN_COMMON_L3VPN);\n            if (!yangDB.exists(l3vpnServicePath))\n            {\n                createOrUpdateIetfSapsForPortLogger.warn(\"SQUIBB: Trying to attach sap {} to a non-existent service {}. Dropping to let service conversion handle it.\", l3vpnSapPath, l3vpnServicePath);\n            }\n            else {\n                yangDB.createChild(l3vpnServicePath, IETF_SAP_PROP, sap, qp);\n            }\n        }\n        else\n        {\n            yangDB.update(l3vpnSapPath, sap, qp);\n        }\n    }\n\n    private void createorUpdateIetfSapsForLag(IYangObject aInSrcObject, String aInNeId, IYangDB yangDB)\n    {\n        //String lagId = (String) aInSrcObject.get(NSP_LAG_ID_PROP);\n        //String nspModelIdentifier = (String)((Map) aInSrcObject.get(\"@\")).get(NSP_MODEL_IDENTIFIER_PROP);\n        String nspModelIdentifier = aInSrcObject.getIdentifier();\n        String vpwsSapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPWS, nspModelIdentifier);\n        String vplsSapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPLS, nspModelIdentifier);\n        String l3vpnSapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, IETF_VPN_COMMON_L3VPN, nspModelIdentifier);\n\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        if (((List) aInSrcObject.get(NSP_MEMBERS_PROP)).isEmpty())\n        {\n            // For first-resync/create event, no SAP will be created if LAG does not have any members\n            // For subsequent-resync/update event, if the last port was removed from this LAG, existing SAPs, if present, will be deleted\n            deleteAllSaps(aInNeId,nspModelIdentifier,qp,yangDB);\n            return;\n        }\n\n        String lagMode = aInSrcObject.getProperty(NSP_LAG_MODE_PROP);\n\n        if (!ACCESS.equals(lagMode) && !HYBRID.equals(lagMode))\n        {\n            // For first-resync/create event, no SAP will be created if LAG is not access or hybrid\n            // For subsequent-resync/update event, if the lag-mode was changed, existing SAPs, if present, will be deleted\n            deleteAllSaps(aInNeId,nspModelIdentifier,qp,yangDB);\n            return; // no SAP will be created if lag is not access or hybrid\n        }\n\n        IYangObject sap = new YangObject();\n        sap.setProperty(IETF_SAP_ID_PROP, nspModelIdentifier);\n        sap.setProperty(IETF_ATTACHMENT_INTERFACE_PROP, aInSrcObject.getProperty(NSP_NAME_PROP));\n        sap.setProperty(IETF_INTERFACE_TYPE_PROP, IetfInterfaceType.LAG.value);\n        sap.setProperty(IETF_ROLE_PROP, IetfInterfaceRole.UNI.value);\n        sap.setProperty(IETF_ENCAPSULATION_TYPE_PROP, IetfEncapType.LAG_INT.value);\n\n        IYangObject sapStatus = new YangObject();\n        sapStatus.setProperty(IETF_STATUS_PROP, mapOperState(aInSrcObject.getProperty(NSP_OPER_STATE_PROP)));\n\n        sap.setProperty(IETF_SAP_STATUS_PROP, sapStatus);\n\n        // For a LAG, one SAP will be created for each service-type: ietf-vpn-common:vpws, ietf-vpn-common:vpls, ietf-vpn-common:l3vpn\n\n        if (!yangDB.exists(vpwsSapPath, qp))\n        {\n            String vpwsServicePath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPWS);\n            if (!yangDB.exists(vpwsServicePath))\n            {\n                classLogger.warn(\"SQUIBB: Trying to attach sap {} to a non-existent service {}. Dropping to let service conversion handle it.\", vpwsSapPath, vpwsServicePath);\n            }\n            else {\n                yangDB.createChild(vpwsServicePath, IETF_SAP_PROP, sap, qp);\n            }\n        }\n        else\n        {\n            yangDB.update(vpwsSapPath, sap, qp);\n        }\n\n        if (!yangDB.exists(vplsSapPath, qp))\n        {\n            String vplsServicePath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH, aInNeId, IETF_VPN_COMMON_VPLS);\n            if (!yangDB.exists(vplsServicePath))\n            {\n                classLogger.warn(\"SQUIBB: Trying to attach sap {} to a non-existent service {}. Dropping to let service conversion handle it.\", vplsSapPath, vplsServicePath);\n            }\n            else {\n                yangDB.createChild(vplsServicePath, IETF_SAP_PROP, sap, qp);\n            }\n        }\n        else\n        {\n            yangDB.update(vplsSapPath, sap, qp);\n        }\n\n        if (!yangDB.exists(l3vpnSapPath, qp))\n        {\n            String l3vpnServicePath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH, aInNeId, IETF_VPN_COMMON_L3VPN);\n            if (!yangDB.exists(l3vpnServicePath))\n            {\n                classLogger.warn(\"SQUIBB: Trying to attach sap {} to a non-existent service {}. Dropping to let service conversion handle it.\", l3vpnSapPath, l3vpnServicePath);\n            }\n            else {\n                yangDB.createChild(l3vpnServicePath, IETF_SAP_PROP, sap, qp);\n            }\n        }\n        else\n        {\n            yangDB.update(l3vpnSapPath, sap, qp);\n        }\n    }\n\n    private void createOrUpdateIetfSapsForServiceEndpoints(IYangObject aInSrcObject, String aInNeId, String aInServiceType, IYangDB yangDB)\n    {\n        //String nspModelIdentifier = (String)((Map) aInSrcObject.get(\"@\")).get(NSP_MODEL_IDENTIFIER_PROP);\n        String nspModelIdentifier = aInSrcObject.getIdentifier();\n\n        IYangObject sap = new YangObject();\n        sap.setProperty(IETF_SAP_ID_PROP, nspModelIdentifier);\n        sap.setProperty(IETF_ATTACHMENT_INTERFACE_PROP, aInSrcObject.getProperty(NSP_NAME_PROP));\n\n        String parentTerminationPoint = null;\n        List<IYangObject> portBindings = aInSrcObject.getProperty(NSP_PORT_BINDINGS_PROP);\n        if(portBindings != null && !portBindings.isEmpty())\n        {\n            parentTerminationPoint = portBindings.get(0).getProperty(NSP_RESOURCE_PROP);\n        }\n        sap.setProperty(IETF_PARENT_TERMINATION_POINT_PROP, parentTerminationPoint);\n\n        sap.setProperty(IETF_INTERFACE_TYPE_PROP, IetfInterfaceType.LOGICAL.value);\n        sap.setProperty(IETF_ROLE_PROP, IetfInterfaceRole.UNI.value);\n\n        IYangObject ipServiceEndpointDetail = aInSrcObject.getProperty(NSP_IP_SERVICE_ENDPOINT_DETAIL_PROP);\n\n        if(ipServiceEndpointDetail != null)\n        {\n            String mappedEncapType = mapNspServiceModelEncapType(ipServiceEndpointDetail.getProperty(NSP_ENCAP_TYPE_PROP));\n            if (null != mappedEncapType)\n                sap.setProperty(IETF_ENCAPSULATION_TYPE_PROP, mappedEncapType);\n        }\n        else\n        {\n            sap.setProperty(IETF_ENCAPSULATION_TYPE_PROP, null);\n        }\n\n        IYangObject sapStatus = new YangObject();\n        sapStatus.setProperty(IETF_STATUS_PROP, mapOperState(aInSrcObject.getProperty(NSP_OPER_STATE_PROP)));\n        sap.setProperty(IETF_SAP_STATUS_PROP, sapStatus);\n\n        String serviceYangPath = aInSrcObject.getProperty(NSP_SERVICE_PROP);\n        if(serviceYangPath != null) // this should NEVER be null. The only way this is null is if the endpoint's \"service\" prop is not populated in NSP. If so, WTF?\n        {\n            QueryParameters serviceObjectReadQueryParameters = new QueryParameters();\n            serviceObjectReadQueryParameters.setSuperUser(true);\n            serviceObjectReadQueryParameters.setFields(Fields.parse(NSP_OPER_STATE_PROP));\n            serviceObjectReadQueryParameters.setDepth(2);\n            serviceObjectReadQueryParameters.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n            IYangObject nspServiceYangObject = yangDB.getSingle(serviceYangPath, serviceObjectReadQueryParameters);\n\n            if(nspServiceYangObject != null) // this should NEVER be null. The only way this is null is if the endpoint's \"service\" prop is points to a non-existent service. If so, WTF?\n            {\n                IYangObject serviceStatus = new YangObject();\n                serviceStatus.setProperty(IETF_STATUS_PROP, mapOperState(nspServiceYangObject.getProperty(NSP_OPER_STATE_PROP)));\n                sap.setProperty(IETF_SERVICE_STATUS_PROP, serviceStatus);\n            }\n            else\n            {\n                classLogger.warn(\"Service {} does not exist, it seems 'service' property of endpoint {} points to non-existent service.\", serviceYangPath, nspModelIdentifier);\n            }\n        }\n        else\n        {\n            classLogger.warn(\"Got an endpoint with 'service' property not populated. instanceId: {}. Cannot determine service status for SAP.\", nspModelIdentifier);\n        }\n\n        String servicePath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_YANG_PATH, aInNeId, aInServiceType);\n        String sapPath = String.format(IETF_SAP_NETWORK_NODE_SERVICE_SAP_YANG_PATH, aInNeId, aInServiceType, nspModelIdentifier);\n\n        QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        if (!yangDB.exists(sapPath, qp))\n        {\n            if (!yangDB.exists(servicePath))\n            {\n                classLogger.warn(\"SQUIBB: Trying to attach sap {} to a non-existent service {}. Dropping to let service conversion handle it.\", sapPath, servicePath);\n                return;\n            }\n            yangDB.createChild(servicePath, IETF_SAP_PROP, sap, qp);\n        }\n        else\n        {\n            yangDB.update(sapPath, sap, qp);\n        }\n    }\n\n//    private void handleUpdateEventForSpecialChildObjects(ObjectModification aInEvent, YangPluginMdConverterProvider aInMdConverterFw)\n//    {\n//        IYangDB yangDB = aInMdConverterFw.getiMdConverterFw().getIYangDB();\n//\n//        String eventClassId = aInEvent.getClassId();\n//        String instanceId = aInEvent.getInstanceId();\n//\n//        handleUpdateEventLogger.debug(\"########## got updateEvent for \" + instanceId);\n//        handleUpdateEventLogger.debug(\"########## aInEvent.changes: {}\", aInEvent.getChanges());\n//        handleUpdateEventLogger.debug(\"########## aInEvent.entity: {}\", aInEvent.getEntity().asMap());\n//\n//        final QueryParameters qp = new QueryParameters();\n//        qp.setSuperUser(true);\n//        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n//        qp.setDepth(QUERY_PARAMETERS_DEPTH);\n//\n//        if(NSP_PORT_DETAILS_CLASS_ID.equals(eventClassId))\n//        {\n//            String neId = StringUtils.substringBetween(instanceId, \"[ne-id='\", \"']\");\n//            String portInstanceId = instanceId.split(\"/port-details\")[0];\n//\n//            IYangObject nspPortObject = yangDB.getSingle(portInstanceId, qp);\n//            createOrUpdateIetfSapsForPort(nspPortObject, neId, yangDB, qp);\n//        }\n//        else if (NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId) ||\n//                     NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId) ||\n//                     NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(eventClassId))\n//        {\n//            String endpointInstanceId = instanceId.split(\"/ipservice-endpoint-detail\")[0];\n//\n//            IYangObject endpoint = yangDB.getSingle(endpointInstanceId, qp);\n//            String neId = endpoint.getProperty(NSP_SITE_ID_PROP);\n//            createOrUpdateIetfSapsForServiceEndpoints(endpoint, neId, mapClassIdToIetfServiceType(eventClassId), yangDB, qp);\n//        }\n//    }\n\n    private String mapNspEquipmentModelEncapType(String encapType)\n    {\n        if(encapType == null)\n            return null;\n\n        switch (encapType)\n        {\n            case \"qinq\":\n                return IetfEncapType.QINQ.value;\n            case \"dot1q\":\n                return IetfEncapType.DOT1Q.value;\n            case \"null-encap\":\n                return IetfEncapType.UNTAGGED_INT.value;\n            default:\n                return null;\n        }\n    }\n\n    private String mapNspServiceModelEncapType(String encapType)\n    {\n        if(encapType == null)\n            return null;\n\n        switch (encapType)\n        {\n            case \"qinq-encap\":\n                return IetfEncapType.QINQ.value;\n            case \"q-encap\":\n                return IetfEncapType.QINANY.value;\n            case \"null-encap\":\n                return IetfEncapType.UNTAGGED_INT.value;\n            case \"unspecified\":\n            case \"cem\":\n            default:\n                return null;\n        }\n    }\n\n    private String mapOperState(String operState)\n    {\n        if(operState == null)\n            return IetfOperState.OP_UNKNOWN.value; // TODO should return UP??\n\n        switch (operState)\n        {\n            case \"enabled\":\n                return IetfOperState.OP_UP.value;\n            case \"disabled\":\n                return IetfOperState.OP_DOWN.value;\n            case \"unknown\":\n                return IetfOperState.OP_UNKNOWN.value;\n            default:\n                /*\n                nsp-common.yang states:\n                If a piece of equipment does not have an operational state,\n                then that component's operational state can be mapped to:\n                present = operationally up,\n                absent = operationally down.\n                Refer to X.731 standard for more information (https://www.itu.int/rec/T-REC-X.731-199201-I/en)\n                 */\n                return IetfOperState.OP_UP.value; // TODO have to check this, should return unknown?\n        }\n    }\n\n    private String mapClassIdToIetfServiceType(String classId)\n    {\n        if (NSP_ELINE_ENDPOINT_CLASS_ID.equals(classId) || NSP_ELINE_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(classId))\n            return IETF_VPN_COMMON_VPWS;\n        else if (NSP_ELAN_ENDPOINT_CLASS_ID.equals(classId) || NSP_ELAN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(classId))\n            return IETF_VPN_COMMON_VPLS;\n        else if (NSP_L3VPN_ENDPOINT_CLASS_ID.equals(classId) || NSP_L3VPN_IP_SERVICE_ENDPOINT_DETAIL_CLASS_ID.equals(classId))\n            return IETF_VPN_COMMON_L3VPN;\n        else\n            return null;\n    }\n\n    @Override\n    public int readSrcObjectDepth(String aInSrcClassPath)\n    {\n        return QUERY_PARAMETERS_DEPTH_SRC;\n    }\n\n    @Override\n    public int readDestObjectDepth(String aInDestClassPath)\n    {\n        return QUERY_PARAMETERS_DEPTH_DEST;\n    }\n\n    public Fields srcFilterFieldsToInclude(String aInSrcClassPath)\n    {\n        if(NSP_PORT_CLASS_PATH.equals(aInSrcClassPath))\n        {\n            return NSP_PORT_READ_FIELDS;\n        }\n        else if (NSP_LAG_CLASS_PATH.equals(aInSrcClassPath))\n        {\n            return NSP_LAG_READ_FIELDS;\n        }\n        else if(NSP_ELINE_ENDPOINT_CLASS_PATH.equals(aInSrcClassPath) ||\n                    NSP_ELAN_ENDPOINT_CLASS_PATH.equals(aInSrcClassPath) ||\n                    NSP_L3VPN_ENDPOINT_CLASS_PATH.equals(aInSrcClassPath))\n        {\n            return NSP_SERVICE_ENDPOINT_READ_FIELDS;\n        }\n        return null;\n    }\n    public Fields destFilterFieldsToInclude(String aInDestClassPath)\n    {\n        return IETF_SAP_READ_FIELDS;\n    }\n\n\n//    @Override\n//    public boolean accept(Headers aInHeaders)\n//    {\n//        if (null != aInHeaders)\n//        {\n//            handleUpdateEventLogger.debug(\"########## Got Kafka message with headers:\");\n//            aInHeaders.iterator().forEachRemaining(header -> handleUpdateEventLogger.debug(\"########## key: \" + header.key() + \", value: \" + new String(header.value())));\n//\n//            for (Header lHeader : aInHeaders)\n//            {\n//                if (lHeader.key().equals(CLASS_ID))\n//                {\n//                    String lValue = new String(lHeader.value());\n//                    return classIdsForIYangTopicConsumer.contains(lValue);\n//                }\n//            }\n//        }\n//        return false;\n//    }\n//\n//    @Override\n//    public void consume(ObjectNotification aInObjectNotification)\n//    {\n//        if (aInObjectNotification instanceof ObjectModification)\n//        {\n//            ObjectModification aInEvent = (ObjectModification) aInObjectNotification;\n//            handleUpdateEventForSpecialChildObjects(aInEvent, YangPluginMdConverterProvider.getInstance());\n//        }\n//    }\n}\n"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler",
                          "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.IetfNodeHandlerForNSPNetworkElement']",
                          "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                          "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                        },
                        "java-class-path": "com.nokia.nsp.md.converter.yang.plugin.IetfNodeHandlerForNSPNetworkElement",
                        "version": "1.0.1",
                        "java-code": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler/java-code",
                              "nsp-model:identifier": "/nsp-yang-mapping-converter:nsp-yang-mapping-converter/custom-handler[java-class-path='com.nokia.nsp.md.converter.yang.plugin.IetfNodeHandlerForNSPNetworkElement']/java-code[page-number='1']",
                              "nsp-model:creation-time": "2023-11-28T19:44:30.357Z",
                              "nsp-model:last-modified-time": "2023-11-28T19:44:30.357Z"
                            },
                            "page-number": 1,
                            "page": "package com.nokia.nsp.md.converter.yang.plugin;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.nokia.nsp.md.common.IYangObject;\nimport com.nokia.nsp.md.common.YangObject;\nimport com.nokia.nsp.md.common.notif.ObjectCreation;\nimport com.nokia.nsp.md.common.notif.ObjectDeletion;\nimport com.nokia.nsp.md.common.notif.ObjectModification;\nimport com.nokia.nsp.md.common.notif.ObjectReplacement;\nimport com.nokia.nsp.md.converter.api.IMdConverterFw;\nimport com.nokia.nsp.md.converter.yang.plugin.common.ICustomHandler;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SrcClass;\nimport com.nokia.nsp.md.converter.yang.plugin.metadata.SyncClass;\nimport com.nokia.nsp.md.db.yang.api.ExecutionContext;\nimport com.nokia.nsp.md.db.yang.api.QueryParameters;\nimport com.nokia.nsp.md.ifg.yang.api.Fields;\nimport com.nokia.nspos.model.domain.service.types.EndpointType;\nimport com.nokia.nspos.model.domain.service.types.Layer;\nimport com.nokia.nspos.model.domain.service.types.ServiceType;\nimport com.nokia.nspos.persistence.api.IDB;\nimport com.nokia.nspos.persistence.impl.db.transaction.DBRuntimeException;\nimport com.nokia.nspos.persistence.impl.db.transaction.ITransactionContext;\nimport com.nokia.nspos.persistence.impl.db.transaction.Transactor;\nimport com.nokia.nspos.persistence.yang.api.IYangDB;\n\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.function.Function;\nimport java.util.regex.Pattern;\n\npublic class IetfNodeHandlerForNSPNetworkElement implements ICustomHandler\n{\n    private static final org.slf4j.Logger handleResyncLogger = org.slf4j.LoggerFactory.getLogger(IetfNodeHandlerForNSPNetworkElement.class.getName() + \".handleResync\");\n    private static final org.slf4j.Logger handlePostResyncDeleteLogger = org.slf4j.LoggerFactory.getLogger(IetfNodeHandlerForNSPNetworkElement.class.getName() + \".handlePostResyncDelete\");\n    private static final org.slf4j.Logger handleCreateEventLogger = org.slf4j.LoggerFactory.getLogger(IetfNodeHandlerForNSPNetworkElement.class.getName() + \".handleCreateEvent\");\n    private static final org.slf4j.Logger handleUpdateEventLogger = org.slf4j.LoggerFactory.getLogger(IetfNodeHandlerForNSPNetworkElement.class.getName() + \".handleUpdateEvent\");\n    private static final org.slf4j.Logger handleReplaceEventLogger = org.slf4j.LoggerFactory.getLogger(IetfNodeHandlerForNSPNetworkElement.class.getName() + \".handleReplaceEvent\");\n    private static final org.slf4j.Logger handleDeleteEventLogger = org.slf4j.LoggerFactory.getLogger(IetfNodeHandlerForNSPNetworkElement.class.getName() + \".handleDeleteEvent\");\n\n    private static final String IETF_SAP_NETWORK_ID = \"SAPTopology\";\n    private static final String IETF_L2_NETWORK_ID = \"L2Topology\";\n\n    private static final String IETF_NETWORK_ID_PROP = \"network-id\";\n    private static final String IETF_NETWORK_PROP = \"network\";\n    private static final String IETF_NETWORK_TYPES_PROP = \"network-types\";\n    private static final String IETF_NODE_PROP = \"node\";\n    private static final String IETF_NODE_ID_PROP = \"node-id\";\n    private static final String IETF_SERVICE_TYPE_PROP = \"service-type\";\n    private static final String IETF_SAP_NTW_SAP_NETWORK_PROP = \"ietf-sap-ntw:sap-network\";\n    private static final String IETF_SAP_NTW_SERVICE_PROP = \"ietf-sap-ntw:service\";\n\n    private static final String IETF_VPN_COMMON_VPWS = \"ietf-vpn-common:vpws\";\n    private static final String IETF_VPN_COMMON_VPLS = \"ietf-vpn-common:vpls\";\n    private static final String IETF_VPN_COMMON_L3VPN = \"ietf-vpn-common:l3vpn\";\n\n    private static final String IETF_NETWORKS_YANG_PATH = \"/ietf-network:networks\";\n    private static final String IETF_SAP_NETWORK_YANG_PATH = String.format(\"/ietf-network:networks/network[network-id='%s']\", IETF_SAP_NETWORK_ID);\n    private static final String IETF_SAP_NETWORK_NODE_YANG_PATH = IETF_SAP_NETWORK_YANG_PATH + \"/node[node-id='%s']\";\n\n    private static final String IETF_L2_NETWORK_PATH = String.format(\"/ietf-network:networks/network[network-id='%s']\", IETF_L2_NETWORK_ID);\n    private static final String IETF_L2_NODE_PATH = IETF_L2_NETWORK_PATH + \"/node[node-id='%s']\";\n\n    private static final Pattern MAC_ADDRESS_PATTERN = Pattern.compile(\"[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}\");\n    private static final Pattern RAW_MAC_ADDRESS_PATTERN = Pattern.compile(\"[0-9a-fA-F]{12}\");\n\n    private static final AtomicBoolean ietfSapNetworkPresent = new AtomicBoolean(false);\n    private static final Object mutex = new Object();\n\n    private static final Fields NSP_NODE_READ_FIELDS = Fields.parse(\"ne-id;name;mac-address;ip-address\");\n    private static final Fields IETF_NODE_READ_FIELDS = Fields.parse(\"node-id\");\n\n    @Override\n    public void handleResync(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInExistingObject, String aInNeId, YangPluginMdConverterProvider aInYangPlugin)\n    {\n        IMdConverterFw converterFw = aInYangPlugin.getiMdConverterFw();\n        IYangDB yangDB = converterFw.getIYangDB();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        //String lSrcClassPath = aInSrcClass.getSrcClassPath(); // should always be nsp-equipment:/network/network-element\n        //String lDestClassPath = aInSyncClass.getDestClassPath(); // should always be ietf-network:/networks/network/node\n\n//        createIetfSAPNetworkIfNotExists(yangDB, qp);\n        createIetfSAPNodeIfNotExists(yangDB, aInNeId, qp);\n\n        handleL2Node(aInSrcObject, aInNeId, yangDB, qp);\n    }\n\n    @Override\n    public void handlePostResyncDelete(SrcClass aInSrcClass, SyncClass aInSyncClass, IYangObject aInSrcObject, String aInNeId, YangPluginMdConverterProvider aInYangPlugin)\n    {\n\n    }\n\n    @Override\n    public void handleCreateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectCreation aInEvent, String aInNeId, YangPluginMdConverterProvider aInYangPlugin)\n    {\n        IYangDB yangDB = aInYangPlugin.getiMdConverterFw().getIYangDB();\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        createIetfSAPNodeIfNotExists(yangDB, aInNeId, qp);\n    }\n\n    @Override\n    public void handleUpdateEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectModification aInEvent, String aInNeId, YangPluginMdConverterProvider aInYangPlugin)\n    {\n        IYangDB yangDB = aInYangPlugin.getiMdConverterFw().getIYangDB();\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        for(ObjectModification.Change change : aInEvent.getChanges()) {\n            if(change.getName().equals(\"ne-name\") || change.getName().equals(\"mac-address\") || change.getName().equals(\"ip-address\")){\n                handleL2Node(aInEvent.getEntity(), aInNeId, yangDB, qp);\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void handleReplaceEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectReplacement aInEvent, String aInNeId, YangPluginMdConverterProvider aInYangPlugin)\n    {\n\n    }\n\n    @Override\n    public void handleDeleteEvent(SrcClass aInSrcClass, SyncClass aInSyncClass, ObjectDeletion aInEvent, String aInNeId, YangPluginMdConverterProvider aInYangPlugin)\n    {\n        IYangDB yangDB = aInYangPlugin.getiMdConverterFw().getIYangDB();\n\n        final QueryParameters qp = new QueryParameters();\n        qp.setSuperUser(true);\n        qp.setIExecutionContext(new ExecutionContext(null, null, false, false, false));\n\n        //String eventClassId = aInEvent.getClassId();\n        //String instanceId = aInEvent.getInstanceId();\n\n        // Delete this node from SAPTopology; will delete all SAPs on this node as child objects\n        String ietfSAPNodePath = String.format(IETF_SAP_NETWORK_NODE_YANG_PATH, aInNeId);\n        yangDB.delete(ietfSAPNodePath, qp);\n    }\n\n    private void createIetfSAPNetworkIfNotExists(IYangDB yangDB, QueryParameters qp)\n    {\n        if(ietfSapNetworkPresent.get()) // IETF SAP Network object is already present, return\n            return;\n\n        synchronized (mutex)\n        {\n            if (yangDB.exists(IETF_SAP_NETWORK_YANG_PATH, qp))\n            {\n                // Converter app just started up OR new SAPTopologyHandler file was uploaded,\n                // variable is false, but IETF network object present in DB\n                // set to true and return\n                ietfSapNetworkPresent.set(true);\n                return;\n            }\n\n            IYangObject lSapNetworkObject = new YangObject();\n            lSapNetworkObject.setProperty(IETF_SERVICE_TYPE_PROP, Arrays.asList(IETF_VPN_COMMON_VPWS, IETF_VPN_COMMON_VPLS, IETF_VPN_COMMON_L3VPN));\n\n            IYangObject lNetworkTypesObj = new YangObject();\n            lNetworkTypesObj.setProperty(IETF_SAP_NTW_SAP_NETWORK_PROP, lSapNetworkObject);\n\n            IYangObject lNetworkObj = new YangObject();\n            lNetworkObj.setProperty(IETF_NETWORK_ID_PROP, IETF_SAP_NETWORK_ID);\n            lNetworkObj.setProperty(IETF_NETWORK_TYPES_PROP, lNetworkTypesObj);\n\n            yangDB.createChild(IETF_NETWORKS_YANG_PATH, IETF_NETWORK_PROP, lNetworkObj, qp);\n\n            // IETF network object was not present in DB and was just created. Set to true and return\n            ietfSapNetworkPresent.set(true);\n        }\n    }\n\n    private void  createIetfSAPNodeIfNotExists(IYangDB yangDB, String aInNeId, QueryParameters qp)\n    {\n        String nodePath = String.format(IETF_SAP_NETWORK_NODE_YANG_PATH, aInNeId);\n        if(yangDB.exists(nodePath, qp))\n            return;\n\n        IYangObject ietfVpwsServiceType = new YangObject();\n        ietfVpwsServiceType.setProperty(IETF_SERVICE_TYPE_PROP, IETF_VPN_COMMON_VPWS);\n\n        IYangObject ietfVplsServiceType = new YangObject();\n        ietfVplsServiceType.setProperty(IETF_SERVICE_TYPE_PROP, IETF_VPN_COMMON_VPLS);\n\n        IYangObject ietfl3vpnServiceType = new YangObject();\n        ietfl3vpnServiceType.setProperty(IETF_SERVICE_TYPE_PROP, IETF_VPN_COMMON_L3VPN);\n\n        IYangObject ietfSapNode = new YangObject();\n        ietfSapNode.setProperty(IETF_NODE_ID_PROP, aInNeId);\n        ietfSapNode.setProperty(IETF_SAP_NTW_SERVICE_PROP, Arrays.asList(ietfVpwsServiceType, ietfVplsServiceType, ietfl3vpnServiceType));\n\n        yangDB.createChild(IETF_SAP_NETWORK_YANG_PATH, IETF_NODE_PROP, ietfSapNode, qp);\n    }\n\n    private void handleL2Node (IYangObject neObject, String neId, IYangDB yangDB, QueryParameters qp) {\n        String nodePath = String.format(IETF_L2_NODE_PATH, neId);\n        if (!canDeleteL2Node(neId, yangDB) // if canDeleteL2Node is true then no need to sync this node\n            && yangDB.exists(IETF_L2_NETWORK_PATH, qp)) {\n\n            IYangObject lNodeObj = new YangObject();\n            lNodeObj.setProperty(IETF_NETWORK_ID_PROP, IETF_L2_NETWORK_ID);\n            lNodeObj.setProperty(IETF_NODE_ID_PROP, neId);\n            IYangObject lNodeAttrObj = new YangObject();\n            lNodeAttrObj.setProperty(IETF_NETWORK_ID_PROP, IETF_L2_NETWORK_ID);\n            lNodeAttrObj.setProperty(IETF_NODE_ID_PROP, neId);\n\n            if(neObject.get(\"name\") != null) {\n                lNodeAttrObj.setProperty(\"name\", neObject.get(\"name\").toString());\n            }\n            if(neObject.get(\"mac-address\") != null) {\n                String macAddress = convertMacAddress(neObject.get(\"mac-address\").toString());\n                if (macAddress != null) {\n                    lNodeAttrObj.setProperty(\"management-mac\", macAddress);\n                }\n            }\n            if(neObject.get(\"ip-address\") != null) {\n                lNodeAttrObj.setProperty(\"management-address\", Collections.singletonList(neObject.get(\"ip-address\").toString()));\n            }\n            lNodeObj.setProperty(\"ietf-l2-topology:l2-node-attributes\", lNodeAttrObj);\n\n            if (!yangDB.exists(nodePath, qp)) {\n                handleUpdateEventLogger.debug(\"CREATING L2 NODE {}\", nodePath);\n                yangDB.createChild(IETF_L2_NETWORK_PATH, IETF_NODE_PROP, lNodeObj, qp);\n            }\n            else {\n                handleUpdateEventLogger.debug(\"UPDATING L2 NODE {}\", nodePath);\n                yangDB.update(nodePath, lNodeObj, qp);\n            }\n        }\n    }\n\n    private String convertMacAddress (String aInMacAddress) {\n        String macAddress = aInMacAddress.replace(\"-\", \":\").replace(\".\", \"\");\n        if (MAC_ADDRESS_PATTERN.matcher(macAddress).matches()) {\n            return macAddress;\n        }\n        if (RAW_MAC_ADDRESS_PATTERN.matcher(macAddress).matches()) {\n            StringBuilder macAddressSB = new StringBuilder(macAddress);\n            macAddressSB.insert(10, ':')\n                    .insert(8, ':')\n                    .insert(6, ':')\n                    .insert(4, ':')\n                    .insert(2, ':');\n            return macAddressSB.toString();\n        }\n        return null;\n    }\n\n    private boolean canDeleteL2Node (String nodeId, IYangDB yangDB) {\n        String endpointTableNative = \"service.Endpoint\";\n        String serviceTableNative = \"service.Service\";\n        String subquery = String.format(\"SELECT DISTINCT svc.dbId FROM %s e JOIN %s svc ON e.service_dbId = svc.dbId \"\n                                        + \"WHERE e.siteId=:siteId AND e.type = :endpointType \"\n                                        + \"AND svc.layer=:layer AND svc.type IN :serviceTypes\",\n                                        endpointTableNative, serviceTableNative);\n        String query = String.format(\"SELECT count(*) FROM (SELECT count(e.dbId) FROM %s e \"\n                                     + \"WHERE e.type=:endpointType AND e.service_dbId IN (%s) \"\n                                     + \"GROUP BY e.service_dbId) AS g WHERE g.count = 2\", endpointTableNative, subquery);\n        Object count = execute(yangDB.getDb(), tx -> tx.getEntityManager()\n                .createNativeQuery(query)\n                .setParameter(\"siteId\", nodeId)\n                .setParameter(\"endpointType\", EndpointType.physicalPort.getValue())\n                .setParameter(\"layer\", Layer.physical.getValue())\n                .setParameter(\"serviceTypes\", ImmutableSet.of(ServiceType.cable.getValue(), ServiceType.radioLink.getValue()))\n                .getSingleResult());\n        return count != null && ((BigInteger) count).longValue() == 0;\n    }\n\n    private <T> T execute(IDB db, Function<ITransactionContext, T> fn) {\n        try {\n            if (Transactor.isInTransaction()) {\n                return fn.apply(Transactor.getContext());\n            } else {\n                return Transactor.execute(db, fn, true);\n            }\n        } catch (DBRuntimeException e) {\n            return null;\n        }\n    }\n\n    @Override\n    public Fields srcFilterFieldsToInclude(String aInSrcClassPath)\n    {\n        return NSP_NODE_READ_FIELDS;\n    }\n    public Fields destFilterFieldsToInclude(String aInDestClassPath)\n    {\n        return IETF_NODE_READ_FIELDS;\n    }\n}\n"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-yang-mapping-converter:nsp-yang-mapping-converter/uploadFile": {
      "post": {
        "tags": [
          "UploadMappingFiles"
        ],
        "operationId": "loadIETFMappingFiles",
        "description": "The parameters and request body are for method: loadIETFMappingFiles. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "nspPluginId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "file": "file"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment-templates:correlation-policy": {
      "post": {
        "tags": [
          "RouterNECorrelationMappingService"
        ],
        "operationId": "createMappingPolicy",
        "description": "The parameters and request body are for method: createMappingPolicy. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "RouterNECorrelationMappingService"
        ],
        "operationId": "getCorrelationPolicy",
        "description": "The parameters and request body are for method: getCorrelationPolicy. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-equipment-templates:correlation-policy": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "router-ne-mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "system-id": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "app-id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "object-description": {
                                "type": "string"
                              },
                              "router-infos": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "network-identifier": {
                                      "type": "number"
                                    },
                                    "bgp-ls-id": {
                                      "type": "number"
                                    },
                                    "as-number": {
                                      "type": "number"
                                    },
                                    "router-id": {
                                      "type": "string"
                                    },
                                    "protocol": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-equipment-templates:correlation-policy": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-equipment-templates:correlation-policy",
                      "nsp-model:identifier": "/nsp-equipment-templates:correlation-policy"
                    },
                    "router-ne-mapping": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-equipment-templates:correlation-policy/router-ne-mapping",
                          "nsp-model:identifier": "/nsp-equipment-templates:correlation-policy/router-ne-mapping[system-id='35.121.100.176']",
                          "nsp-model:creation-time": "2023-12-08T03:36:05.115Z",
                          "nsp-model:last-modified-time": "2023-12-08T03:36:05.115Z"
                        },
                        "system-id": "35.121.100.176",
                        "id": "",
                        "app-id": "",
                        "name": "cisco ios mapping",
                        "object-description": "",
                        "router-infos": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-equipment-templates:correlation-policy/router-ne-mapping/router-infos",
                              "nsp-model:identifier": "/nsp-equipment-templates:correlation-policy/router-ne-mapping[system-id='35.121.100.176']/router-infos[router-id='35.121.100.177'][network-identifier='0'][bgp-ls-id='0'][as-number='100']",
                              "nsp-model:creation-time": "2023-12-08T03:36:05.115Z",
                              "nsp-model:last-modified-time": "2023-12-08T03:36:05.115Z"
                            },
                            "network-identifier": 0,
                            "bgp-ls-id": 0,
                            "as-number": 100,
                            "router-id": "35.121.100.177",
                            "protocol": "OSPFv2"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment-templates:correlation-policy/{pathv1}": {
      "put": {
        "tags": [
          "RouterNECorrelationMappingService"
        ],
        "operationId": "updateMappingPolicy",
        "description": "The parameters and request body are for method: updateMappingPolicy. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "RouterNECorrelationMappingService"
        ],
        "operationId": "getSpecificMappingPolicy",
        "description": "The parameters and request body are for method: getSpecificMappingPolicy. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-equipment-templates:router-ne-mapping": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "system-id": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "app-id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "object-description": {
                            "type": "string"
                          },
                          "router-infos": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    },
                                    "nsp-model:creation-time": {
                                      "type": "string"
                                    },
                                    "nsp-model:last-modified-time": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "network-identifier": {
                                  "type": "number"
                                },
                                "bgp-ls-id": {
                                  "type": "number"
                                },
                                "as-number": {
                                  "type": "number"
                                },
                                "router-id": {
                                  "type": "string"
                                },
                                "protocol": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-equipment-templates:router-ne-mapping": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-equipment-templates:correlation-policy/router-ne-mapping",
                        "nsp-model:identifier": "/nsp-equipment-templates:correlation-policy/router-ne-mapping[system-id='35.121.100.176']",
                        "nsp-model:creation-time": "2023-12-08T03:36:05.115Z",
                        "nsp-model:last-modified-time": "2023-12-08T03:36:05.115Z"
                      },
                      "system-id": "35.121.100.176",
                      "id": "",
                      "app-id": "",
                      "name": "cisco ios mapping",
                      "object-description": "",
                      "router-infos": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-equipment-templates:correlation-policy/router-ne-mapping/router-infos",
                            "nsp-model:identifier": "/nsp-equipment-templates:correlation-policy/router-ne-mapping[system-id='35.121.100.176']/router-infos[router-id='35.121.100.177'][network-identifier='0'][bgp-ls-id='0'][as-number='100']",
                            "nsp-model:creation-time": "2023-12-08T03:36:05.115Z",
                            "nsp-model:last-modified-time": "2023-12-08T03:36:05.115Z"
                          },
                          "network-identifier": 0,
                          "bgp-ls-id": 0,
                          "as-number": 100,
                          "router-id": "35.121.100.177",
                          "protocol": "OSPFv2"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RouterNECorrelationMappingService"
        ],
        "operationId": "deleteAllPoliciesOnARouter",
        "description": "The parameters and request body are for method: deleteAllPoliciesOnARouter. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment-templates:correlation-policy/router-ne-mapping": {
      "get": {
        "tags": [
          "RouterNECorrelationMappingService"
        ],
        "operationId": "getRouterNeMapping",
        "description": "The parameters and request body are for method: getRouterNeMapping. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-equipment-templates:router-ne-mapping": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "system-id": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "app-id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "object-description": {
                            "type": "string"
                          },
                          "router-infos": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    },
                                    "nsp-model:creation-time": {
                                      "type": "string"
                                    },
                                    "nsp-model:last-modified-time": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "network-identifier": {
                                  "type": "number"
                                },
                                "bgp-ls-id": {
                                  "type": "number"
                                },
                                "as-number": {
                                  "type": "number"
                                },
                                "router-id": {
                                  "type": "string"
                                },
                                "protocol": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-equipment-templates:router-ne-mapping": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-equipment-templates:correlation-policy/router-ne-mapping",
                        "nsp-model:identifier": "/nsp-equipment-templates:correlation-policy/router-ne-mapping[system-id='35.121.100.176']",
                        "nsp-model:creation-time": "2023-12-08T03:36:05.115Z",
                        "nsp-model:last-modified-time": "2023-12-08T03:36:05.115Z"
                      },
                      "system-id": "35.121.100.176",
                      "id": "",
                      "app-id": "",
                      "name": "cisco ios mapping",
                      "object-description": "",
                      "router-infos": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-equipment-templates:correlation-policy/router-ne-mapping/router-infos",
                            "nsp-model:identifier": "/nsp-equipment-templates:correlation-policy/router-ne-mapping[system-id='35.121.100.176']/router-infos[router-id='35.121.100.177'][network-identifier='0'][bgp-ls-id='0'][as-number='100']",
                            "nsp-model:creation-time": "2023-12-08T03:36:05.115Z",
                            "nsp-model:last-modified-time": "2023-12-08T03:36:05.115Z"
                          },
                          "network-identifier": 0,
                          "bgp-ls-id": 0,
                          "as-number": 100,
                          "router-id": "35.121.100.177",
                          "protocol": "OSPFv2"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment-templates:correlation-policy/{pathv1}/{pathv2}": {
      "delete": {
        "tags": [
          "RouterNECorrelationMappingService"
        ],
        "operationId": "deleteOnePolicyOfRouter",
        "description": "The parameters and request body are for method: deleteOnePolicyOfRouter. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/indicators-admin:/ageout-policies/ageout-policy": {
      "get": {
        "tags": [
          "DataTablesRetention"
        ],
        "operationId": "getIndicatorAgeoutPolicySettings",
        "description": "The parameters and request body are for method: getIndicatorAgeoutPolicySettings. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ageout-policy": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "max-retention": {
                            "type": "number"
                          },
                          "min-retention": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "retention": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ageout-policy": [
                    {
                      "max-retention": 403,
                      "min-retention": 1,
                      "name": "indicators:/base/indicator/data",
                      "retention": 90
                    },
                    {
                      "max-retention": 403,
                      "min-retention": 1,
                      "name": "indicators:/base/threshold/event",
                      "retention": 90
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataTablesRetention"
        ],
        "operationId": "updateTheRetentionTimeForIndicators",
        "description": "The parameters and request body are for method: updateTheRetentionTimeForIndicators. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/rtanalytics-admin:/ageout-policies/ageout-policy": {
      "get": {
        "tags": [
          "DataTablesRetention"
        ],
        "operationId": "getBaselineAgeoutPolicySettings",
        "description": "The parameters and request body are for method: getBaselineAgeoutPolicySettings. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ageout-policy": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "max-retention": {
                            "type": "number"
                          },
                          "min-retention": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "retention": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "ageout-policy": [
                    {
                      "max-retention": 403,
                      "min-retention": 1,
                      "name": "rtanalytics:/base/window/anomalyevent",
                      "retention": 90
                    },
                    {
                      "max-retention": 403,
                      "min-retention": 1,
                      "name": "rtanalytics:/base/window/baseline",
                      "retention": 90
                    },
                    {
                      "max-retention": 403,
                      "min-retention": 1,
                      "name": "rtanalytics:/base/window/windowmeasurement",
                      "retention": 90
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/rtanalytics-admin:/ageout-policies": {
      "patch": {
        "tags": [
          "DataTablesRetention"
        ],
        "operationId": "updateTheRetentionTimeForBaseline",
        "description": "The parameters and request body are for method: updateTheRetentionTimeForBaseline. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-indicator:rta-indicator-templates": {
      "post": {
        "tags": [
          "IndicatorTemplates"
        ],
        "operationId": "avgCPUAllNodesAllActions",
        "description": "The parameters and request body are for method: avgCPUAllNodesAllActions. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            },
                            "nsp-model:creation-time": {
                              "type": "string"
                            },
                            "nsp-model:last-modified-time": {
                              "type": "string"
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "units-name": {
                          "type": "string"
                        },
                        "telemetry-type": {
                          "type": "string"
                        },
                        "formula": {
                          "type": "string"
                        },
                        "counters": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "function": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "thresholds": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "threshold-value-decimal": {
                                "type": "string"
                              },
                              "direction": {
                                "type": "string"
                              },
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "kafka": {
                                      "type": "object",
                                      "properties": {
                                        "@": {
                                          "type": "object",
                                          "properties": {
                                            "nsp-model:schema-nodeid": {
                                              "type": "string"
                                            },
                                            "nsp-model:identifier": {
                                              "type": "string"
                                            },
                                            "nsp-model:creation-time": {
                                              "type": "string"
                                            },
                                            "nsp-model:last-modified-time": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "topic-name": {
                                          "type": "string"
                                        },
                                        "topic-content": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "Location": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "created": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                      "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']",
                      "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                      "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                    },
                    "name": "AvgCpuAllNodesAllActionsTemplate",
                    "description": "avg cpu from all nodes template",
                    "units-name": "%",
                    "telemetry-type": "telemetry:/base/system-info/system",
                    "formula": "avg({cpu-usage_avg})",
                    "counters": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/counters[name='cpu-usage'][function='avg']",
                          "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                          "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                        },
                        "name": "cpu-usage",
                        "function": "avg"
                      }
                    ],
                    "thresholds": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']",
                          "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                          "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                        },
                        "threshold-value-decimal": "20",
                        "direction": "increasing",
                        "actions": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_kafka_action']",
                              "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                              "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                            },
                            "name": "template_threshold_20_increasing_kafka_action",
                            "type": "kafka",
                            "kafka": {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_kafka_action']/kafka",
                                "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                                "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                              },
                              "topic-name": "nsp-act-action-event",
                              "topic-content": "CPU is a rising"
                            }
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_alarm_action']",
                              "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                              "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                            },
                            "name": "template_threshold_20_increasing_alarm_action",
                            "type": "alarm",
                            "alarm": {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/alarm",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_alarm_action']/alarm",
                                "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                                "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                              },
                              "severity": "major"
                            }
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_email_action']",
                              "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                              "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                            },
                            "name": "template_threshold_20_increasing_email_action",
                            "type": "email",
                            "email": {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/email",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_email_action']/email",
                                "nsp-model:creation-time": "2023-12-07T23:43:31.014Z",
                                "nsp-model:last-modified-time": "2023-12-07T23:43:31.014Z"
                              },
                              "email-address": "userid@user.com",
                              "email-subject": "Hmmmmm, It's getting hot",
                              "email-content": "Your temperature is rising.",
                              "aggregation": false,
                              "period": 5,
                              "number-events": 5
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "Location": "/restconf/data/nsp-indicator:rta-indicator-templates/template=AvgCpuAllNodesAllActionsTemplate"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "IndicatorTemplates"
        ],
        "operationId": "getAllIndicatorTemplates",
        "description": "The parameters and request body are for method: getAllIndicatorTemplates. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-indicator:rta-indicator-templates": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "template": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "units-name": {
                                "type": "string"
                              },
                              "telemetry-type": {
                                "type": "string"
                              },
                              "formula": {
                                "type": "string"
                              },
                              "counters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "function": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "thresholds": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "threshold-value-decimal": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string"
                                    },
                                    "actions": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "@": {
                                            "type": "object",
                                            "properties": {
                                              "nsp-model:schema-nodeid": {
                                                "type": "string"
                                              },
                                              "nsp-model:identifier": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "kafka": {
                                            "type": "object",
                                            "properties": {
                                              "@": {
                                                "type": "object",
                                                "properties": {
                                                  "nsp-model:schema-nodeid": {
                                                    "type": "string"
                                                  },
                                                  "nsp-model:identifier": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "topic-name": {
                                                "type": "string"
                                              },
                                              "topic-content": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-indicator:rta-indicator-templates": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates",
                      "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates"
                    },
                    "template": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']"
                        },
                        "name": "AvgCpuAllNodesAllActionsTemplate",
                        "description": "avg cpu from all nodes template",
                        "units-name": "%",
                        "telemetry-type": "telemetry:/base/system-info/system",
                        "formula": "avg({cpu-usage_avg})",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/counters[name='cpu-usage'][function='avg']"
                            },
                            "name": "cpu-usage",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']"
                            },
                            "threshold-value-decimal": "20",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_kafka_action']"
                                },
                                "name": "template_threshold_20_increasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "CPU is a rising"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_alarm_action']"
                                },
                                "name": "template_threshold_20_increasing_alarm_action",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_alarm_action']/alarm"
                                  },
                                  "severity": "major"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_email_action']"
                                },
                                "name": "template_threshold_20_increasing_email_action",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_email_action']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It's getting hot",
                                  "email-content": "Your temperature is rising.",
                                  "aggregation": false,
                                  "period": 5,
                                  "number-events": 5
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']"
                        },
                        "name": "MaxTempNfmp10.10.10.4Template",
                        "description": "\"max\" temp on '10.10.10.4' template",
                        "units-name": "deg C",
                        "telemetry-type": "telemetry:/base/hardware/temperature",
                        "formula": "max({temperature_avg})",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/counters[name='temperature'][function='avg']"
                            },
                            "name": "temperature",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='60'][direction='increasing']"
                            },
                            "threshold-value-decimal": "60",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='template_threshold_60_increasing_kafka_action']"
                                },
                                "name": "template_threshold_60_increasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='template_threshold_60_increasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Temperature is a rising on 10.10.10.4"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='template_threshold_60_increasing_alarm_action']"
                                },
                                "name": "template_threshold_60_increasing_alarm_action",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='template_threshold_60_increasing_alarm_action']/alarm"
                                  },
                                  "severity": "critical"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='template_threshold_60_increasing_email_action']"
                                },
                                "name": "template_threshold_60_increasing_email_action",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MaxTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='template_threshold_60_increasing_email_action']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It's getting hot 10.10.10.4",
                                  "email-content": "Your temperature is rising 10.10.10.4.",
                                  "aggregation": false,
                                  "period": 5,
                                  "number-events": 5
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']"
                        },
                        "name": "MinTempNfmp10.10.10.4Template",
                        "description": "min' temp\" on 10.10.10.4 template",
                        "units-name": "CELSIUS",
                        "telemetry-type": "telemetry:/base/hardware/temperature",
                        "formula": "min({temperature_avg})",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/counters[name='temperature'][function='avg']"
                            },
                            "name": "temperature",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='50'][direction='increasing']"
                            },
                            "threshold-value-decimal": "50",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='template_threshold_50_increasing_kafka_action']"
                                },
                                "name": "template_threshold_50_increasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='template_threshold_50_increasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Temperature is a rising 10.10.10.4"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='template_threshold_50_increasing_alarm_action']"
                                },
                                "name": "template_threshold_50_increasing_alarm_action",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='template_threshold_50_increasing_alarm_action']/alarm"
                                  },
                                  "severity": "major"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='template_threshold_50_increasing_email_action']"
                                },
                                "name": "template_threshold_50_increasing_email_action",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='MinTempNfmp10.10.10.4Template']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='template_threshold_50_increasing_email_action']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It's getting hot 10.10.10.4",
                                  "email-content": "Your temperature is rising 10.10.10.4",
                                  "aggregation": false,
                                  "period": 5,
                                  "number-events": 5
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']"
                        },
                        "name": "AvgTempNfmp10.10.10.5Template",
                        "description": "avg temp on 10.10.10.5 template",
                        "units-name": "deg C",
                        "telemetry-type": "telemetry:/base/hardware/temperature",
                        "formula": "avg({temperature_avg})",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/counters[name='temperature'][function='avg']"
                            },
                            "name": "temperature",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/thresholds[threshold-value-decimal='40'][direction='increasing']"
                            },
                            "threshold-value-decimal": "40",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='template_threshold_40_increasing_kafka_action']"
                                },
                                "name": "template_threshold_40_increasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='template_threshold_40_increasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Temperature is a rising 10.10.10.5"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='template_threshold_40_increasing_alarm_action']"
                                },
                                "name": "template_threshold_40_increasing_alarm_action",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='template_threshold_40_increasing_alarm_action']/alarm"
                                  },
                                  "severity": "minor"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='template_threshold_40_increasing_email_action']"
                                },
                                "name": "template_threshold_40_increasing_email_action",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgTempNfmp10.10.10.5Template']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='template_threshold_40_increasing_email_action']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It\"s getting hot 10.10.10.5",
                                  "email-content": "Your temperature is rising 10.10.10.5",
                                  "aggregation": true,
                                  "period": 3,
                                  "number-events": 4
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']"
                        },
                        "name": "SumOctets 10.10.10.5 Template",
                        "description": "sum tx, rx of all ports on 10.10.10.5 template",
                        "units-name": "Total octets",
                        "telemetry-type": "telemetry:/base/interfaces/interface",
                        "formula": "sum({transmitted-octets-periodic_sum} + {received-octets-periodic_sum})",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/counters[name='transmitted-octets-periodic'][function='sum']"
                            },
                            "name": "transmitted-octets-periodic",
                            "function": "sum"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/counters[name='received-octets-periodic'][function='sum']"
                            },
                            "name": "received-octets-periodic",
                            "function": "sum"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/thresholds[threshold-value-decimal='100000'][direction='increasing']"
                            },
                            "threshold-value-decimal": "100000",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/thresholds[threshold-value-decimal='100000'][direction='increasing']/actions[name='template_threshold_100000_increasing_kafka_action']"
                                },
                                "name": "template_threshold_100000_increasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/thresholds[threshold-value-decimal='100000'][direction='increasing']/actions[name='template_threshold_100000_increasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "10.10.10.5 sum(tx+rx) increasing"
                                }
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/thresholds[threshold-value-decimal='1000'][direction='decreasing']"
                            },
                            "threshold-value-decimal": "1000",
                            "direction": "decreasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/thresholds[threshold-value-decimal='1000'][direction='decreasing']/actions[name='template_threshold_1000_decreasing_kafka_action']"
                                },
                                "name": "template_threshold_1000_decreasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.5 Template']/thresholds[threshold-value-decimal='1000'][direction='decreasing']/actions[name='template_threshold_1000_decreasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "10.10.10.5 sum(tx+rx) decreasing"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']"
                        },
                        "name": "SumOctets 10.10.10.4 Two Ports Template",
                        "description": "sum tx, rx of port 1/1/1 and 1/1/2 on 10.10.10.4 template",
                        "units-name": "Total octets",
                        "telemetry-type": "telemetry:/base/interfaces/interface",
                        "formula": "sum({received-octets-periodic_sum}+{transmitted-octets-periodic_sum})",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/counters[name='transmitted-octets-periodic'][function='sum']"
                            },
                            "name": "transmitted-octets-periodic",
                            "function": "sum"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/counters[name='received-octets-periodic'][function='sum']"
                            },
                            "name": "received-octets-periodic",
                            "function": "sum"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/thresholds[threshold-value-decimal='200000'][direction='increasing']"
                            },
                            "threshold-value-decimal": "200000",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/thresholds[threshold-value-decimal='200000'][direction='increasing']/actions[name='template_threshold_200000_increasing_kafka_action']"
                                },
                                "name": "template_threshold_200000_increasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/thresholds[threshold-value-decimal='200000'][direction='increasing']/actions[name='template_threshold_200000_increasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Total octets above 200000 threshold setting 10.10.10.4 1/1/1 and 1/1/2"
                                }
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/thresholds[threshold-value-decimal='20000'][direction='decreasing']"
                            },
                            "threshold-value-decimal": "20000",
                            "direction": "decreasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/thresholds[threshold-value-decimal='20000'][direction='decreasing']/actions[name='template_threshold_20000_decreasing_kafka_action']"
                                },
                                "name": "template_threshold_20000_decreasing_kafka_action",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='SumOctets 10.10.10.4 Two Ports Template']/thresholds[threshold-value-decimal='20000'][direction='decreasing']/actions[name='template_threshold_20000_decreasing_kafka_action']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Total octets below 20000 threshold setting 10.10.10.4 1/1/1 and 1/1/2"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-indicator:rta-indicator-templates/{pathv1}": {
      "put": {
        "tags": [
          "IndicatorTemplates"
        ],
        "operationId": "uPDATEIndicatorTemplate",
        "description": "The parameters and request body are for method: uPDATEIndicatorTemplate. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string"
                    },
                    "replaced": {
                      "type": "object",
                      "properties": {
                        "thresholds": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "threshold-value-decimal": {
                                "type": "string"
                              },
                              "direction": {
                                "type": "string"
                              },
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    },
                                    "kafka": {
                                      "type": "object",
                                      "properties": {
                                        "topic-name": {
                                          "type": "string"
                                        },
                                        "topic-content": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "counters": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "function": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "telemetry-type": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "units-name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "formula": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "result": "updated",
                  "replaced": {
                    "thresholds": [
                      {
                        "threshold-value-decimal": "60",
                        "direction": "increasing",
                        "actions": [
                          {
                            "name": "template_threshold_60_increasing_kafka_action",
                            "type": "kafka",
                            "kafka": {
                              "topic-name": "nsp-act-action-event",
                              "topic-content": "Temperature is a rising on 10.10.10.4"
                            }
                          },
                          {
                            "name": "template_threshold_60_increasing_alarm_action",
                            "type": "alarm",
                            "alarm": {
                              "severity": "critical"
                            }
                          },
                          {
                            "name": "template_threshold_60_increasing_email_action",
                            "type": "email",
                            "email": {
                              "email-address": "userid@user.com",
                              "email-subject": "Hmmmmm, It's getting hot 10.10.10.4",
                              "email-content": "Your temperature is rising 10.10.10.4."
                            }
                          }
                        ]
                      }
                    ],
                    "counters": [
                      {
                        "name": "temperature",
                        "function": "avg"
                      }
                    ],
                    "telemetry-type": "telemetry:/base/hardware/temperature",
                    "name": "MaxTempNfmp10.10.10.4Template",
                    "units-name": "deg C",
                    "description": "Update Indicator template using PUT \"max\" temp on '10.10.10.4' template",
                    "formula": "max({temperature_avg})"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IndicatorTemplates"
        ],
        "operationId": "deleteIndicatorTemplate",
        "description": "The parameters and request body are for method: deleteIndicatorTemplate. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "get": {
        "tags": [
          "IndicatorTemplates"
        ],
        "operationId": "getSpecificIndicatorTemplate",
        "description": "The parameters and request body are for method: getSpecificIndicatorTemplate. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-indicator:template": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "units-name": {
                            "type": "string"
                          },
                          "telemetry-type": {
                            "type": "string"
                          },
                          "formula": {
                            "type": "string"
                          },
                          "counters": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "name": {
                                  "type": "string"
                                },
                                "function": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "thresholds": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "threshold-value-decimal": {
                                  "type": "string"
                                },
                                "direction": {
                                  "type": "string"
                                },
                                "actions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "@": {
                                        "type": "object",
                                        "properties": {
                                          "nsp-model:schema-nodeid": {
                                            "type": "string"
                                          },
                                          "nsp-model:identifier": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string"
                                      },
                                      "kafka": {
                                        "type": "object",
                                        "properties": {
                                          "@": {
                                            "type": "object",
                                            "properties": {
                                              "nsp-model:schema-nodeid": {
                                                "type": "string"
                                              },
                                              "nsp-model:identifier": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "topic-name": {
                                            "type": "string"
                                          },
                                          "topic-content": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-indicator:template": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template",
                        "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']"
                      },
                      "name": "AvgCpuAllNodesAllActionsTemplate",
                      "description": "avg cpu from all nodes template",
                      "units-name": "%",
                      "telemetry-type": "telemetry:/base/system-info/system",
                      "formula": "avg({cpu-usage_avg})",
                      "counters": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/counters",
                            "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/counters[name='cpu-usage'][function='avg']"
                          },
                          "name": "cpu-usage",
                          "function": "avg"
                        }
                      ],
                      "thresholds": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds",
                            "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']"
                          },
                          "threshold-value-decimal": "20",
                          "direction": "increasing",
                          "actions": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_kafka_action']"
                              },
                              "name": "template_threshold_20_increasing_kafka_action",
                              "type": "kafka",
                              "kafka": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/kafka",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_kafka_action']/kafka"
                                },
                                "topic-name": "nsp-act-action-event",
                                "topic-content": "CPU is a rising"
                              }
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_alarm_action']"
                              },
                              "name": "template_threshold_20_increasing_alarm_action",
                              "type": "alarm",
                              "alarm": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/alarm",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_alarm_action']/alarm"
                                },
                                "severity": "major"
                              }
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_email_action']"
                              },
                              "name": "template_threshold_20_increasing_email_action",
                              "type": "email",
                              "email": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-templates/template/thresholds/actions/email",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-templates/template[name='AvgCpuAllNodesAllActionsTemplate']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='template_threshold_20_increasing_email_action']/email"
                                },
                                "email-address": "userid@user.com",
                                "email-subject": "Hmmmmm, It's getting hot",
                                "email-content": "Your temperature is rising.",
                                "aggregation": false,
                                "period": 5,
                                "number-events": 5
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-indicator:rta-indicator-rules": {
      "post": {
        "tags": [
          "IndicatorRules"
        ],
        "operationId": "postavgCPUAllNodesAllActions",
        "description": "The parameters and request body are for method: postavgCPUAllNodesAllActions. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "IndicatorRules"
        ],
        "operationId": "getAllIndicatorRules",
        "description": "The parameters and request body are for method: getAllIndicatorRules. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-indicator:rta-indicator-rules": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "rule": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "units-name": {
                                "type": "string"
                              },
                              "telemetry-type": {
                                "type": "string"
                              },
                              "formula": {
                                "type": "string"
                              },
                              "multiple-output": {
                                "type": "boolean"
                              },
                              "window-duration": {
                                "type": "string"
                              },
                              "enabled": {
                                "type": "boolean"
                              },
                              "collection-interval": {
                                "type": "number"
                              },
                              "subscription-id": {
                                "type": "string"
                              },
                              "counters": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "function": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "thresholds": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "threshold-value-decimal": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string"
                                    },
                                    "actions": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "@": {
                                            "type": "object",
                                            "properties": {
                                              "nsp-model:schema-nodeid": {
                                                "type": "string"
                                              },
                                              "nsp-model:identifier": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          },
                                          "kafka": {
                                            "type": "object",
                                            "properties": {
                                              "@": {
                                                "type": "object",
                                                "properties": {
                                                  "nsp-model:schema-nodeid": {
                                                    "type": "string"
                                                  },
                                                  "nsp-model:identifier": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "topic-name": {
                                                "type": "string"
                                              },
                                              "topic-content": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "act-rules": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "definition": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-indicator:rta-indicator-rules": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules",
                      "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules"
                    },
                    "rule": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']"
                        },
                        "name": "AvgCpuAllNodesAllActions",
                        "description": "avg cpu from all nodes",
                        "units-name": "%",
                        "telemetry-type": "telemetry:/base/system-info/system",
                        "formula": "avg({cpu-usage_avg})",
                        "multiple-output": false,
                        "window-duration": "PT1M",
                        "enabled": true,
                        "collection-interval": 30,
                        "subscription-id": "ia-f95ea845-3569-4251-9c2b-2221c26b00cb",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/counters[name='cpu-usage'][function='avg']"
                            },
                            "name": "cpu-usage",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']"
                            },
                            "threshold-value-decimal": "20",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_kafka_action1']"
                                },
                                "name": "threshold_20_increasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "CPU is a rising"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_alarm_action2']"
                                },
                                "name": "threshold_20_increasing_alarm_action2",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_alarm_action2']/alarm"
                                  },
                                  "severity": "major"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_email_action3']"
                                },
                                "name": "threshold_20_increasing_email_action3",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_email_action3']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It's getting hot",
                                  "email-content": "Your temperature is rising.",
                                  "aggregation": false,
                                  "period": 5,
                                  "number-events": 5
                                }
                              }
                            ]
                          }
                        ],
                        "act-rules": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/act-rules[name='ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d']"
                            },
                            "name": "ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d",
                            "definition": "{\"name\":\"ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d\",\"description\":\"avg cpu from all nodes\",\"owner\":\"AvgCpuAllNodesAllActions\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-f95ea845-3569-4251-9c2b-2221c26b00cb\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/cpu-usage\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"AvgCpuAllNodesAllActions\"},{\"full-name\":\"cpu-usage\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"cpu-usage\"],\"window-period\":60,\"aggregations\":[{\"operation\":\"avg\",\"arguments\":[\"cpu-usage\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/act-rules[name='ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107']"
                            },
                            "name": "ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107",
                            "definition": "{\"name\":\"ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107\",\"description\":\"Aggregation Operation Act Rule\",\"owner\":\"AvgCpuAllNodesAllActions\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"cpu-usage_avg\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"mixedOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"mixed-expression-operator\",\"mixed-expression-operator\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"eventTime\",\"name\"],\"in-property\":[\"cpu-usage_avg\"],\"resource-property\":\"networkDeviceId\",\"mixed-operations\":[{\"aggregation-operation\":\"avg\",\"aggregation-operation-argument\":\"cpu-usage_avg\",\"result-property\":\"result1\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-aggregation-operation\",\"input-process\":[\"mixedOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/act-rules[name='ind_threshold_42d013e0_f4a0_4851_acd8_cb2e91a1c192']"
                            },
                            "name": "ind_threshold_42d013e0_f4a0_4851_acd8_cb2e91a1c192",
                            "definition": "{\"name\":\"ind_threshold_42d013e0_f4a0_4851_acd8_cb2e91a1c192\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"AvgCpuAllNodesAllActions\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"AvgCpuAllNodesAllActions_20_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"AvgCpuAllNodesAllActions_20_increasing\",\"threshold-value-decimal\":\"20\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"AvgCpuAllNodesAllActions_20_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"CPU is a rising\"},\"action-name\":\"threshold_20_increasing_kafka_action1\",\"process-name\":\"AvgCpuAllNodesAllActions_20_increasing\"},{\"type\":\"alarm\",\"alarm\":{\"severity\":\"major\",\"alarm-name\":\"IndicatorThresholdCrossingEvent\",\"alarm-type\":\"qualityOfServiceAlarm\",\"probable-cause\":\"thresholdCrossed\",\"additional-text\":\"Threshold Crossing:\",\"additional-text-props\":[{\"property\":\"payload.threshold\",\"displayed-name\":\"threshold-value\"},{\"property\":\"payload.direction\",\"displayed-name\":\"direction\"},{\"property\":\"payload.value\",\"displayed-name\":\"value\"},{\"property\":\"source.eventTime\",\"displayed-name\":\"event-time\"},{\"property\":\"source.networkDeviceId\",\"displayed-name\":\"resource\"}],\"object-fdn\":\"fdn:yang:nsp-indicator:/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']\",\"object-name\":\"AvgCpuAllNodesAllActions\",\"object-type\":\"nsp-indicator:rta-indicator-rules/rule\",\"source-type\":\"nsp\",\"key-prefix\":\"fm.Alarm\",\"key-properties\":[\"$ALARM_NAME\",\"source.name\"],\"ne-name-property\":null,\"ne-id-property\":null,\"last-time-detected-property\":\"source.eventTime\",\"last-time-detected-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"key-fdn-namespace\":\"nsp-indicator\",\"implicitly-cleared\":false},\"action-name\":\"threshold_20_increasing_alarm_action2\",\"process-name\":\"AvgCpuAllNodesAllActions_20_increasing\"},{\"type\":\"email\",\"email\":{\"aggregation\":false,\"period\":5,\"email-address\":\"userid@user.com\",\"email-subject\":\"Hmmmmm, It's getting hot\",\"email-content\":\"Your temperature is rising.\",\"number-events\":5},\"action-name\":\"threshold_20_increasing_email_action3\",\"process-name\":\"AvgCpuAllNodesAllActions_20_increasing\"}]}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']"
                        },
                        "name": "MaxTempNfmp104",
                        "description": "\"max\" temp on '10.10.10.4'",
                        "units-name": "deg C",
                        "telemetry-type": "telemetry:/base/hardware/temperature",
                        "formula": "max({temperature_avg})",
                        "multiple-output": false,
                        "window-duration": "PT1M",
                        "enabled": true,
                        "collection-interval": 60,
                        "subscription-filter": "/nsp-equipment:network/network-element[ne-id='10.10.10.4']",
                        "subscription-id": "ia-ce390286-fe1f-4d63-8d7b-aea6edb673d4",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/counters[name='temperature'][function='avg']"
                            },
                            "name": "temperature",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/thresholds[threshold-value-decimal='60'][direction='increasing']"
                            },
                            "threshold-value-decimal": "60",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='threshold_60_increasing_kafka_action1']"
                                },
                                "name": "threshold_60_increasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='threshold_60_increasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Temperature is a rising on 10.10.10.4"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='threshold_60_increasing_alarm_action2']"
                                },
                                "name": "threshold_60_increasing_alarm_action2",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='threshold_60_increasing_alarm_action2']/alarm"
                                  },
                                  "severity": "critical"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='threshold_60_increasing_email_action3']"
                                },
                                "name": "threshold_60_increasing_email_action3",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/thresholds[threshold-value-decimal='60'][direction='increasing']/actions[name='threshold_60_increasing_email_action3']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It's getting hot 10.10.10.4",
                                  "email-content": "Your temperature is rising 10.10.10.4",
                                  "aggregation": false,
                                  "period": 5,
                                  "number-events": 5
                                }
                              }
                            ]
                          }
                        ],
                        "act-rules": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/act-rules[name='ind_act_rule_d40bacfe_ad35_44e6_acc7_d925ab1a4d83']"
                            },
                            "name": "ind_act_rule_d40bacfe_ad35_44e6_acc7_d925ab1a4d83",
                            "definition": "{\"name\":\"ind_act_rule_d40bacfe_ad35_44e6_acc7_d925ab1a4d83\",\"description\":\"\\\"max\\\" temp on '10.10.10.4'\",\"owner\":\"MaxTempNfmp104\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-ce390286-fe1f-4d63-8d7b-aea6edb673d4\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/temperature\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"MaxTempNfmp104\"},{\"full-name\":\"temperature\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"temperature\"],\"window-period\":60,\"aggregations\":[{\"operation\":\"avg\",\"arguments\":[\"temperature\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/act-rules[name='ind_compute_output_a2b34a60_0da7_4399_bdb5_46d15eefb2ef']"
                            },
                            "name": "ind_compute_output_a2b34a60_0da7_4399_bdb5_46d15eefb2ef",
                            "definition": "{\"name\":\"ind_compute_output_a2b34a60_0da7_4399_bdb5_46d15eefb2ef\",\"description\":\"Aggregation Operation Act Rule\",\"owner\":\"MaxTempNfmp104\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_d40bacfe_ad35_44e6_acc7_d925ab1a4d83\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"temperature_avg\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"mixedOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"mixed-expression-operator\",\"mixed-expression-operator\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"eventTime\",\"name\"],\"in-property\":[\"temperature_avg\"],\"resource-property\":\"networkDeviceId\",\"mixed-operations\":[{\"aggregation-operation\":\"max\",\"aggregation-operation-argument\":\"temperature_avg\",\"result-property\":\"result1\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-aggregation-operation\",\"input-process\":[\"mixedOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']/act-rules[name='ind_threshold_bbc81edd_9f8b_41c8_acc4_de7f607428da']"
                            },
                            "name": "ind_threshold_bbc81edd_9f8b_41c8_acc4_de7f607428da",
                            "definition": "{\"name\":\"ind_threshold_bbc81edd_9f8b_41c8_acc4_de7f607428da\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"MaxTempNfmp104\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_a2b34a60_0da7_4399_bdb5_46d15eefb2ef\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"MaxTempNfmp104_60_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"MaxTempNfmp104_60_increasing\",\"threshold-value-decimal\":\"60\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"MaxTempNfmp104_60_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"Temperature is a rising on 10.10.10.4\"},\"action-name\":\"threshold_60_increasing_kafka_action1\",\"process-name\":\"MaxTempNfmp104_60_increasing\"},{\"type\":\"alarm\",\"alarm\":{\"severity\":\"critical\",\"alarm-name\":\"IndicatorThresholdCrossingEvent\",\"alarm-type\":\"qualityOfServiceAlarm\",\"probable-cause\":\"thresholdCrossed\",\"additional-text\":\"Threshold Crossing:\",\"additional-text-props\":[{\"property\":\"payload.threshold\",\"displayed-name\":\"threshold-value\"},{\"property\":\"payload.direction\",\"displayed-name\":\"direction\"},{\"property\":\"payload.value\",\"displayed-name\":\"value\"},{\"property\":\"source.eventTime\",\"displayed-name\":\"event-time\"},{\"property\":\"source.networkDeviceId\",\"displayed-name\":\"resource\"}],\"object-fdn\":\"fdn:yang:nsp-indicator:/nsp-indicator:rta-indicator-rules/rule[name='MaxTempNfmp104']\",\"object-name\":\"MaxTempNfmp104\",\"object-type\":\"nsp-indicator:rta-indicator-rules/rule\",\"source-type\":\"nsp\",\"key-prefix\":\"fm.Alarm\",\"key-properties\":[\"$ALARM_NAME\",\"source.name\"],\"ne-name-property\":null,\"ne-id-property\":null,\"last-time-detected-property\":\"source.eventTime\",\"last-time-detected-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"key-fdn-namespace\":\"nsp-indicator\",\"implicitly-cleared\":false},\"action-name\":\"threshold_60_increasing_alarm_action2\",\"process-name\":\"MaxTempNfmp104_60_increasing\"},{\"type\":\"email\",\"email\":{\"aggregation\":false,\"period\":5,\"email-address\":\"userid@user.com\",\"email-subject\":\"Hmmmmm, It's getting hot 10.10.10.4\",\"email-content\":\"Your temperature is rising 10.10.10.4\",\"number-events\":5},\"action-name\":\"threshold_60_increasing_email_action3\",\"process-name\":\"MaxTempNfmp104_60_increasing\"}]}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']"
                        },
                        "name": "MinTempNfmp105",
                        "description": "min' temp\" on 10.10.10.5",
                        "units-name": "CELSIUS",
                        "telemetry-type": "telemetry:/base/hardware/temperature",
                        "formula": "min({temperature_avg})",
                        "multiple-output": false,
                        "window-duration": "PT5M",
                        "enabled": true,
                        "collection-interval": 50,
                        "subscription-filter": "/nsp-equipment:network/network-element[ne-id='10.10.10.5']",
                        "subscription-id": "ia-532a1a77-5b35-44b6-bce7-af1421d3a627",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/counters[name='temperature'][function='avg']"
                            },
                            "name": "temperature",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/thresholds[threshold-value-decimal='50'][direction='increasing']"
                            },
                            "threshold-value-decimal": "50",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='threshold_50_increasing_kafka_action1']"
                                },
                                "name": "threshold_50_increasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='threshold_50_increasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Temperature is a rising 10.10.10.5"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='threshold_50_increasing_alarm_action2']"
                                },
                                "name": "threshold_50_increasing_alarm_action2",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='threshold_50_increasing_alarm_action2']/alarm"
                                  },
                                  "severity": "major"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='threshold_50_increasing_email_action3']"
                                },
                                "name": "threshold_50_increasing_email_action3",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/thresholds[threshold-value-decimal='50'][direction='increasing']/actions[name='threshold_50_increasing_email_action3']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It's getting hot 10.10.10.5",
                                  "email-content": "Your temperature is rising 10.10.10.5",
                                  "aggregation": false,
                                  "period": 5,
                                  "number-events": 5
                                }
                              }
                            ]
                          }
                        ],
                        "act-rules": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/act-rules[name='ind_act_rule_fd2f1787_9f49_422d_a52f_d32bd3461f3e']"
                            },
                            "name": "ind_act_rule_fd2f1787_9f49_422d_a52f_d32bd3461f3e",
                            "definition": "{\"name\":\"ind_act_rule_fd2f1787_9f49_422d_a52f_d32bd3461f3e\",\"description\":\"min' temp\\\" on 10.10.10.5\",\"owner\":\"MinTempNfmp105\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-532a1a77-5b35-44b6-bce7-af1421d3a627\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/temperature\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"MinTempNfmp105\"},{\"full-name\":\"temperature\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"temperature\"],\"window-period\":300,\"aggregations\":[{\"operation\":\"avg\",\"arguments\":[\"temperature\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/act-rules[name='ind_compute_output_1514708d_8ffb_43ce_9d37_853affd4ade3']"
                            },
                            "name": "ind_compute_output_1514708d_8ffb_43ce_9d37_853affd4ade3",
                            "definition": "{\"name\":\"ind_compute_output_1514708d_8ffb_43ce_9d37_853affd4ade3\",\"description\":\"Aggregation Operation Act Rule\",\"owner\":\"MinTempNfmp105\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_fd2f1787_9f49_422d_a52f_d32bd3461f3e\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"temperature_avg\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"mixedOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"mixed-expression-operator\",\"mixed-expression-operator\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"eventTime\",\"name\"],\"in-property\":[\"temperature_avg\"],\"resource-property\":\"networkDeviceId\",\"mixed-operations\":[{\"aggregation-operation\":\"min\",\"aggregation-operation-argument\":\"temperature_avg\",\"result-property\":\"result1\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-aggregation-operation\",\"input-process\":[\"mixedOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']/act-rules[name='ind_threshold_8a7a8614_674c_4ac7_ab05_33005a580924']"
                            },
                            "name": "ind_threshold_8a7a8614_674c_4ac7_ab05_33005a580924",
                            "definition": "{\"name\":\"ind_threshold_8a7a8614_674c_4ac7_ab05_33005a580924\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"MinTempNfmp105\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_1514708d_8ffb_43ce_9d37_853affd4ade3\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"MinTempNfmp105_50_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"MinTempNfmp105_50_increasing\",\"threshold-value-decimal\":\"50\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"MinTempNfmp105_50_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"Temperature is a rising 10.10.10.5\"},\"action-name\":\"threshold_50_increasing_kafka_action1\",\"process-name\":\"MinTempNfmp105_50_increasing\"},{\"type\":\"alarm\",\"alarm\":{\"severity\":\"major\",\"alarm-name\":\"IndicatorThresholdCrossingEvent\",\"alarm-type\":\"qualityOfServiceAlarm\",\"probable-cause\":\"thresholdCrossed\",\"additional-text\":\"Threshold Crossing:\",\"additional-text-props\":[{\"property\":\"payload.threshold\",\"displayed-name\":\"threshold-value\"},{\"property\":\"payload.direction\",\"displayed-name\":\"direction\"},{\"property\":\"payload.value\",\"displayed-name\":\"value\"},{\"property\":\"source.eventTime\",\"displayed-name\":\"event-time\"},{\"property\":\"source.networkDeviceId\",\"displayed-name\":\"resource\"}],\"object-fdn\":\"fdn:yang:nsp-indicator:/nsp-indicator:rta-indicator-rules/rule[name='MinTempNfmp105']\",\"object-name\":\"MinTempNfmp105\",\"object-type\":\"nsp-indicator:rta-indicator-rules/rule\",\"source-type\":\"nsp\",\"key-prefix\":\"fm.Alarm\",\"key-properties\":[\"$ALARM_NAME\",\"source.name\"],\"ne-name-property\":null,\"ne-id-property\":null,\"last-time-detected-property\":\"source.eventTime\",\"last-time-detected-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"key-fdn-namespace\":\"nsp-indicator\",\"implicitly-cleared\":false},\"action-name\":\"threshold_50_increasing_alarm_action2\",\"process-name\":\"MinTempNfmp105_50_increasing\"},{\"type\":\"email\",\"email\":{\"aggregation\":false,\"period\":5,\"email-address\":\"userid@user.com\",\"email-subject\":\"Hmmmmm, It's getting hot 10.10.10.5\",\"email-content\":\"Your temperature is rising 10.10.10.5\",\"number-events\":5},\"action-name\":\"threshold_50_increasing_email_action3\",\"process-name\":\"MinTempNfmp105_50_increasing\"}]}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']"
                        },
                        "name": "AvgTempNfmp105",
                        "description": "avg temp on 10.10.10.5",
                        "units-name": "deg C",
                        "telemetry-type": "telemetry:/base/hardware/temperature",
                        "formula": "avg({temperature_avg})",
                        "multiple-output": false,
                        "window-duration": "PT15M",
                        "enabled": true,
                        "collection-interval": 40,
                        "subscription-filter": "/nsp-equipment:network/network-element[ne-id='10.10.10.5']",
                        "subscription-id": "ia-31d09333-989a-4df3-8806-9ac357cc69f2",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/counters[name='temperature'][function='avg']"
                            },
                            "name": "temperature",
                            "function": "avg"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/thresholds[threshold-value-decimal='40'][direction='increasing']"
                            },
                            "threshold-value-decimal": "40",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='threshold_40_increasing_kafka_action1']"
                                },
                                "name": "threshold_40_increasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='threshold_40_increasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Temperature is a rising 10.10.10.5"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='threshold_40_increasing_alarm_action2']"
                                },
                                "name": "threshold_40_increasing_alarm_action2",
                                "type": "alarm",
                                "alarm": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/alarm",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='threshold_40_increasing_alarm_action2']/alarm"
                                  },
                                  "severity": "minor"
                                }
                              },
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='threshold_40_increasing_email_action3']"
                                },
                                "name": "threshold_40_increasing_email_action3",
                                "type": "email",
                                "email": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/email",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/thresholds[threshold-value-decimal='40'][direction='increasing']/actions[name='threshold_40_increasing_email_action3']/email"
                                  },
                                  "email-address": "userid@user.com",
                                  "email-subject": "Hmmmmm, It\"s getting hot 10.10.10.5",
                                  "email-content": "Your temperature is rising 10.10.10.5",
                                  "aggregation": true,
                                  "period": 3,
                                  "number-events": 4
                                }
                              }
                            ]
                          }
                        ],
                        "act-rules": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/act-rules[name='ind_act_rule_3c47011d_ac7d_4953_9f64_77922211f5f4']"
                            },
                            "name": "ind_act_rule_3c47011d_ac7d_4953_9f64_77922211f5f4",
                            "definition": "{\"name\":\"ind_act_rule_3c47011d_ac7d_4953_9f64_77922211f5f4\",\"description\":\"avg temp on 10.10.10.5\",\"owner\":\"AvgTempNfmp105\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-31d09333-989a-4df3-8806-9ac357cc69f2\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/temperature\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"AvgTempNfmp105\"},{\"full-name\":\"temperature\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"temperature\"],\"window-period\":900,\"aggregations\":[{\"operation\":\"avg\",\"arguments\":[\"temperature\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/act-rules[name='ind_compute_output_7a55d903_e779_48b9_ac88_7ff48dc27d0f']"
                            },
                            "name": "ind_compute_output_7a55d903_e779_48b9_ac88_7ff48dc27d0f",
                            "definition": "{\"name\":\"ind_compute_output_7a55d903_e779_48b9_ac88_7ff48dc27d0f\",\"description\":\"Aggregation Operation Act Rule\",\"owner\":\"AvgTempNfmp105\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_3c47011d_ac7d_4953_9f64_77922211f5f4\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"temperature_avg\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"mixedOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"mixed-expression-operator\",\"mixed-expression-operator\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"eventTime\",\"name\"],\"in-property\":[\"temperature_avg\"],\"resource-property\":\"networkDeviceId\",\"mixed-operations\":[{\"aggregation-operation\":\"avg\",\"aggregation-operation-argument\":\"temperature_avg\",\"result-property\":\"result1\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-aggregation-operation\",\"input-process\":[\"mixedOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']/act-rules[name='ind_threshold_4b8ec54d_e0b5_4729_9eb7_6937eb923897']"
                            },
                            "name": "ind_threshold_4b8ec54d_e0b5_4729_9eb7_6937eb923897",
                            "definition": "{\"name\":\"ind_threshold_4b8ec54d_e0b5_4729_9eb7_6937eb923897\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"AvgTempNfmp105\",\"keepalive\":360,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_7a55d903_e779_48b9_ac88_7ff48dc27d0f\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"AvgTempNfmp105_40_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"AvgTempNfmp105_40_increasing\",\"threshold-value-decimal\":\"40\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"AvgTempNfmp105_40_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"Temperature is a rising 10.10.10.5\"},\"action-name\":\"threshold_40_increasing_kafka_action1\",\"process-name\":\"AvgTempNfmp105_40_increasing\"},{\"type\":\"alarm\",\"alarm\":{\"severity\":\"minor\",\"alarm-name\":\"IndicatorThresholdCrossingEvent\",\"alarm-type\":\"qualityOfServiceAlarm\",\"probable-cause\":\"thresholdCrossed\",\"additional-text\":\"Threshold Crossing:\",\"additional-text-props\":[{\"property\":\"payload.threshold\",\"displayed-name\":\"threshold-value\"},{\"property\":\"payload.direction\",\"displayed-name\":\"direction\"},{\"property\":\"payload.value\",\"displayed-name\":\"value\"},{\"property\":\"source.eventTime\",\"displayed-name\":\"event-time\"},{\"property\":\"source.networkDeviceId\",\"displayed-name\":\"resource\"}],\"object-fdn\":\"fdn:yang:nsp-indicator:/nsp-indicator:rta-indicator-rules/rule[name='AvgTempNfmp105']\",\"object-name\":\"AvgTempNfmp105\",\"object-type\":\"nsp-indicator:rta-indicator-rules/rule\",\"source-type\":\"nsp\",\"key-prefix\":\"fm.Alarm\",\"key-properties\":[\"$ALARM_NAME\",\"source.name\"],\"ne-name-property\":null,\"ne-id-property\":null,\"last-time-detected-property\":\"source.eventTime\",\"last-time-detected-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"key-fdn-namespace\":\"nsp-indicator\",\"implicitly-cleared\":false},\"action-name\":\"threshold_40_increasing_alarm_action2\",\"process-name\":\"AvgTempNfmp105_40_increasing\"},{\"type\":\"email\",\"email\":{\"aggregation\":true,\"period\":3,\"email-address\":\"userid@user.com\",\"email-subject\":\"Hmmmmm, It\\\"s getting hot 10.10.10.5\",\"email-content\":\"Your temperature is rising 10.10.10.5\",\"number-events\":4},\"action-name\":\"threshold_40_increasing_email_action3\",\"process-name\":\"AvgTempNfmp105_40_increasing\"}]}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']"
                        },
                        "name": "SumOctets 10.10.10.4",
                        "description": "sum tx, rx of all ports on 10.10.10.4",
                        "units-name": "Total octets",
                        "telemetry-type": "telemetry:/base/interfaces/interface",
                        "formula": "sum({transmitted-octets-periodic_sum} + {received-octets-periodic_sum})",
                        "multiple-output": false,
                        "window-duration": "PT5M",
                        "enabled": true,
                        "collection-interval": 60,
                        "subscription-filter": "/nsp-equipment:network/network-element[ne-id='10.10.10.4']",
                        "subscription-id": "ia-5624bc33-8f5e-465d-ad8a-c7a63b815b61",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/counters[name='transmitted-octets-periodic'][function='sum']"
                            },
                            "name": "transmitted-octets-periodic",
                            "function": "sum"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/counters[name='received-octets-periodic'][function='sum']"
                            },
                            "name": "received-octets-periodic",
                            "function": "sum"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/thresholds[threshold-value-decimal='100000'][direction='increasing']"
                            },
                            "threshold-value-decimal": "100000",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/thresholds[threshold-value-decimal='100000'][direction='increasing']/actions[name='threshold_100000_increasing_kafka_action1']"
                                },
                                "name": "threshold_100000_increasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/thresholds[threshold-value-decimal='100000'][direction='increasing']/actions[name='threshold_100000_increasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "sum(tx+rx) on 10.10.10.4 increasing"
                                }
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/thresholds[threshold-value-decimal='1000'][direction='decreasing']"
                            },
                            "threshold-value-decimal": "1000",
                            "direction": "decreasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/thresholds[threshold-value-decimal='1000'][direction='decreasing']/actions[name='threshold_1000_decreasing_kafka_action1']"
                                },
                                "name": "threshold_1000_decreasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/thresholds[threshold-value-decimal='1000'][direction='decreasing']/actions[name='threshold_1000_decreasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "sum(tx+rx) on 10.10.10.4 decreasing"
                                }
                              }
                            ]
                          }
                        ],
                        "act-rules": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/act-rules[name='ind_act_rule_e27caad4_e947_4533_a965_9cc885919d54']"
                            },
                            "name": "ind_act_rule_e27caad4_e947_4533_a965_9cc885919d54",
                            "definition": "{\"name\":\"ind_act_rule_e27caad4_e947_4533_a965_9cc885919d54\",\"description\":\"sum tx, rx of all ports on 10.10.10.4\",\"owner\":\"SumOctets 10.10.10.4\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-5624bc33-8f5e-465d-ad8a-c7a63b815b61\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/transmitted-octets-periodic\",\"type\":\"decimal(30,4)\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/received-octets-periodic\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"SumOctets 10.10.10.4\"},{\"full-name\":\"transmitted-octets-periodic\"},{\"full-name\":\"received-octets-periodic\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"transmitted-octets-periodic\",\"received-octets-periodic\"],\"window-period\":300,\"aggregations\":[{\"operation\":\"sum\",\"arguments\":[\"transmitted-octets-periodic\",\"received-octets-periodic\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/act-rules[name='ind_compute_output_75452ee1_16c9_4af4_a880_24987ffd61b7']"
                            },
                            "name": "ind_compute_output_75452ee1_16c9_4af4_a880_24987ffd61b7",
                            "definition": "{\"name\":\"ind_compute_output_75452ee1_16c9_4af4_a880_24987ffd61b7\",\"description\":\"Aggregation Operation Act Rule\",\"owner\":\"SumOctets 10.10.10.4\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_e27caad4_e947_4533_a965_9cc885919d54\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"transmitted-octets-periodic_sum\",\"type\":\"decimal(30,4)\"},{\"full-name\":\"received-octets-periodic_sum\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"mixedOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"mixed-expression-operator\",\"mixed-expression-operator\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"eventTime\",\"name\"],\"in-property\":[\"transmitted-octets-periodic_sum\",\"received-octets-periodic_sum\"],\"resource-property\":\"networkDeviceId\",\"mixed-operations\":[{\"aggregation-operation\":\"sum\",\"aggregation-arithmetic-operations\":[{\"operation\":\"addition\",\"arguments\":[\"transmitted-octets-periodic_sum\",\"received-octets-periodic_sum\"],\"result-property\":\"result1\"}],\"result-property\":\"result2\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-aggregation-operation\",\"input-process\":[\"mixedOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.4']/act-rules[name='ind_threshold_acdf63e4_fdc5_4241_b430_8658ddc970be']"
                            },
                            "name": "ind_threshold_acdf63e4_fdc5_4241_b430_8658ddc970be",
                            "definition": "{\"name\":\"ind_threshold_acdf63e4_fdc5_4241_b430_8658ddc970be\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"SumOctets 10.10.10.4\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_75452ee1_16c9_4af4_a880_24987ffd61b7\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"SumOctets_10.10.10.4_100000_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"SumOctets_10.10.10.4_100000_increasing\",\"threshold-value-decimal\":\"100000\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"SumOctets_10.10.10.4_100000_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}},{\"name\":\"SumOctets_10.10.10.4_1000_decreasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"SumOctets_10.10.10.4_1000_decreasing\",\"threshold-value-decimal\":\"1000\",\"direction\":\"decreasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-2\",\"input-process\":[\"SumOctets_10.10.10.4_1000_decreasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"sum(tx+rx) on 10.10.10.4 increasing\"},\"action-name\":\"threshold_100000_increasing_kafka_action1\",\"process-name\":\"SumOctets_10.10.10.4_100000_increasing\"},{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"sum(tx+rx) on 10.10.10.4 decreasing\"},\"action-name\":\"threshold_1000_decreasing_kafka_action1\",\"process-name\":\"SumOctets_10.10.10.4_1000_decreasing\"}]}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']"
                        },
                        "name": "SumOctets 10.10.10.5 Two Ports",
                        "description": "sum tx, rx of port 1/1/1 and 1/1/2 on 10.10.10.5",
                        "units-name": "Total octets",
                        "telemetry-type": "telemetry:/base/interfaces/interface",
                        "formula": "sum({received-octets-periodic_sum}+{transmitted-octets-periodic_sum})",
                        "multiple-output": false,
                        "window-duration": "PT1M",
                        "enabled": true,
                        "collection-interval": 30,
                        "subscription-filter": "/network-device-mgr:network-devices/network-device[name='10.10.10.5']/root/nokia-state:state/port[port-id='1/1/1'] | /network-device-mgr:network-devices/network-device[name='10.10.10.5']/root/nokia-state:state/port[port-id='1/1/2']",
                        "subscription-id": "ia-d0b25515-2054-4418-8f86-191f2fc4c14c",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/counters[name='transmitted-octets-periodic'][function='sum']"
                            },
                            "name": "transmitted-octets-periodic",
                            "function": "sum"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/counters[name='received-octets-periodic'][function='sum']"
                            },
                            "name": "received-octets-periodic",
                            "function": "sum"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/thresholds[threshold-value-decimal='200000'][direction='increasing']"
                            },
                            "threshold-value-decimal": "200000",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/thresholds[threshold-value-decimal='200000'][direction='increasing']/actions[name='threshold_200000_increasing_kafka_action1']"
                                },
                                "name": "threshold_200000_increasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/thresholds[threshold-value-decimal='200000'][direction='increasing']/actions[name='threshold_200000_increasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Total octets above 200000 threshold setting 10.10.10.5 1/1/1 and 1/1/2"
                                }
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/thresholds[threshold-value-decimal='20000'][direction='decreasing']"
                            },
                            "threshold-value-decimal": "20000",
                            "direction": "decreasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/thresholds[threshold-value-decimal='20000'][direction='decreasing']/actions[name='threshold_20000_decreasing_kafka_action1']"
                                },
                                "name": "threshold_20000_decreasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/thresholds[threshold-value-decimal='20000'][direction='decreasing']/actions[name='threshold_20000_decreasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "Total octets below 20000 threshold setting 10.10.10.5 1/1/1 and 1/1/2"
                                }
                              }
                            ]
                          }
                        ],
                        "act-rules": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/act-rules[name='ind_act_rule_b78b6937_23f6_4c73_ba9a_a29c994db9ed']"
                            },
                            "name": "ind_act_rule_b78b6937_23f6_4c73_ba9a_a29c994db9ed",
                            "definition": "{\"name\":\"ind_act_rule_b78b6937_23f6_4c73_ba9a_a29c994db9ed\",\"description\":\"sum tx, rx of port 1/1/1 and 1/1/2 on 10.10.10.5\",\"owner\":\"SumOctets 10.10.10.5 Two Ports\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-d0b25515-2054-4418-8f86-191f2fc4c14c\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/transmitted-octets-periodic\",\"type\":\"decimal(30,4)\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/received-octets-periodic\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"SumOctets 10.10.10.5 Two Ports\"},{\"full-name\":\"transmitted-octets-periodic\"},{\"full-name\":\"received-octets-periodic\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"transmitted-octets-periodic\",\"received-octets-periodic\"],\"window-period\":60,\"aggregations\":[{\"operation\":\"sum\",\"arguments\":[\"transmitted-octets-periodic\",\"received-octets-periodic\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/act-rules[name='ind_compute_output_5202a69a_5b7a_4cc7_bc69_de163175a70b']"
                            },
                            "name": "ind_compute_output_5202a69a_5b7a_4cc7_bc69_de163175a70b",
                            "definition": "{\"name\":\"ind_compute_output_5202a69a_5b7a_4cc7_bc69_de163175a70b\",\"description\":\"Aggregation Operation Act Rule\",\"owner\":\"SumOctets 10.10.10.5 Two Ports\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_b78b6937_23f6_4c73_ba9a_a29c994db9ed\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"transmitted-octets-periodic_sum\",\"type\":\"decimal(30,4)\"},{\"full-name\":\"received-octets-periodic_sum\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"mixedOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"mixed-expression-operator\",\"mixed-expression-operator\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"eventTime\",\"name\"],\"in-property\":[\"transmitted-octets-periodic_sum\",\"received-octets-periodic_sum\"],\"resource-property\":\"networkDeviceId\",\"mixed-operations\":[{\"aggregation-operation\":\"sum\",\"aggregation-arithmetic-operations\":[{\"operation\":\"addition\",\"arguments\":[\"received-octets-periodic_sum\",\"transmitted-octets-periodic_sum\"],\"result-property\":\"result1\"}],\"result-property\":\"result2\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-aggregation-operation\",\"input-process\":[\"mixedOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='SumOctets 10.10.10.5 Two Ports']/act-rules[name='ind_threshold_67b61362_c933_49d2_be46_2478f939f0d6']"
                            },
                            "name": "ind_threshold_67b61362_c933_49d2_be46_2478f939f0d6",
                            "definition": "{\"name\":\"ind_threshold_67b61362_c933_49d2_be46_2478f939f0d6\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"SumOctets 10.10.10.5 Two Ports\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_5202a69a_5b7a_4cc7_bc69_de163175a70b\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"SumOctets_10.10.10.5_Two_Ports_200000_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"SumOctets_10.10.10.5_Two_Ports_200000_increasing\",\"threshold-value-decimal\":\"200000\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"SumOctets_10.10.10.5_Two_Ports_200000_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}},{\"name\":\"SumOctets_10.10.10.5_Two_Ports_20000_decreasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"SumOctets_10.10.10.5_Two_Ports_20000_decreasing\",\"threshold-value-decimal\":\"20000\",\"direction\":\"decreasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-2\",\"input-process\":[\"SumOctets_10.10.10.5_Two_Ports_20000_decreasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"Total octets above 200000 threshold setting 10.10.10.5 1/1/1 and 1/1/2\"},\"action-name\":\"threshold_200000_increasing_kafka_action1\",\"process-name\":\"SumOctets_10.10.10.5_Two_Ports_200000_increasing\"},{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"Total octets below 20000 threshold setting 10.10.10.5 1/1/1 and 1/1/2\"},\"action-name\":\"threshold_20000_decreasing_kafka_action1\",\"process-name\":\"SumOctets_10.10.10.5_Two_Ports_20000_decreasing\"}]}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                          "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']"
                        },
                        "name": "Octets 10.10.10.5",
                        "description": "tx, rx of all ports on 10.10.10.5",
                        "units-name": "bytes",
                        "telemetry-type": "telemetry:/base/interfaces/interface",
                        "formula": "({transmitted-octets-periodic_min} + {received-octets-periodic_min})",
                        "multiple-output": true,
                        "window-duration": "PT5M",
                        "enabled": false,
                        "collection-interval": 60,
                        "subscription-filter": "/nsp-equipment:network/network-element[ne-id='10.10.10.5']",
                        "subscription-id": "ia-6eafb190-8762-42e6-b22f-c2f4125a2db8",
                        "counters": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/counters[name='transmitted-octets-periodic'][function='min']"
                            },
                            "name": "transmitted-octets-periodic",
                            "function": "min"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/counters[name='received-octets-periodic'][function='min']"
                            },
                            "name": "received-octets-periodic",
                            "function": "min"
                          }
                        ],
                        "thresholds": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/thresholds[threshold-value-decimal='100000'][direction='increasing']"
                            },
                            "threshold-value-decimal": "100000",
                            "direction": "increasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/thresholds[threshold-value-decimal='100000'][direction='increasing']/actions[name='threshold_100000_increasing_kafka_action1']"
                                },
                                "name": "threshold_100000_increasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/thresholds[threshold-value-decimal='100000'][direction='increasing']/actions[name='threshold_100000_increasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "10.10.10.5 (tx+rx) increasing"
                                }
                              }
                            ]
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/thresholds[threshold-value-decimal='1000'][direction='decreasing']"
                            },
                            "threshold-value-decimal": "1000",
                            "direction": "decreasing",
                            "actions": [
                              {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/thresholds[threshold-value-decimal='1000'][direction='decreasing']/actions[name='threshold_1000_decreasing_kafka_action1']"
                                },
                                "name": "threshold_1000_decreasing_kafka_action1",
                                "type": "kafka",
                                "kafka": {
                                  "@": {
                                    "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                    "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/thresholds[threshold-value-decimal='1000'][direction='decreasing']/actions[name='threshold_1000_decreasing_kafka_action1']/kafka"
                                  },
                                  "topic-name": "nsp-act-action-event",
                                  "topic-content": "10.10.10.5 (tx+rx) decreasing"
                                }
                              }
                            ]
                          }
                        ],
                        "act-rules": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/act-rules[name='ind_act_rule_1fa486f1_ec47_473a_b903_541479fbb1c3']"
                            },
                            "name": "ind_act_rule_1fa486f1_ec47_473a_b903_541479fbb1c3",
                            "definition": "{\"name\":\"ind_act_rule_1fa486f1_ec47_473a_b903_541479fbb1c3\",\"description\":\"tx, rx of all ports on 10.10.10.5\",\"owner\":\"Octets 10.10.10.5\",\"keepalive\":120,\"enabled\":false,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-6eafb190-8762-42e6-b22f-c2f4125a2db8\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/transmitted-octets-periodic\",\"type\":\"decimal(30,4)\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/received-octets-periodic\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"Octets 10.10.10.5\"},{\"full-name\":\"transmitted-octets-periodic\"},{\"full-name\":\"received-octets-periodic\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"transmitted-octets-periodic\",\"received-octets-periodic\"],\"window-period\":300,\"aggregations\":[{\"operation\":\"min\",\"arguments\":[\"transmitted-octets-periodic\",\"received-octets-periodic\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/act-rules[name='ind_compute_output_79d3f1c0_3497_40ac_9377_7033acb87bd4']"
                            },
                            "name": "ind_compute_output_79d3f1c0_3497_40ac_9377_7033acb87bd4",
                            "definition": "{\"name\":\"ind_compute_output_79d3f1c0_3497_40ac_9377_7033acb87bd4\",\"description\":\"Arithmetic Operation Act Rule\",\"owner\":\"Octets 10.10.10.5\",\"keepalive\":120,\"enabled\":false,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_1fa486f1_ec47_473a_b903_541479fbb1c3\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"transmitted-octets-periodic_min\",\"type\":\"decimal(30,4)\"},{\"full-name\":\"received-octets-periodic_min\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"arithmeticOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"arithmetic-operations\",\"arithmetic-operations\":{\"in-object-key-property\":[\"networkDeviceId\",\"eventTime\",\"name\"],\"pass-through-property\":[\"neId\",\"neName\"],\"in-property\":[\"transmitted-octets-periodic_min\",\"received-octets-periodic_min\"],\"operations\":[{\"operation\":\"addition\",\"arguments\":[\"transmitted-octets-periodic_min\",\"received-octets-periodic_min\"],\"result-property\":\"result1\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-arithmetic-operation\",\"input-process\":[\"arithmeticOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                              "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='Octets 10.10.10.5']/act-rules[name='ind_threshold_0c58e098_4c62_4878_8fda_c0ab70fae2fb']"
                            },
                            "name": "ind_threshold_0c58e098_4c62_4878_8fda_c0ab70fae2fb",
                            "definition": "{\"name\":\"ind_threshold_0c58e098_4c62_4878_8fda_c0ab70fae2fb\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"Octets 10.10.10.5\",\"keepalive\":120,\"enabled\":false,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_79d3f1c0_3497_40ac_9377_7033acb87bd4\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"Octets_10.10.10.5_100000_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"Octets_10.10.10.5_100000_increasing\",\"threshold-value-decimal\":\"100000\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"Octets_10.10.10.5_100000_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}},{\"name\":\"Octets_10.10.10.5_1000_decreasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"Octets_10.10.10.5_1000_decreasing\",\"threshold-value-decimal\":\"1000\",\"direction\":\"decreasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-2\",\"input-process\":[\"Octets_10.10.10.5_1000_decreasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"10.10.10.5 (tx+rx) increasing\"},\"action-name\":\"threshold_100000_increasing_kafka_action1\",\"process-name\":\"Octets_10.10.10.5_100000_increasing\"},{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"10.10.10.5 (tx+rx) decreasing\"},\"action-name\":\"threshold_1000_decreasing_kafka_action1\",\"process-name\":\"Octets_10.10.10.5_1000_decreasing\"}]}"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-indicator:rta-indicator-rules/{pathv1}": {
      "put": {
        "tags": [
          "IndicatorRules"
        ],
        "operationId": "updateIndicatorRule",
        "description": "The parameters and request body are for method: updateIndicatorRule. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IndicatorRules"
        ],
        "operationId": "deleteIndicatorRule",
        "description": "The parameters and request body are for method: deleteIndicatorRule. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "get": {
        "tags": [
          "IndicatorRules"
        ],
        "operationId": "getSpecificIndicatorRule",
        "description": "The parameters and request body are for method: getSpecificIndicatorRule. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-indicator:rule": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "units-name": {
                            "type": "string"
                          },
                          "telemetry-type": {
                            "type": "string"
                          },
                          "formula": {
                            "type": "string"
                          },
                          "multiple-output": {
                            "type": "boolean"
                          },
                          "window-duration": {
                            "type": "string"
                          },
                          "enabled": {
                            "type": "boolean"
                          },
                          "collection-interval": {
                            "type": "number"
                          },
                          "subscription-id": {
                            "type": "string"
                          },
                          "counters": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "name": {
                                  "type": "string"
                                },
                                "function": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "thresholds": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "threshold-value-decimal": {
                                  "type": "string"
                                },
                                "direction": {
                                  "type": "string"
                                },
                                "actions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "@": {
                                        "type": "object",
                                        "properties": {
                                          "nsp-model:schema-nodeid": {
                                            "type": "string"
                                          },
                                          "nsp-model:identifier": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "type": {
                                        "type": "string"
                                      },
                                      "kafka": {
                                        "type": "object",
                                        "properties": {
                                          "@": {
                                            "type": "object",
                                            "properties": {
                                              "nsp-model:schema-nodeid": {
                                                "type": "string"
                                              },
                                              "nsp-model:identifier": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "topic-name": {
                                            "type": "string"
                                          },
                                          "topic-content": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "act-rules": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "@": {
                                  "type": "object",
                                  "properties": {
                                    "nsp-model:schema-nodeid": {
                                      "type": "string"
                                    },
                                    "nsp-model:identifier": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "name": {
                                  "type": "string"
                                },
                                "definition": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-indicator:rule": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule",
                        "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']"
                      },
                      "name": "AvgCpuAllNodesAllActions",
                      "description": "avg cpu from all nodes",
                      "units-name": "%",
                      "telemetry-type": "telemetry:/base/system-info/system",
                      "formula": "avg({cpu-usage_avg})",
                      "multiple-output": false,
                      "window-duration": "PT1M",
                      "enabled": true,
                      "collection-interval": 30,
                      "subscription-id": "ia-f95ea845-3569-4251-9c2b-2221c26b00cb",
                      "counters": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/counters",
                            "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/counters[name='cpu-usage'][function='avg']"
                          },
                          "name": "cpu-usage",
                          "function": "avg"
                        }
                      ],
                      "thresholds": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds",
                            "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']"
                          },
                          "threshold-value-decimal": "20",
                          "direction": "increasing",
                          "actions": [
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_kafka_action1']"
                              },
                              "name": "threshold_20_increasing_kafka_action1",
                              "type": "kafka",
                              "kafka": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/kafka",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_kafka_action1']/kafka"
                                },
                                "topic-name": "nsp-act-action-event",
                                "topic-content": "CPU is a rising"
                              }
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_alarm_action2']"
                              },
                              "name": "threshold_20_increasing_alarm_action2",
                              "type": "alarm",
                              "alarm": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/alarm",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_alarm_action2']/alarm"
                                },
                                "severity": "major"
                              }
                            },
                            {
                              "@": {
                                "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions",
                                "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_email_action3']"
                              },
                              "name": "threshold_20_increasing_email_action3",
                              "type": "email",
                              "email": {
                                "@": {
                                  "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/thresholds/actions/email",
                                  "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/thresholds[threshold-value-decimal='20'][direction='increasing']/actions[name='threshold_20_increasing_email_action3']/email"
                                },
                                "email-address": "userid@user.com",
                                "email-subject": "Hmmmmm, It's getting hot",
                                "email-content": "Your temperature is rising.",
                                "aggregation": false,
                                "period": 5,
                                "number-events": 5
                              }
                            }
                          ]
                        }
                      ],
                      "act-rules": [
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                            "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/act-rules[name='ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d']"
                          },
                          "name": "ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d",
                          "definition": "{\"name\":\"ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d\",\"description\":\"avg cpu from all nodes\",\"owner\":\"AvgCpuAllNodesAllActions\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ia-f95ea845-3569-4251-9c2b-2221c26b00cb\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta-indicator-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"data/ietf-restconf:notification/eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/subscriptionId\",\"type\":\"string\"},{\"full-name\":\"data/ietf-restconf:notification/nsp-kpi:real_time_rtindr-event/cpu-usage\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"act-event-adapter-source\",\"input-process\":[\"telemetrySource\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"eventTime\"},{\"full-name\":\"networkDeviceId\"},{\"full-name\":\"neId\"},{\"full-name\":\"neName\"},{\"full-name\":\"name\",\"type\":\"string\",\"value\":\"AvgCpuAllNodesAllActions\"},{\"full-name\":\"cpu-usage\"}]}},{\"name\":\"timebased-tumbling-window\",\"type\":\"timebased-tumbling-window\",\"input-process\":[\"act-event-adapter-source\"],\"timebased-tumbling-window\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"neId\",\"neName\",\"name\"],\"in-property\":[\"cpu-usage\"],\"window-period\":60,\"aggregations\":[{\"operation\":\"avg\",\"arguments\":[\"cpu-usage\"]}]}},{\"name\":\"stream-sink-source\",\"input-process\":[\"timebased-tumbling-window\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                            "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/act-rules[name='ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107']"
                          },
                          "name": "ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107",
                          "definition": "{\"name\":\"ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107\",\"description\":\"Aggregation Operation Act Rule\",\"owner\":\"AvgCpuAllNodesAllActions\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_act_rule_ae697e27_9eb7_46c6_9d30_8c668fd0ee9d\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"startTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"rename-to\":\"eventTime\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"cpu-usage_avg\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"mixedOperations\",\"input-process\":[\"telemetrySource\"],\"type\":\"mixed-expression-operator\",\"mixed-expression-operator\":{\"event-time-in-property\":\"eventTime\",\"in-object-key-property\":[\"eventTime\",\"name\"],\"in-property\":[\"cpu-usage_avg\"],\"resource-property\":\"networkDeviceId\",\"mixed-operations\":[{\"aggregation-operation\":\"avg\",\"aggregation-operation-argument\":\"cpu-usage_avg\",\"result-property\":\"result1\"}],\"out-property\":\"resultData\"}},{\"name\":\"stream-sink-aggregation-operation\",\"input-process\":[\"mixedOperations\"],\"type\":\"stream-sink\",\"stream-sink\":{\"type\":\"kafka\",\"options\":[{\"name\":\"topic\",\"value\":\"rta.internal-pipeline-topic\"}]}}]}"
                        },
                        {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-indicator:rta-indicator-rules/rule/act-rules",
                            "nsp-model:identifier": "/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']/act-rules[name='ind_threshold_42d013e0_f4a0_4851_acd8_cb2e91a1c192']"
                          },
                          "name": "ind_threshold_42d013e0_f4a0_4851_acd8_cb2e91a1c192",
                          "definition": "{\"name\":\"ind_threshold_42d013e0_f4a0_4851_acd8_cb2e91a1c192\",\"description\":\"Absolute Threshold Act rule\",\"owner\":\"AvgCpuAllNodesAllActions\",\"keepalive\":120,\"enabled\":true,\"process\":[{\"name\":\"telemetrySource\",\"type\":\"stream-source\",\"stream-source\":{\"type\":\"kafka\",\"select-input-keys\":[\"ind_compute_output_3d052cd9_944a_439f_a871_a653ec297107\"],\"options\":[{\"name\":\"subscribe\",\"value\":\"rta.internal-pipeline-topic\"},{\"name\":\"failOnDataLoss\",\"value\":\"false\"}],\"schema\":{\"columns\":[{\"full-name\":\"eventTime\",\"type\":\"timestamp\",\"timestamp-type-format\":\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\",\"mandatory\":true},{\"full-name\":\"name\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"networkDeviceId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neId\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"neName\",\"type\":\"string\",\"mandatory\":true},{\"full-name\":\"resultData\",\"type\":\"decimal(30,4)\"}]}}},{\"name\":\"AvgCpuAllNodesAllActions_20_increasing\",\"input-process\":[\"telemetrySource\"],\"type\":\"absolute-thresholds\",\"absolute-thresholds\":{\"in-object-key-property\":[\"networkDeviceId\",\"name\"],\"pass-through-property\":[\"networkDeviceId\",\"eventTime\",\"neId\",\"neName\",\"name\"],\"thresholds\":[{\"name\":\"AvgCpuAllNodesAllActions_20_increasing\",\"threshold-value-decimal\":\"20\",\"direction\":\"increasing\",\"in-property\":\"resultData\"}]}},{\"name\":\"act-event-adapter-1\",\"input-process\":[\"AvgCpuAllNodesAllActions_20_increasing\"],\"type\":\"adapter\",\"adapter\":{\"columns\":[{\"full-name\":\"source\"},{\"full-name\":\"payload\"},{\"full-name\":\"timestamp\"},{\"full-name\":\"rule\"},{\"full-name\":\"process\"},{\"full-name\":\"type\"}]}}],\"action\":[{\"type\":\"kafka\",\"kafka\":{\"topic-name\":\"nsp-act-action-event\",\"topic-content\":\"CPU is a rising\"},\"action-name\":\"threshold_20_increasing_kafka_action1\",\"process-name\":\"AvgCpuAllNodesAllActions_20_increasing\"},{\"type\":\"alarm\",\"alarm\":{\"severity\":\"major\",\"alarm-name\":\"IndicatorThresholdCrossingEvent\",\"alarm-type\":\"qualityOfServiceAlarm\",\"probable-cause\":\"thresholdCrossed\",\"additional-text\":\"Threshold Crossing:\",\"additional-text-props\":[{\"property\":\"payload.threshold\",\"displayed-name\":\"threshold-value\"},{\"property\":\"payload.direction\",\"displayed-name\":\"direction\"},{\"property\":\"payload.value\",\"displayed-name\":\"value\"},{\"property\":\"source.eventTime\",\"displayed-name\":\"event-time\"},{\"property\":\"source.networkDeviceId\",\"displayed-name\":\"resource\"}],\"object-fdn\":\"fdn:yang:nsp-indicator:/nsp-indicator:rta-indicator-rules/rule[name='AvgCpuAllNodesAllActions']\",\"object-name\":\"AvgCpuAllNodesAllActions\",\"object-type\":\"nsp-indicator:rta-indicator-rules/rule\",\"source-type\":\"nsp\",\"key-prefix\":\"fm.Alarm\",\"key-properties\":[\"$ALARM_NAME\",\"source.name\"],\"ne-name-property\":null,\"ne-id-property\":null,\"last-time-detected-property\":\"source.eventTime\",\"last-time-detected-format\":\"yyyy-MM-dd'T'HH:mm:ss'Z'\",\"key-fdn-namespace\":\"nsp-indicator\",\"implicitly-cleared\":false},\"action-name\":\"threshold_20_increasing_alarm_action2\",\"process-name\":\"AvgCpuAllNodesAllActions_20_increasing\"},{\"type\":\"email\",\"email\":{\"aggregation\":false,\"period\":5,\"email-address\":\"userid@user.com\",\"email-subject\":\"Hmmmmm, It's getting hot\",\"email-content\":\"Your temperature is rising.\",\"number-events\":5},\"action-name\":\"threshold_20_increasing_email_action3\",\"process-name\":\"AvgCpuAllNodesAllActions_20_increasing\"}]}"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/md-subscription:/subscriptions/subscription": {
      "post": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "createSubscription",
        "description": "The parameters and request body are for method: createSubscription. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-rt-analytics:baselines": {
      "post": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "createBaseline",
        "description": "The parameters and request body are for method: createBaseline. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-rt-analytics:baselines/{pathv1}": {
      "get": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "getBaseline",
        "description": "The parameters and request body are for method: getBaseline. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-rt-analytics:baseline": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              }
                            }
                          },
                          "period": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "counter": {
                            "type": "string"
                          },
                          "admin-state": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "window-duration": {
                            "type": "string"
                          },
                          "update-status": {
                            "type": "string"
                          },
                          "use-bit-rate": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "units-name": {
                            "type": "string"
                          },
                          "subscriptionid": {
                            "type": "string"
                          },
                          "collection-interval": {
                            "type": "number"
                          },
                          "counter-group": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-rt-analytics:baseline": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-rt-analytics:baselines/baseline",
                        "nsp-model:identifier": "/nsp-rt-analytics:baselines/baseline[type='counter'][resource='/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']'][counter-group='telemetry:/base/interfaces/interface'][counter='received-octets'][period='pt5m'][window-duration='pt1m']"
                      },
                      "period": "pt5m",
                      "resource": "/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']",
                      "description": "restconf_baseline_nodeB",
                      "counter": "received-octets",
                      "admin-state": "up",
                      "type": "counter",
                      "window-duration": "pt1m",
                      "update-status": "active",
                      "use-bit-rate": false,
                      "name": "2.2.2.2, 1/1/1",
                      "units-name": "octets",
                      "subscriptionid": "test-sub-baseline-mdm",
                      "collection-interval": 60,
                      "counter-group": "telemetry:/base/interfaces/interface"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "patch": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "createBaselineDetector",
        "description": "The parameters and request body are for method: createBaselineDetector. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updated": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "period": {
                          "type": "string"
                        },
                        "resource": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "counter": {
                          "type": "string"
                        },
                        "admin-state": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "baseline-detector": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  }
                                }
                              },
                              "evaluate-when": {
                                "type": "string"
                              },
                              "comparison": {
                                "type": "string"
                              },
                              "evaluate-what": {
                                "type": "string"
                              },
                              "threshold": {
                                "type": "number"
                              },
                              "algorithm": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "window-duration": {
                          "type": "string"
                        },
                        "update-status": {
                          "type": "string"
                        },
                        "use-bit-rate": {
                          "type": "boolean"
                        },
                        "name": {
                          "type": "string"
                        },
                        "units-name": {
                          "type": "string"
                        },
                        "subscriptionid": {
                          "type": "string"
                        },
                        "collection-interval": {
                          "type": "number"
                        },
                        "counter-group": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "updated": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-rt-analytics:baselines/baseline",
                      "nsp-model:identifier": "/nsp-rt-analytics:baselines/baseline[type='counter'][resource='/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']'][counter-group='telemetry:/base/interfaces/interface'][counter='received-octets'][period='pt5m'][window-duration='pt1m']"
                    },
                    "period": "pt5m",
                    "resource": "/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']",
                    "description": "restconf_baseline_nodeB",
                    "counter": "received-octets",
                    "admin-state": "up",
                    "type": "counter",
                    "baseline-detector": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-rt-analytics:baselines/baseline/baseline-detector",
                          "nsp-model:identifier": "/nsp-rt-analytics:baselines/baseline[type='counter'][resource='/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']'][counter-group='telemetry:/base/interfaces/interface'][counter='received-octets'][period='pt5m'][window-duration='pt1m']/baseline-detector[algorithm='relative-diff-mean']"
                        },
                        "evaluate-when": "end-of-window",
                        "comparison": "greater-than",
                        "evaluate-what": "value_",
                        "threshold": 0.1,
                        "algorithm": "relative-diff-mean"
                      }
                    ],
                    "window-duration": "pt1m",
                    "update-status": "active",
                    "use-bit-rate": false,
                    "name": "2.2.2.2, 1/1/1",
                    "units-name": "octets",
                    "subscriptionid": "test-sub-baseline-mdm",
                    "collection-interval": 60,
                    "counter-group": "telemetry:/base/interfaces/interface"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "deleteBaseline",
        "description": "The parameters and request body are for method: deleteBaseline. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-rt-analytics:baselines/{pathv1}/{pathv2}": {
      "get": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "getBaselineDetector",
        "description": "The parameters and request body are for method: getBaselineDetector. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-rt-analytics:baseline-detector": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              }
                            }
                          },
                          "evaluate-when": {
                            "type": "string"
                          },
                          "comparison": {
                            "type": "string"
                          },
                          "evaluate-what": {
                            "type": "string"
                          },
                          "threshold": {
                            "type": "number"
                          },
                          "algorithm": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-rt-analytics:baseline-detector": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-rt-analytics:baselines/baseline/baseline-detector",
                        "nsp-model:identifier": "/nsp-rt-analytics:baselines/baseline[type='counter'][resource='/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']'][counter-group='telemetry:/base/interfaces/interface'][counter='received-octets'][period='pt5m'][window-duration='pt1m']/baseline-detector[algorithm='relative-diff-mean']"
                      },
                      "evaluate-when": "end-of-window",
                      "comparison": "greater-than",
                      "evaluate-what": "value_",
                      "threshold": 0.1,
                      "algorithm": "relative-diff-mean"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "patch": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "patchBaselineDetector",
        "description": "The parameters and request body are for method: patchBaselineDetector. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updated": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "evaluate-when": {
                          "type": "string"
                        },
                        "comparison": {
                          "type": "string"
                        },
                        "evaluate-what": {
                          "type": "string"
                        },
                        "threshold": {
                          "type": "number"
                        },
                        "algorithm": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "updated": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-rt-analytics:baselines/baseline/baseline-detector",
                      "nsp-model:identifier": "/nsp-rt-analytics:baselines/baseline[type='counter'][resource='/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']'][counter-group='telemetry:/base/interfaces/interface'][counter='received-octets'][period='pt5m'][window-duration='pt1m']/baseline-detector[algorithm='relative-diff-mean']"
                    },
                    "evaluate-when": "end-of-window",
                    "comparison": "less-than",
                    "evaluate-what": "value_",
                    "threshold": 0.1,
                    "algorithm": "relative-diff-mean"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "deleteBaselineDetector",
        "description": "The parameters and request body are for method: deleteBaselineDetector. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/md-subscription:/subscriptions/{pathv1}": {
      "delete": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "deleteSubscription",
        "description": "The parameters and request body are for method: deleteSubscription. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-rt-analytics:/baselines/baseline": {
      "get": {
        "tags": [
          "BaselineOperationsRestconfAPI"
        ],
        "operationId": "getAllBaselines",
        "description": "The parameters and request body are for method: getAllBaselines. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-rt-analytics:baseline": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              }
                            }
                          },
                          "period": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "counter": {
                            "type": "string"
                          },
                          "admin-state": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "window-duration": {
                            "type": "string"
                          },
                          "update-status": {
                            "type": "string"
                          },
                          "use-bit-rate": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "units-name": {
                            "type": "string"
                          },
                          "subscriptionid": {
                            "type": "string"
                          },
                          "collection-interval": {
                            "type": "number"
                          },
                          "counter-group": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-rt-analytics:baseline": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-rt-analytics:baselines/baseline",
                        "nsp-model:identifier": "/nsp-rt-analytics:baselines/baseline[type='gauge'][resource='/network-device-mgr:network-devices/network-device[name='1.1.1.1']/root/nokia-nsp-source:fdn[id='fdn:realm:sam:network:1.1.1.1:shelf-1:systemStatsHolder']'][counter-group='telemetry:/base/system-info/system'][counter='cpu-usage'][period='pt5m'][window-duration='pt1m']"
                      },
                      "period": "pt5m",
                      "resource": "/network-device-mgr:network-devices/network-device[name='1.1.1.1']/root/nokia-nsp-source:fdn[id='fdn:realm:sam:network:1.1.1.1:shelf-1:systemStatsHolder']",
                      "description": "restconf_baseline_nodeA",
                      "counter": "cpu-usage",
                      "admin-state": "up",
                      "type": "gauge",
                      "window-duration": "pt1m",
                      "update-status": "active",
                      "use-bit-rate": false,
                      "name": "1.1.1.1, system",
                      "units-name": "",
                      "subscriptionid": "test-sub-baseline-nfmp",
                      "collection-interval": 60,
                      "counter-group": "telemetry:/base/system-info/system"
                    },
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-rt-analytics:baselines/baseline",
                        "nsp-model:identifier": "/nsp-rt-analytics:baselines/baseline[type='counter'][resource='/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']'][counter-group='telemetry:/base/interfaces/interface'][counter='received-octets'][period='pt5m'][window-duration='pt1m']"
                      },
                      "period": "pt5m",
                      "resource": "/network-device-mgr:network-devices/network-device[name='2.2.2.2']/root/nokia-state:state/port[port-id='1/1/1']",
                      "description": "restconf_baseline_nodeB",
                      "counter": "received-octets",
                      "admin-state": "up",
                      "type": "counter",
                      "window-duration": "pt1m",
                      "update-status": "active",
                      "use-bit-rate": false,
                      "name": "2.2.2.2, 1/1/1",
                      "units-name": "octets",
                      "subscriptionid": "test-sub-baseline-mdm",
                      "collection-interval": 60,
                      "counter-group": "telemetry:/base/interfaces/interface"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:import-intent-types": {
      "post": {
        "tags": [
          "IntentTypeManagement"
        ],
        "operationId": "importIntentTypeFromIntentManager",
        "description": "The parameters and request body are for method: importIntentTypeFromIntentManager. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "message": "Import of Intent-Types started"
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/imported-intent-types": {
      "get": {
        "tags": [
          "IntentTypeManagement"
        ],
        "operationId": "getIntentTypes",
        "description": "The parameters and request body are for method: getIntentTypes. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:imported-intent-types": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "imported-intent-type": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "version": {
                                "type": "number"
                              },
                              "status": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "icm-descriptor": {
                                "type": "string"
                              },
                              "targets": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "role": {
                                "type": "string"
                              },
                              "category": {
                                "type": "string"
                              },
                              "device-scope": {
                                "type": "string"
                              },
                              "creation-time": {
                                "type": "string"
                              },
                              "created-by": {
                                "type": "string"
                              },
                              "last-modified-time": {
                                "type": "string"
                              },
                              "target-identifiers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "display-name": {
                                      "type": "string"
                                    },
                                    "order": {
                                      "type": "number"
                                    }
                                  }
                                }
                              },
                              "schema-form": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "content": {
                                      "type": "string"
                                    },
                                    "default-target-data": {
                                      "type": "string"
                                    },
                                    "target-data-struct": {
                                      "type": "string"
                                    },
                                    "flexible": {
                                      "type": "boolean"
                                    },
                                    "keys": {
                                      "type": "string"
                                    },
                                    "props": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-icm:imported-intent-types": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types",
                      "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types"
                    },
                    "imported-intent-type": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type",
                          "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-e_m'][version='2']",
                          "nsp-model:creation-time": "2024-04-23T16:55:31.570Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:56:47.855Z"
                        },
                        "name": "icm-equipment-port-e_m",
                        "version": 2,
                        "status": "successful",
                        "message": "Successfully imported/re-imported the intent-type",
                        "icm-descriptor": "{\n  \"category\": \"port\",\n  \"description\": \"Intent-Type to configure icm-equipment-port-e_m\",\n  \"role\": \"physical\",\n  \"device-scope\": \"classic\",\n  \"target-xpath\":\"/nsp-equipment:network/network-element/hardware-component/port[boolean(port-details[port-type='voice-port'])]\"\n}\n",
                        "targets": "[{\"name\":\"templatename\",\"i18n-text\":\"TemplateName\",\"value-type\":\"STRING\",\"order\":1}, {\"name\":\"objectidentifier\",\"i18n-text\":\"ObjectIdentifier\",\"value-type\":\"STRING\",\"order\":2}, {\"name\":\"port ID\",\"i18n-text\":\"Port-ID\",\"value-type\":\"STRING\",\"order\":3}]",
                        "description": "Intent-Type to configure icm-equipment-port-e_m",
                        "role": "physical",
                        "category": "port",
                        "device-scope": "classic",
                        "creation-time": "2024-04-23T16:55:32.443110Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:56:47.849085Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-e_m'][version='2']/target-identifiers[name='port ID']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.449Z"
                            },
                            "name": "port ID",
                            "display-name": "Port-ID",
                            "order": 3
                          }
                        ],
                        "schema-form": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-e_m'][version='2']/schema-form[name='default.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:56:47.857Z"
                            },
                            "name": "default.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-e_m:icm-equipment-port-e_m\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-e_m\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-e_m.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-e_m.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-e_m.port.admin-state\",\"hide\":true,\"default\":\"Up\",\"componentId\":\"icm-equipment-port-e_m.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"Up\",\"value\":\"Up\"},{\"name\":\"Down\",\"value\":\"Down\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-e_m.port.description\",\"hide\":true,\"componentId\":\"icm-equipment-port-e_m.port.description\",\"name\":\"port.description\",\"description\":\"Description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":160,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannelEnabled\",\"hide\":true,\"default\":\"false\",\"componentId\":\"icm-equipment-port-e_m.port.voiceChannelEnabled\",\"name\":\"port.voiceChannelEnabled\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Voice Channel Enabled\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voicePort\",\"hide\":true,\"componentId\":\"icm-equipment-port-e_m.port.voicePort\",\"name\":\"port.voicePort\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Voice Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port.voicePort\",\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voicePort.tlp-rx\",\"hide\":true,\"componentId\":\"icm-equipment-port-e_m.port.voicePort.tlp-rx\",\"name\":\"port.voicePort.tlp-rx\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":70,\"min\":-160}]},\"type\":\"number\",\"title\":\"TLP-Rx\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.voicePort\",\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voicePort.tlp-tx\",\"hide\":true,\"componentId\":\"icm-equipment-port-e_m.port.voicePort.tlp-tx\",\"name\":\"port.voicePort.tlp-tx\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":70,\"min\":-160}]},\"type\":\"number\",\"title\":\"TLP-Tx\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannel\",\"hide\":true,\"componentId\":\"icm-equipment-port-e_m.port.voiceChannel\",\"name\":\"port.voiceChannel\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Voice Channel\",\"when\":{\"field\":\"port.voiceChannelEnabled\",\"value\":\"true\",\"operator\":\"equals\"}},{\"columnSpan\":2,\"propertyGroup\":\"port.voiceChannel\",\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannel.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-e_m.port.voiceChannel.admin-state\",\"name\":\"port.voiceChannel.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"Up\",\"value\":\"Up\"},{\"name\":\"Down\",\"value\":\"Down\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.voiceChannel\",\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannel.signal-mode\",\"hide\":true,\"default\":\"EM\",\"componentId\":\"icm-equipment-port-e_m.port.voiceChannel.signal-mode\",\"name\":\"port.voiceChannel.signal-mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Signal Mode\",\"required\":false,\"enum\":[{\"name\":\"EM\",\"value\":\"EM\"},{\"name\":\"Transmission-only\",\"value\":\"Transmission-only\"}]},{\"columnSpan\":6,\"propertyGroup\":\"port.voiceChannel\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group\",\"componentId\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group\",\"readOnly\":false,\"title\":\"DS0 Channel Group\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"port.voiceChannel.ds0Channel-group\",\"key\":[\"channel-group-id\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group.channel-group-id\",\"componentId\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group.channel-group-id\",\"floatingFilter\":true,\"name\":\"channel-group-id\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Channel Group ID\",\"required\":true,\"enum\":[{\"name\":\"1\",\"value\":\"1\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group.admin-state\",\"default\":\"Up\",\"componentId\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group.admin-state\",\"floatingFilter\":true,\"name\":\"admin-state\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"Up\",\"value\":\"Up\"},{\"name\":\"Down\",\"value\":\"Down\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group.encapType\",\"default\":\"CEM\",\"componentId\":\"icm-equipment-port-e_m.port.voiceChannel.ds0Channel-group.encapType\",\"floatingFilter\":true,\"name\":\"encapType\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"CEM\",\"value\":\"CEM\"}]}]}]}",
                            "default-target-data": " {\"port\":{\"admin-state\":\"Up\",\"voiceChannelEnabled\":\"false\"}}",
                            "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"voiceChannelEnabled\":null,\"voicePort\":{\"tlp-rx\":null,\"tlp-tx\":null},\"voiceChannel\":{\"admin-state\":null,\"signal-mode\":null,\"ds0Channel-group\":[{\"channel-group-id\":null,\"admin-state\":null,\"encapType\":null}]}}}",
                            "flexible": true,
                            "keys": "[\"channel-group-id\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type",
                          "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapingress-srqos'][version='2']",
                          "nsp-model:creation-time": "2024-04-23T16:55:31.468Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:55:52.463Z"
                        },
                        "name": "icm-qos-sapingress-srqos",
                        "version": 2,
                        "status": "successful",
                        "message": "Successfully imported/re-imported the intent-type",
                        "icm-descriptor": "{\n  \"category\": \"QoS\",\n  \"description\": \"Intent-type to configure qos sap-ingress\",\n  \"role\": \"logical\",\n  \"device-scope\": \"mdm-and-classic\"\n}\n",
                        "targets": "[{\"name\":\"templatename\",\"i18n-text\":\"TemplateName\",\"value-type\":\"STRING\",\"order\":1}, {\"name\":\"objectidentifier\",\"i18n-text\":\"ObjectIdentifier\",\"value-type\":\"STRING\",\"order\":2}, {\"name\":\"sap-ingress-policy-name\",\"length\":\"1..64\",\"i18n-text\":\"SAP Ingress Policy Name\",\"function-name\":\"suggestPolicyName\",\"value-type\":\"STRING\",\"order\":3}, {\"name\":\"policy-id\",\"i18n-text\":\"SAP Ingress Policy ID\",\"range\":\"1..65535\",\"function-name\":\"suggestPolicyId\",\"value-type\":\"NUMBER\",\"order\":4}]",
                        "description": "Intent-type to configure qos sap-ingress",
                        "role": "logical",
                        "category": "QoS",
                        "device-scope": "mdm-and-classic",
                        "creation-time": "2024-04-23T16:55:32.234656Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:55:52.456302Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapingress-srqos'][version='2']/target-identifiers[name='sap-ingress-policy-name']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.247Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.247Z"
                            },
                            "name": "sap-ingress-policy-name",
                            "display-name": "SAP Ingress Policy Name",
                            "order": 3,
                            "function-name": "suggestPolicyName"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapingress-srqos'][version='2']/target-identifiers[name='policy-id']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.247Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.247Z"
                            },
                            "name": "policy-id",
                            "display-name": "SAP Ingress Policy ID",
                            "order": 4,
                            "function-name": "suggestPolicyId"
                          }
                        ],
                        "schema-form": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapingress-srqos'][version='2']/schema-form[name='default.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.247Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:52.464Z"
                            },
                            "name": "default.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-qos-sapingress-srqos:icm-qos-sapingress-srqos\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-qos-sapingress-srqos\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress\",\"name\":\"sap-ingress\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SAP Ingress\"},{\"columnSpan\":2,\"propertyGroup\":\"sap-ingress\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.description\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.description\",\"name\":\"sap-ingress.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":80,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"sap-ingress\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.default-fc\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.default-fc\",\"name\":\"sap-ingress.default-fc\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Default FC\",\"required\":false,\"enum\":[{\"name\":\"af\",\"value\":\"af\"},{\"name\":\"be\",\"value\":\"be\"},{\"name\":\"l1\",\"value\":\"l1\"},{\"name\":\"l2\",\"value\":\"l2\"},{\"name\":\"nc\",\"value\":\"nc\"},{\"name\":\"ef\",\"value\":\"ef\"},{\"name\":\"h1\",\"value\":\"h1\"},{\"name\":\"h2\",\"value\":\"h2\"}]},{\"columnSpan\":2,\"propertyGroup\":\"sap-ingress\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.default-priority\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.default-priority\",\"name\":\"sap-ingress.default-priority\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Default Priority\",\"required\":false,\"enum\":[{\"name\":\"low\",\"value\":\"low\"},{\"name\":\"high\",\"value\":\"high\"}]},{\"columnSpan\":6,\"propertyGroup\":\"sap-ingress\",\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue\",\"readOnly\":false,\"title\":\"Queue\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"sap-ingress.queue\",\"key\":[\"queue-id\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.queue-id\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.queue-id\",\"floatingFilter\":true,\"name\":\"queue-id\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":32,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Queue ID\",\"required\":true},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.queue-type\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.queue-type\",\"floatingFilter\":true,\"name\":\"queue-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Queue Type\",\"required\":false,\"enum\":[{\"name\":\"expedited\",\"value\":\"expedited\"},{\"name\":\"auto-expedited\",\"value\":\"auto-expedited\"},{\"name\":\"best-effort\",\"value\":\"best-effort\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.queue-mode\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.queue-mode\",\"floatingFilter\":true,\"name\":\"queue-mode\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Queue Mode\",\"required\":false,\"enum\":[{\"name\":\"priority\",\"value\":\"priority\"},{\"name\":\"profile\",\"value\":\"profile\"}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent\",\"floatingFilter\":true,\"name\":\"scheduler-parent\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Scheduler Parent\"},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.scheduler-name\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.scheduler-name\",\"floatingFilter\":true,\"name\":\"scheduler-parent.scheduler-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"string\",\"title\":\"Scheduler Name\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.level\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.level\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Level\",\"when\":{\"field\":\"scheduler-parent.scheduler-name\",\"operator\":\"exists\"},\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.level\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":1}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.weight\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.weight\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Weight\",\"when\":{\"field\":\"scheduler-parent.scheduler-name\",\"operator\":\"exists\"},\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.weight\",\"validations\":{\"ranges\":[{\"max\":100,\"min\":0}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.cir-level\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.cir-level\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR Level\",\"when\":{\"field\":\"scheduler-parent.scheduler-name\",\"operator\":\"exists\"},\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.cir-level\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":0}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.cir-weight\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.scheduler-parent.cir-weight\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR Weight\",\"when\":{\"field\":\"scheduler-parent.scheduler-name\",\"operator\":\"exists\"},\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.cir-weight\",\"validations\":{\"ranges\":[{\"max\":100,\"min\":0}]}},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate\",\"floatingFilter\":true,\"name\":\"rate\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Rate\"},{\"columnSpan\":2,\"propertyGroup\":\"rate\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate.pir\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate.pir\",\"floatingFilter\":true,\"description\":\"-1:max, <1..6400000000>\",\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"PIR\",\"required\":false,\"hide\":true,\"name\":\"rate.pir\",\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":6400000000,\"min\":1}]}},{\"columnSpan\":2,\"propertyGroup\":\"rate\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate.cir\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate.cir\",\"floatingFilter\":true,\"description\":\"-1:max, <0..6400000000>\",\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR\",\"required\":false,\"hide\":true,\"name\":\"rate.cir\",\"validations\":{\"ranges\":[{\"max\":6400000000,\"min\":-1}]}},{\"columnSpan\":2,\"propertyGroup\":\"rate\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate.fir\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.rate.fir\",\"floatingFilter\":true,\"description\":\"-1:max, <0..6400000000>\",\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"FIR\",\"required\":false,\"hide\":true,\"name\":\"rate.fir\",\"validations\":{\"ranges\":[{\"max\":6400000000,\"min\":-1}]}},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule\",\"hide\":true,\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule\",\"floatingFilter\":true,\"name\":\"adaptation-rule\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Adaptation Rule\"},{\"columnSpan\":2,\"propertyGroup\":\"adaptation-rule\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule.pir\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule.pir\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"PIR\",\"required\":false,\"enum\":[{\"name\":\"max\",\"value\":\"max\"},{\"name\":\"min\",\"value\":\"min\"},{\"name\":\"closest\",\"value\":\"closest\"}],\"hide\":true,\"name\":\"adaptation-rule.pir\"},{\"columnSpan\":2,\"propertyGroup\":\"adaptation-rule\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule.cir\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule.cir\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"CIR\",\"required\":false,\"enum\":[{\"name\":\"max\",\"value\":\"max\"},{\"name\":\"min\",\"value\":\"min\"},{\"name\":\"closest\",\"value\":\"closest\"}],\"hide\":true,\"name\":\"adaptation-rule.cir\"},{\"columnSpan\":2,\"propertyGroup\":\"adaptation-rule\",\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule.fir\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.queue.adaptation-rule.fir\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"FIR\",\"required\":false,\"enum\":[{\"name\":\"max\",\"value\":\"max\"},{\"name\":\"min\",\"value\":\"min\"},{\"name\":\"closest\",\"value\":\"closest\"}],\"hide\":true,\"name\":\"adaptation-rule.fir\"}]},{\"columnSpan\":6,\"propertyGroup\":\"sap-ingress\",\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.fc\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.fc\",\"readOnly\":false,\"title\":\"FC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"sap-ingress.fc\",\"key\":[\"fc-name\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.fc.fc-name\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.fc.fc-name\",\"floatingFilter\":true,\"name\":\"fc-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"FC Name\",\"required\":true,\"enum\":[{\"name\":\"af\",\"value\":\"af\"},{\"name\":\"be\",\"value\":\"be\"},{\"name\":\"l1\",\"value\":\"l1\"},{\"name\":\"l2\",\"value\":\"l2\"},{\"name\":\"nc\",\"value\":\"nc\"},{\"name\":\"ef\",\"value\":\"ef\"},{\"name\":\"h1\",\"value\":\"h1\"},{\"name\":\"h2\",\"value\":\"h2\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.fc.profile\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.fc.profile\",\"floatingFilter\":true,\"name\":\"profile\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Profile\",\"required\":false,\"enum\":[{\"name\":\"none\",\"value\":\"none\"},{\"name\":\"in\",\"value\":\"in\"},{\"name\":\"out\",\"value\":\"out\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapingress-srqos.sap-ingress.fc.queue\",\"componentId\":\"icm-qos-sapingress-srqos.sap-ingress.fc.queue\",\"floatingFilter\":true,\"readOnly\":false,\"suggest\":\"suggestQueueId\",\"sortable\":true,\"type\":\"number\",\"title\":\"Queue\",\"required\":false,\"component\":\"autoComplete\",\"name\":\"queue\",\"validations\":{\"ranges\":[{\"max\":32,\"min\":0}]}}]}]}",
                            "default-target-data": " {}",
                            "target-data-struct": "{\"sap-ingress\":{\"description\":null,\"default-fc\":null,\"default-priority\":null,\"queue\":[{\"queue-id\":null,\"queue-type\":null,\"queue-mode\":null,\"scheduler-parent\":{\"scheduler-name\":null,\"level\":null,\"weight\":null,\"cir-level\":null,\"cir-weight\":null},\"rate\":{\"pir\":null,\"cir\":null,\"fir\":null},\"adaptation-rule\":{\"pir\":null,\"cir\":null,\"fir\":null}}],\"fc\":[{\"fc-name\":null,\"profile\":null,\"queue\":null}]}}",
                            "flexible": true,
                            "keys": "[\"queue-id\",\"fc-name\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type",
                          "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-router-policystatement-srrouter'][version='2']",
                          "nsp-model:creation-time": "2024-04-23T16:55:31.468Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:55:44.175Z"
                        },
                        "name": "icm-router-policystatement-srrouter",
                        "version": 2,
                        "status": "successful",
                        "message": "Successfully imported/re-imported the intent-type",
                        "icm-descriptor": "{\n  \"role\": \"logical\",\n  \"category\": \"router\",\n  \"description\": \"Intent-type to configure policy statement\",\n  \"device-scope\": \"mdm-and-classic\"\n}\n",
                        "targets": "[{\"name\":\"templatename\",\"i18n-text\":\"TemplateName\",\"value-type\":\"STRING\",\"order\":1}, {\"name\":\"objectidentifier\",\"i18n-text\":\"ObjectIdentifier\",\"value-type\":\"STRING\",\"order\":2}, {\"name\":\"name\",\"length\":\"1..64\",\"i18n-text\":\"Policy Statement Name\",\"value-type\":\"STRING\",\"order\":3}]",
                        "description": "Intent-type to configure policy statement",
                        "role": "logical",
                        "category": "router",
                        "device-scope": "mdm-and-classic",
                        "creation-time": "2024-04-23T16:55:32.034691Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:55:44.141031Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-router-policystatement-srrouter'][version='2']/target-identifiers[name='name']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.038Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.038Z"
                            },
                            "name": "name",
                            "display-name": "Policy Statement Name",
                            "order": 3
                          }
                        ],
                        "schema-form": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-router-policystatement-srrouter'][version='2']/schema-form[name='default.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.038Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:44.180Z"
                            },
                            "name": "default.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-router-policystatement-srrouter:icm-router-policystatement-srrouter\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-router-policystatement-srrouter\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement\",\"name\":\"policy-statement\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Policy Statement\"},{\"columnSpan\":2,\"propertyGroup\":\"policy-statement\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.enableDefaultAction\",\"default\":false,\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.enableDefaultAction\",\"name\":\"policy-statement.enableDefaultAction\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable Default Action\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"policy-statement\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.default-action\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.default-action\",\"name\":\"policy-statement.default-action\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Default Action\",\"when\":{\"field\":\"policy-statement.enableDefaultAction\",\"value\":\"true\",\"operator\":\"equals\"}},{\"columnSpan\":2,\"propertyGroup\":\"policy-statement.default-action\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.default-action.action-type\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.default-action.action-type\",\"name\":\"policy-statement.default-action.action-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Action Type\",\"required\":false,\"enum\":[{\"name\":\"accept\",\"value\":\"accept\"},{\"name\":\"reject\",\"value\":\"reject\"},{\"name\":\"next-entry\",\"value\":\"next-entry\"},{\"name\":\"next-policy\",\"value\":\"next-policy\"}]},{\"columnSpan\":6,\"propertyGroup\":\"policy-statement\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry\",\"readOnly\":false,\"title\":\"Entry\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"policy-statement.entry\",\"key\":[\"entry-id\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.entry-id\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.entry-id\",\"floatingFilter\":true,\"name\":\"entry-id\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":4294967295,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Entry Id\",\"required\":true},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.description\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.description\",\"floatingFilter\":true,\"name\":\"description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":80,\"min\":0}]},\"sortable\":true,\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from\",\"floatingFilter\":true,\"name\":\"from\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"From\"},{\"columnSpan\":4,\"propertyGroup\":\"from\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.prefix-list\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.prefix-list\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"propertyList\",\"title\":\"Prefix List\",\"propertyListType\":\"string\",\"required\":false,\"component\":{\"list\":\"simplePropertyList\",\"picker\":\"simpleInputPicker\"},\"hide\":true,\"name\":\"from.prefix-list\"},{\"columnSpan\":4,\"propertyGroup\":\"from\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.family\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.family\",\"floatingFilter\":true,\"readOnly\":false,\"suggest\":\"suggestFamily\",\"sortable\":true,\"type\":\"list\",\"title\":\"Family\",\"propertyListType\":\"string\",\"required\":false,\"component\":{\"list\":\"simplePropertyList\",\"input\":\"simpleAutoCompletePicker\"},\"hide\":true,\"name\":\"from.family\"},{\"columnSpan\":7,\"propertyGroup\":\"from\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community\",\"floatingFilter\":true,\"name\":\"from.community\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Community\"},{\"columnSpan\":2,\"propertyGroup\":\"from.community\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community.community\",\"default\":\"name\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community.community\",\"cases\":[{\"columnSpan\":2,\"name\":\"expression\",\"label\":\"Expression\",\"children\":[\"from.community.expression\"],\"value\":\"expression\"},{\"columnSpan\":2,\"name\":\"name\",\"label\":\"Name\",\"children\":[\"from.community.name\"],\"value\":\"name\"}],\"floatingFilter\":true,\"name\":\"from.community.community\",\"sortable\":true,\"title\":\"Community\",\"type\":\"choice\"},{\"columnSpan\":2,\"propertyGroup\":\"from.community\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community.expression\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community.expression\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"string\",\"title\":\"Expression\",\"required\":false,\"hide\":true,\"name\":\"from.community.expression\",\"choice\":\"from.community.community.expression\"},{\"columnSpan\":2,\"propertyGroup\":\"from.community\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community.name\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.community.name\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"string\",\"title\":\"Name\",\"required\":false,\"hide\":true,\"name\":\"from.community.name\",\"choice\":\"from.community.community.name\"},{\"columnSpan\":7,\"propertyGroup\":\"from\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.protocol\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.protocol\",\"floatingFilter\":true,\"name\":\"from.protocol\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Protocol\"},{\"columnSpan\":4,\"propertyGroup\":\"from.protocol\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.protocol.name\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.from.protocol.name\",\"floatingFilter\":true,\"readOnly\":false,\"suggest\":\"suggestProtocol\",\"sortable\":true,\"type\":\"list\",\"title\":\"Name\",\"propertyListType\":\"string\",\"required\":false,\"component\":{\"list\":\"simplePropertyList\",\"input\":\"simpleAutoCompletePicker\"},\"hide\":true,\"name\":\"from.protocol.name\"},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.to\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.to\",\"floatingFilter\":true,\"name\":\"to\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"To\"},{\"columnSpan\":7,\"propertyGroup\":\"to\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.to.protocol\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.to.protocol\",\"floatingFilter\":true,\"name\":\"to.protocol\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Protocol\"},{\"columnSpan\":4,\"propertyGroup\":\"to.protocol\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.to.protocol.name\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.to.protocol.name\",\"floatingFilter\":true,\"readOnly\":false,\"suggest\":\"suggestProtocol\",\"sortable\":true,\"type\":\"list\",\"title\":\"Name\",\"propertyListType\":\"string\",\"required\":false,\"component\":{\"list\":\"simplePropertyList\",\"input\":\"simpleAutoCompletePicker\"},\"hide\":true,\"name\":\"to.protocol.name\"},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action\",\"floatingFilter\":true,\"name\":\"action\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Action\"},{\"columnSpan\":2,\"propertyGroup\":\"action\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.action-type\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.action-type\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Action Type\",\"required\":false,\"enum\":[{\"name\":\"accept\",\"value\":\"accept\"},{\"name\":\"reject\",\"value\":\"reject\"},{\"name\":\"next-entry\",\"value\":\"next-entry\"},{\"name\":\"next-policy\",\"value\":\"next-policy\"}],\"hide\":true,\"name\":\"action.action-type\"},{\"columnSpan\":2,\"propertyGroup\":\"action\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.local-preference\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.local-preference\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Local Preference\",\"required\":false,\"hide\":true,\"name\":\"action.local-preference\",\"validations\":{\"ranges\":[{\"max\":4294967295,\"min\":0}]}},{\"columnSpan\":2,\"propertyGroup\":\"action\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.preference\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.preference\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Preference\",\"required\":false,\"hide\":true,\"name\":\"action.preference\",\"validations\":{\"ranges\":[{\"max\":255,\"min\":1}]}},{\"columnSpan\":7,\"propertyGroup\":\"action\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.community\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.community\",\"floatingFilter\":true,\"name\":\"action.community\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Community\"},{\"columnSpan\":4,\"propertyGroup\":\"action.community\",\"newRow\":true,\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.community.add\",\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.community.add\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"propertyList\",\"title\":\"Add\",\"propertyListType\":\"string\",\"required\":false,\"component\":{\"list\":\"simplePropertyList\",\"picker\":\"simpleInputPicker\"},\"hide\":true,\"name\":\"action.community.add\"},{\"columnSpan\":2,\"propertyGroup\":\"action\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.admin-tag-policy\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.admin-tag-policy\",\"floatingFilter\":true,\"name\":\"action.admin-tag-policy\",\"readOnly\":false,\"sortable\":true,\"type\":\"string\",\"title\":\"Admin Tag Policy\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"action\",\"_viewConfigPath\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.create-mpls-tunnel\",\"hide\":true,\"componentId\":\"icm-router-policystatement-srrouter.policy-statement.entry.action.create-mpls-tunnel\",\"floatingFilter\":true,\"name\":\"action.create-mpls-tunnel\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Create Mpls Tunnel\",\"required\":false}]}]}",
                            "default-target-data": " {\"policy-statement\":{\"enableDefaultAction\":false}}",
                            "target-data-struct": "{\"policy-statement\":{\"enableDefaultAction\":null,\"default-action\":{\"action-type\":null},\"entry\":[{\"entry-id\":null,\"description\":null,\"from\":{\"prefix-list\":[],\"family\":[],\"community\":{\"community\":null,\"expression\":null,\"name\":null},\"protocol\":{\"name\":[]}},\"to\":{\"protocol\":{\"name\":[]}},\"action\":{\"action-type\":null,\"local-preference\":null,\"preference\":null,\"community\":{\"add\":[]},\"admin-tag-policy\":null,\"create-mpls-tunnel\":null}}]}}",
                            "flexible": true,
                            "keys": "[\"entry-id\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type",
                          "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-system-ptp'][version='2']",
                          "nsp-model:creation-time": "2024-04-23T16:55:31.637Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:56:06.148Z"
                        },
                        "name": "icm-system-ptp",
                        "version": 2,
                        "status": "successful",
                        "message": "Successfully imported/re-imported the intent-type",
                        "icm-descriptor": "{\n  \"role\": \"logical\",\n  \"category\": \"PTP\",\n  \"description\": \"Intent-Type to configure system ptp\",\n  \"device-scope\": \"mdm-and-classic\",\n  \"select-target\": \"single\"\n}\n",
                        "targets": "[{\"name\":\"templatename\",\"i18n-text\":\"TemplateName\",\"value-type\":\"STRING\",\"order\":1}, {\"name\":\"objectidentifier\",\"i18n-text\":\"ObjectIdentifier\",\"value-type\":\"STRING\",\"order\":2}, {\"name\":\"ptp\",\"pattern\":\"^(ptp)$\",\"i18n-text\":\"PTP\",\"function-name\":\"suggestPtp\",\"value-type\":\"STRING\",\"order\":3}]",
                        "description": "Intent-Type to configure system ptp",
                        "role": "logical",
                        "category": "PTP",
                        "device-scope": "mdm-and-classic",
                        "creation-time": "2024-04-23T16:55:32.442815Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:56:06.141164Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-system-ptp'][version='2']/target-identifiers[name='ptp']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.449Z"
                            },
                            "name": "ptp",
                            "display-name": "PTP",
                            "order": 3,
                            "pattern": "^(ptp)$",
                            "function-name": "suggestPtp"
                          }
                        ],
                        "schema-form": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-system-ptp'][version='2']/schema-form[name='default.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:56:06.154Z"
                            },
                            "name": "default.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-system-ptp:icm-system-ptp\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-system-ptp\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-system-ptp.ptp\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp\",\"name\":\"ptp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"PTP\"},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.admin-state\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.admin-state\",\"name\":\"ptp.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.announce-receipt-timeout\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.announce-receipt-timeout\",\"name\":\"ptp.announce-receipt-timeout\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":10,\"min\":2}]},\"type\":\"number\",\"title\":\"Announce Receipt Timeout\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.log-announce-interval\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.log-announce-interval\",\"name\":\"ptp.log-announce-interval\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":4,\"min\":-3}]},\"type\":\"number\",\"title\":\"Log Announce Interval\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.clock-type\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.clock-type\",\"name\":\"ptp.clock-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Clock Type\",\"required\":false,\"enum\":[{\"name\":\"slave-only\",\"value\":\"slave-only\"},{\"name\":\"master-only\",\"value\":\"master-only\"},{\"name\":\"boundary\",\"value\":\"boundary\"}]},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.network-type\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.network-type\",\"name\":\"ptp.network-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Network Type\",\"required\":false,\"enum\":[{\"name\":\"sonet\",\"value\":\"sonet\"},{\"name\":\"sdh\",\"value\":\"sdh\"}]},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.domain\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.domain\",\"name\":\"ptp.domain\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":255,\"min\":0}]},\"type\":\"number\",\"title\":\"Domain\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.profile\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.profile\",\"name\":\"ptp.profile\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Profile\",\"required\":false,\"enum\":[{\"name\":\"g8265dot1-2010\",\"value\":\"g8265dot1-2010\"},{\"name\":\"ieee1588-2008\",\"value\":\"ieee1588-2008\"},{\"name\":\"g8275dot1-2014\",\"value\":\"g8275dot1-2014\"}]},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.local-priority\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.local-priority\",\"name\":\"ptp.local-priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":255,\"min\":1}]},\"type\":\"number\",\"title\":\"Local Priority\",\"when\":\"ptp.profile = 'g8275dot1-2014'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.priority1\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.priority1\",\"name\":\"ptp.priority1\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":255,\"min\":0}]},\"type\":\"number\",\"title\":\"Priority1\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.priority2\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.priority2\",\"name\":\"ptp.priority2\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":255,\"min\":0}]},\"type\":\"number\",\"title\":\"Priority2\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"ptp\",\"_viewConfigPath\":\"icm-system-ptp.ptp.tx-while-sync-uncertain\",\"hide\":true,\"componentId\":\"icm-system-ptp.ptp.tx-while-sync-uncertain\",\"name\":\"ptp.tx-while-sync-uncertain\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Tx While Sync Uncertain\",\"required\":false},{\"columnSpan\":6,\"propertyGroup\":\"ptp\",\"newRow\":true,\"_viewConfigPath\":\"icm-system-ptp.ptp.port\",\"componentId\":\"icm-system-ptp.ptp.port\",\"readOnly\":false,\"title\":\"Port\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"ptp.port\",\"key\":[\"port-id\"],\"properties\":[{\"columnSpan\":2,\"displayKey\":\"port-id\",\"_viewConfigPath\":\"icm-system-ptp.ptp.port.port-id\",\"componentId\":\"icm-system-ptp.ptp.port.port-id\",\"floatingFilter\":true,\"readOnly\":false,\"componentProps\":{\"isPagination\":true,\"isObject\":false,\"paginationProps\":{\"pageLabel\":\"Page\"}},\"suggest\":\"suggestPortIds\",\"sortable\":true,\"type\":\"leafref\",\"title\":\"Port Id\",\"required\":true,\"name\":\"port-id\",\"properties\":[{\"name\":\"port-id\",\"description\":\"Port ID\",\"floatingFilter\":true,\"title\":\"Port ID\",\"type\":\"string\"},{\"name\":\"description\",\"description\":\"Description\",\"floatingFilter\":true,\"title\":\"Description\",\"type\":\"string\"},{\"name\":\"encapType\",\"description\":\"Encapsulation Type\",\"floatingFilter\":true,\"title\":\"Encapsulation Type\",\"type\":\"string\"},{\"name\":\"mode\",\"description\":\"Mode\",\"floatingFilter\":true,\"title\":\"Mode\",\"type\":\"string\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-system-ptp.ptp.port.admin-state\",\"componentId\":\"icm-system-ptp.ptp.port.admin-state\",\"floatingFilter\":true,\"name\":\"admin-state\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-system-ptp.ptp.port.address\",\"componentId\":\"icm-system-ptp.ptp.port.address\",\"floatingFilter\":true,\"name\":\"address\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Address\",\"required\":false,\"enum\":[{\"name\":\"01:80:c2:00:00:0e\",\"value\":\"01:80:c2:00:00:0e\"},{\"name\":\"01:1b:19:00:00:00\",\"value\":\"01:1b:19:00:00:00\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-system-ptp.ptp.port.local-priority\",\"componentId\":\"icm-system-ptp.ptp.port.local-priority\",\"floatingFilter\":true,\"name\":\"local-priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":255,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Local Priority\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-system-ptp.ptp.port.log-delay-interval\",\"componentId\":\"icm-system-ptp.ptp.port.log-delay-interval\",\"floatingFilter\":true,\"name\":\"log-delay-interval\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":0,\"min\":-6}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Log Delay Interval\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-system-ptp.ptp.port.log-sync-interval\",\"componentId\":\"icm-system-ptp.ptp.port.log-sync-interval\",\"floatingFilter\":true,\"name\":\"log-sync-interval\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":0,\"min\":-6}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Log Sync Interval\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-system-ptp.ptp.port.master-only\",\"componentId\":\"icm-system-ptp.ptp.port.master-only\",\"floatingFilter\":true,\"name\":\"master-only\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Master Only\",\"required\":false}]}]}",
                            "default-target-data": " {}",
                            "target-data-struct": "{\"ptp\":{\"admin-state\":null,\"announce-receipt-timeout\":null,\"log-announce-interval\":null,\"clock-type\":null,\"network-type\":null,\"domain\":null,\"profile\":null,\"local-priority\":null,\"priority1\":null,\"priority2\":null,\"tx-while-sync-uncertain\":null,\"port\":[{\"port-id\":null,\"admin-state\":null,\"address\":null,\"local-priority\":null,\"log-delay-interval\":null,\"log-sync-interval\":null,\"master-only\":null}]}}",
                            "flexible": true,
                            "keys": "[\"port-id\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type",
                          "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapegress-srqos'][version='2']",
                          "nsp-model:creation-time": "2024-04-23T16:55:31.471Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:55:59.454Z"
                        },
                        "name": "icm-qos-sapegress-srqos",
                        "version": 2,
                        "status": "successful",
                        "message": "Successfully imported/re-imported the intent-type",
                        "icm-descriptor": "{\n  \"role\": \"logical\",\n  \"category\": \"QoS\",\n  \"description\": \"Intent-type to configure qos sap-egress\",\n  \"device-scope\": \"mdm-and-classic\"\n}\n",
                        "targets": "[{\"name\":\"templatename\",\"i18n-text\":\"TemplateName\",\"value-type\":\"STRING\",\"order\":1}, {\"name\":\"objectidentifier\",\"i18n-text\":\"ObjectIdentifier\",\"value-type\":\"STRING\",\"order\":2}, {\"name\":\"sap-egress-policy-name\",\"length\":\"1..64\",\"i18n-text\":\"SAP Egress Policy Name\",\"function-name\":\"suggestPolicyName\",\"value-type\":\"STRING\",\"order\":3}, {\"name\":\"policy-id\",\"i18n-text\":\"SAP Egress Policy ID\",\"range\":\"1..65535\",\"function-name\":\"suggestPolicyId\",\"value-type\":\"NUMBER\",\"order\":4}]",
                        "description": "Intent-type to configure qos sap-egress",
                        "role": "logical",
                        "category": "QoS",
                        "device-scope": "mdm-and-classic",
                        "creation-time": "2024-04-23T16:55:32.335622Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:55:59.446788Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapegress-srqos'][version='2']/target-identifiers[name='sap-egress-policy-name']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.337Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.337Z"
                            },
                            "name": "sap-egress-policy-name",
                            "display-name": "SAP Egress Policy Name",
                            "order": 3,
                            "function-name": "suggestPolicyName"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapegress-srqos'][version='2']/target-identifiers[name='policy-id']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.337Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.337Z"
                            },
                            "name": "policy-id",
                            "display-name": "SAP Egress Policy ID",
                            "order": 4,
                            "function-name": "suggestPolicyId"
                          }
                        ],
                        "schema-form": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-qos-sapegress-srqos'][version='2']/schema-form[name='default.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.337Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:59.455Z"
                            },
                            "name": "default.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-qos-sapegress-srqos:icm-qos-sapegress-srqos\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-qos-sapegress-srqos\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress\",\"name\":\"sap-egress\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SAP Egress\"},{\"columnSpan\":2,\"propertyGroup\":\"sap-egress\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.description\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.description\",\"name\":\"sap-egress.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":80,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":6,\"propertyGroup\":\"sap-egress\",\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue\",\"readOnly\":false,\"title\":\"Queue\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"sap-egress.queue\",\"key\":[\"queue-id\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-id\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-id\",\"floatingFilter\":true,\"name\":\"queue-id\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":8,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Queue ID\",\"required\":true},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-type\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-type\",\"floatingFilter\":true,\"name\":\"queue-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Queue Type\",\"required\":false,\"enum\":[{\"name\":\"expedited\",\"value\":\"expedited\"},{\"name\":\"auto-expedited\",\"value\":\"auto-expedited\"},{\"name\":\"best-effort\",\"value\":\"best-effort\"}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent\",\"floatingFilter\":true,\"name\":\"scheduler-parent\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Scheduler Parent\"},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.scheduler-name\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.scheduler-name\",\"floatingFilter\":true,\"name\":\"scheduler-parent.scheduler-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"string\",\"title\":\"Scheduler Name\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.level\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.level\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Level\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.level\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":1}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.weight\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.weight\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Weight\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.weight\",\"validations\":{\"ranges\":[{\"max\":100,\"min\":0}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-level\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-level\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR Level\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.cir-level\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":0}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-weight\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-weight\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR Weight\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.cir-weight\",\"validations\":{\"ranges\":[{\"max\":100,\"min\":0}]}},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule\",\"floatingFilter\":true,\"name\":\"adaptation-rule\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Adaptation Rule\"},{\"columnSpan\":2,\"propertyGroup\":\"adaptation-rule\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.pir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.pir\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"PIR\",\"required\":false,\"enum\":[{\"name\":\"max\",\"value\":\"max\"},{\"name\":\"min\",\"value\":\"min\"},{\"name\":\"closest\",\"value\":\"closest\"}],\"hide\":true,\"name\":\"adaptation-rule.pir\"},{\"columnSpan\":2,\"propertyGroup\":\"adaptation-rule\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.cir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.cir\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"CIR\",\"required\":false,\"enum\":[{\"name\":\"max\",\"value\":\"max\"},{\"name\":\"min\",\"value\":\"min\"},{\"name\":\"closest\",\"value\":\"closest\"}],\"hide\":true,\"name\":\"adaptation-rule.cir\"},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate\",\"floatingFilter\":true,\"name\":\"rate\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Rate\"},{\"columnSpan\":2,\"propertyGroup\":\"rate\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.pir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.pir\",\"floatingFilter\":true,\"description\":\"-1:max, <1..6400000000>\",\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"PIR\",\"required\":false,\"hide\":true,\"name\":\"rate.pir\",\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":6400000000,\"min\":1}]}},{\"columnSpan\":2,\"propertyGroup\":\"rate\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.cir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.cir\",\"floatingFilter\":true,\"description\":\"-1:max, <0..6400000000>\",\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR\",\"required\":false,\"hide\":true,\"name\":\"rate.cir\",\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":6400000000,\"min\":0}]}}]},{\"columnSpan\":6,\"propertyGroup\":\"sap-egress\",\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.fc\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.fc\",\"readOnly\":false,\"title\":\"FC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"sap-egress.fc\",\"key\":[\"fc-name\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.fc.fc-name\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.fc.fc-name\",\"floatingFilter\":true,\"name\":\"fc-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"FC Name\",\"required\":true,\"enum\":[{\"name\":\"be\",\"value\":\"be\"},{\"name\":\"l2\",\"value\":\"l2\"},{\"name\":\"af\",\"value\":\"af\"},{\"name\":\"l1\",\"value\":\"l1\"},{\"name\":\"h2\",\"value\":\"h2\"},{\"name\":\"ef\",\"value\":\"ef\"},{\"name\":\"h1\",\"value\":\"h1\"},{\"name\":\"nc\",\"value\":\"nc\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.fc.queue\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.fc.queue\",\"floatingFilter\":true,\"readOnly\":false,\"suggest\":\"suggestQueueId\",\"sortable\":true,\"type\":\"number\",\"title\":\"Queue\",\"required\":false,\"component\":\"autoComplete\",\"name\":\"queue\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":1}]}}]}]}",
                            "default-target-data": " {}",
                            "target-data-struct": "{\"sap-egress\":{\"description\":null,\"queue\":[{\"queue-id\":null,\"queue-type\":null,\"scheduler-parent\":{\"scheduler-name\":null,\"level\":null,\"weight\":null,\"cir-level\":null,\"cir-weight\":null},\"adaptation-rule\":{\"pir\":null,\"cir\":null},\"rate\":{\"pir\":null,\"cir\":null}}],\"fc\":[{\"fc-name\":null,\"queue\":null}]}}",
                            "flexible": true,
                            "keys": "[\"queue-id\",\"fc-name\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type",
                          "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-logical-lag-access'][version='2']",
                          "nsp-model:creation-time": "2024-04-23T16:55:31.479Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:57:02.752Z"
                        },
                        "name": "icm-logical-lag-access",
                        "version": 2,
                        "status": "successful",
                        "message": "Successfully imported/re-imported the intent-type",
                        "icm-descriptor": "{\n  \"role\": \"logical\",\n  \"category\": \"LAG\",\n  \"description\": \"Intent-type to configure access lag\",\n  \"device-scope\": \"mdm-and-classic\",\n  \"select-target\": \"single\"\n}\n",
                        "targets": "[{\"name\":\"templatename\",\"i18n-text\":\"TemplateName\",\"value-type\":\"STRING\",\"order\":1}, {\"name\":\"objectidentifier\",\"i18n-text\":\"ObjectIdentifier\",\"value-type\":\"STRING\",\"order\":2}, {\"name\":\"lag-name\",\"length\":\"1..27\",\"pattern\":\"^lag-.+$\",\"i18n-text\":\"LAG-NAME\",\"value-type\":\"STRING\",\"order\":3}, {\"name\":\"lag-id\",\"i18n-text\":\"LAG-ID\",\"range\":\"1..800\",\"value-type\":\"NUMBER\",\"order\":4}]",
                        "description": "Intent-type to configure access lag",
                        "role": "logical",
                        "category": "LAG",
                        "device-scope": "mdm-and-classic",
                        "creation-time": "2024-04-23T16:55:32.443126Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:57:02.746492Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-logical-lag-access'][version='2']/target-identifiers[name='lag-name']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.449Z"
                            },
                            "name": "lag-name",
                            "display-name": "LAG-NAME",
                            "order": 3,
                            "pattern": "^lag-.+$"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-logical-lag-access'][version='2']/target-identifiers[name='lag-id']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.449Z"
                            },
                            "name": "lag-id",
                            "display-name": "LAG-ID",
                            "order": 4
                          }
                        ],
                        "schema-form": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-logical-lag-access'][version='2']/schema-form[name='default.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:57:02.753Z"
                            },
                            "name": "default.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-logical-lag-access:icm-logical-lag-access\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-logical-lag-access\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag\",\"name\":\"lag\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LAG\"},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.description\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.description\",\"name\":\"lag.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":255,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-logical-lag-access.lag.admin-state\",\"name\":\"lag.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.max-ports\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.max-ports\",\"name\":\"lag.max-ports\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Max Ports\",\"required\":false,\"enum\":[{\"name\":\"32\",\"value\":\"32\"},{\"name\":\"64\",\"value\":\"64\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.encap-type\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.encap-type\",\"name\":\"lag.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.mode\",\"default\":\"access\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.mode\",\"name\":\"lag.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"},{\"name\":\"network\",\"value\":\"network\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-type\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-type\",\"name\":\"lag.port-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Port Type\",\"required\":false,\"enum\":[{\"name\":\"standard\",\"value\":\"standard\"},{\"name\":\"hs\",\"value\":\"hs\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp-xmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp-xmit-interval\",\"name\":\"lag.lacp-xmit-interval\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"LACP Xmit Interval\",\"required\":false,\"enum\":[{\"name\":\"slow\",\"value\":\"slow\"},{\"name\":\"fast\",\"value\":\"fast\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp-xmit-stdby\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp-xmit-stdby\",\"name\":\"lag.lacp-xmit-stdby\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"LACP Xmit Stdby\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp\",\"name\":\"lag.lacp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LACP\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.enableLacp\",\"default\":false,\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.enableLacp\",\"name\":\"lag.lacp.enableLacp\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable LACP\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.mode\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.mode\",\"name\":\"lag.lacp.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"when\":\"lag.lacp.enableLacp = 'true'\",\"required\":false,\"enum\":[{\"name\":\"passive\",\"value\":\"passive\"},{\"name\":\"active\",\"value\":\"active\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.administrative-key\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.administrative-key\",\"name\":\"lag.lacp.administrative-key\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":1}]},\"type\":\"number\",\"title\":\"Administrative Key\",\"when\":\"lag.lacp.enableLacp = 'true'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.system-id\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.system-id\",\"name\":\"lag.lacp.system-id\",\"readOnly\":false,\"type\":\"string\",\"title\":\"System Id\",\"when\":\"lag.lacp.enableLacp = 'true' and lag.mode = 'access'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.system-priority\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.system-priority\",\"name\":\"lag.lacp.system-priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":0}]},\"type\":\"number\",\"title\":\"System Priority\",\"when\":\"lag.lacp.enableLacp = 'true' and lag.mode = 'access'\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold\",\"name\":\"lag.port-threshold\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port Threshold\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.value\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.value\",\"name\":\"lag.port-threshold.value\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":63,\"min\":0}]},\"type\":\"number\",\"title\":\"Value\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.action\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.action\",\"name\":\"lag.port-threshold.action\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Action\",\"required\":false,\"enum\":[{\"name\":\"down\",\"value\":\"down\"},{\"name\":\"dynamic-cost\",\"value\":\"dynamic-cost\"},{\"name\":\"static-cost\",\"value\":\"static-cost\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.cost\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.cost\",\"name\":\"lag.port-threshold.cost\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":16777215,\"min\":1}]},\"type\":\"number\",\"title\":\"Cost\",\"when\":{\"field\":\"lag.port-threshold.action\",\"value\":\"static-cost\",\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash\",\"name\":\"lag.per-link-hash\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Per Link Hash\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.per-link-hash\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.enablePerLinkHash\",\"default\":false,\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.enablePerLinkHash\",\"name\":\"lag.per-link-hash.enablePerLinkHash\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable Per Link Hash\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag.per-link-hash\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.weighted\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.weighted\",\"name\":\"lag.per-link-hash.weighted\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Weighted\",\"when\":{\"field\":\"lag.per-link-hash.enablePerLinkHash\",\"value\":true,\"operator\":\"equals\"}},{\"columnSpan\":2,\"propertyGroup\":\"lag.per-link-hash.weighted\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.weighted.enableWeighted\",\"default\":false,\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.weighted.enableWeighted\",\"name\":\"lag.per-link-hash.weighted.enableWeighted\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable Weighted\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.per-link-hash.weighted\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.weighted.auto-rebalance\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.weighted.auto-rebalance\",\"name\":\"lag.per-link-hash.weighted.auto-rebalance\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Auto Rebalance\",\"when\":{\"field\":\"lag.per-link-hash.weighted.enableWeighted\",\"value\":true,\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness\",\"name\":\"lag.bfd-liveness\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"BFD\"},{\"columnSpan\":7,\"propertyGroup\":\"lag.bfd-liveness\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4\",\"name\":\"lag.bfd-liveness.ipv4\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"IPv4\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.admin-state\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.admin-state\",\"name\":\"lag.bfd-liveness.ipv4.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.local-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.local-ip-address\",\"name\":\"lag.bfd-liveness.ipv4.local-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patternsOperator\":\"and\",\"patterns\":[\"[0-9\\\\.]*\",\"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\\\p{N}\\\\p{L}]+)?\"]},\"type\":\"string\",\"title\":\"Local IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.remote-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.remote-ip-address\",\"name\":\"lag.bfd-liveness.ipv4.remote-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patternsOperator\":\"and\",\"patterns\":[\"[0-9\\\\.]*\",\"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\\\p{N}\\\\p{L}]+)?\"]},\"type\":\"string\",\"title\":\"Remote IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.receive-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.receive-interval\",\"name\":\"lag.bfd-liveness.ipv4.receive-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Receive Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.transmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.transmit-interval\",\"name\":\"lag.bfd-liveness.ipv4.transmit-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Transmit Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-admin-down-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":3600,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-admin-down-time\",\"name\":\"lag.bfd-liveness.ipv4.max-admin-down-time\",\"description\":\"seconds: [0..3600|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Admin Down Time (seconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-setup-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":60000,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-setup-time\",\"name\":\"lag.bfd-liveness.ipv4.max-setup-time\",\"description\":\"milliseconds: [0..60000|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Setup Time (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.multiplier\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.multiplier\",\"name\":\"lag.bfd-liveness.ipv4.multiplier\",\"description\":\"3..20\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":20,\"min\":3}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag.bfd-liveness\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6\",\"name\":\"lag.bfd-liveness.ipv6\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"IPv6\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.admin-state\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.admin-state\",\"name\":\"lag.bfd-liveness.ipv6.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.local-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.local-ip-address\",\"name\":\"lag.bfd-liveness.ipv6.local-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"]},\"type\":\"string\",\"title\":\"Local IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.remote-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.remote-ip-address\",\"name\":\"lag.bfd-liveness.ipv6.remote-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"]},\"type\":\"string\",\"title\":\"Remote IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.receive-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.receive-interval\",\"name\":\"lag.bfd-liveness.ipv6.receive-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Receive Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.transmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.transmit-interval\",\"name\":\"lag.bfd-liveness.ipv6.transmit-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Transmit Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-admin-down-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":3600,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-admin-down-time\",\"name\":\"lag.bfd-liveness.ipv6.max-admin-down-time\",\"description\":\"seconds: [0..3600|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Admin Down Time (seconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-setup-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":60000,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-setup-time\",\"name\":\"lag.bfd-liveness.ipv6.max-setup-time\",\"description\":\"milliseconds: [0..60000|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Setup Time (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.multiplier\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.multiplier\",\"name\":\"lag.bfd-liveness.ipv6.multiplier\",\"description\":\"3..20\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":20,\"min\":3}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":6,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port\",\"componentId\":\"icm-logical-lag-access.lag.port\",\"readOnly\":false,\"title\":\"Port\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"lag.port\",\"key\":[\"port-id\"],\"properties\":[{\"columnSpan\":2,\"displayKey\":\"port-id\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.port-id\",\"componentId\":\"icm-logical-lag-access.lag.port.port-id\",\"floatingFilter\":true,\"readOnly\":false,\"componentProps\":{\"isPagination\":true,\"isObject\":false,\"paginationProps\":{\"pageLabel\":\"Page\"}},\"suggest\":\"suggestPortIds\",\"sortable\":true,\"type\":\"leafref\",\"title\":\"Port Id\",\"required\":true,\"name\":\"port-id\",\"properties\":[{\"name\":\"port-id\",\"description\":\"Port ID\",\"floatingFilter\":true,\"title\":\"Port ID\",\"type\":\"string\"},{\"name\":\"description\",\"description\":\"Description\",\"floatingFilter\":true,\"title\":\"Description\",\"type\":\"string\"},{\"name\":\"encapType\",\"description\":\"Encapsulation Type\",\"floatingFilter\":true,\"title\":\"Encapsulation Type\",\"type\":\"string\"},{\"name\":\"mode\",\"description\":\"Mode\",\"floatingFilter\":true,\"title\":\"Mode\",\"type\":\"string\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.priority\",\"componentId\":\"icm-logical-lag-access.lag.port.priority\",\"floatingFilter\":true,\"name\":\"priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Priority\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.sub-group\",\"componentId\":\"icm-logical-lag-access.lag.port.sub-group\",\"floatingFilter\":true,\"name\":\"sub-group\",\"description\":\"-2:auto-iom, -1:auto-mda, <1..8>\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-2},{\"max\":8,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Sub Group\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.hash-weight\",\"componentId\":\"icm-logical-lag-access.lag.port.hash-weight\",\"floatingFilter\":true,\"name\":\"hash-weight\",\"description\":\"-1:port-speed, <1..100000>\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":100000,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Hash Weight\",\"required\":false}]}]}",
                            "default-target-data": " {\"lag\":{\"admin-state\":\"enable\",\"mode\":\"access\",\"lacp\":{\"enableLacp\":false},\"per-link-hash\":{\"enablePerLinkHash\":false,\"weighted\":{\"enableWeighted\":false}}}}",
                            "target-data-struct": "{\"lag\":{\"description\":null,\"admin-state\":null,\"max-ports\":null,\"encap-type\":null,\"mode\":null,\"port-type\":null,\"lacp-xmit-interval\":null,\"lacp-xmit-stdby\":null,\"lacp\":{\"enableLacp\":null,\"mode\":null,\"administrative-key\":null,\"system-id\":null,\"system-priority\":null},\"port-threshold\":{\"value\":null,\"action\":null,\"cost\":null},\"per-link-hash\":{\"enablePerLinkHash\":null,\"weighted\":{\"enableWeighted\":null,\"auto-rebalance\":null}},\"bfd-liveness\":{\"ipv4\":{\"admin-state\":null,\"local-ip-address\":null,\"remote-ip-address\":null,\"receive-interval\":null,\"transmit-interval\":null,\"max-admin-down-time\":null,\"max-setup-time\":null,\"multiplier\":null},\"ipv6\":{\"admin-state\":null,\"local-ip-address\":null,\"remote-ip-address\":null,\"receive-interval\":null,\"transmit-interval\":null,\"max-admin-down-time\":null,\"max-setup-time\":null,\"multiplier\":null}},\"port\":[{\"port-id\":null,\"priority\":null,\"sub-group\":null,\"hash-weight\":null}]}}",
                            "flexible": true,
                            "keys": "[\"port-id\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-logical-lag-access'][version='2']/schema-form[name='defaultIXR.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.449Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:57:02.754Z"
                            },
                            "name": "defaultIXR.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-logical-lag-access:icm-logical-lag-access\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-logical-lag-access\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag\",\"name\":\"lag\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LAG\"},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.description\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.description\",\"name\":\"lag.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":255,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-logical-lag-access.lag.admin-state\",\"name\":\"lag.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.encap-type\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.encap-type\",\"name\":\"lag.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.mode\",\"default\":\"access\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.mode\",\"name\":\"lag.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"},{\"name\":\"network\",\"value\":\"network\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp-xmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp-xmit-interval\",\"name\":\"lag.lacp-xmit-interval\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"LACP Xmit Interval\",\"required\":false,\"enum\":[{\"name\":\"slow\",\"value\":\"slow\"},{\"name\":\"fast\",\"value\":\"fast\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp-xmit-stdby\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp-xmit-stdby\",\"name\":\"lag.lacp-xmit-stdby\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"LACP Xmit Stdby\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp\",\"name\":\"lag.lacp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LACP\",\"when\":\"lag.mode != 'network'\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.enableLacp\",\"default\":false,\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.enableLacp\",\"name\":\"lag.lacp.enableLacp\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable LACP\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.mode\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.mode\",\"name\":\"lag.lacp.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"when\":\"lag.lacp.enableLacp = 'true'\",\"required\":false,\"enum\":[{\"name\":\"passive\",\"value\":\"passive\"},{\"name\":\"active\",\"value\":\"active\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.administrative-key\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.administrative-key\",\"name\":\"lag.lacp.administrative-key\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":1}]},\"type\":\"number\",\"title\":\"Administrative Key\",\"when\":\"lag.lacp.enableLacp = 'true'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.system-id\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.system-id\",\"name\":\"lag.lacp.system-id\",\"readOnly\":false,\"type\":\"string\",\"title\":\"System Id\",\"when\":\"lag.lacp.enableLacp = 'true' and lag.mode = 'access'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.system-priority\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.system-priority\",\"name\":\"lag.lacp.system-priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":0}]},\"type\":\"number\",\"title\":\"System Priority\",\"when\":\"lag.lacp.enableLacp = 'true' and lag.mode = 'access'\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold\",\"name\":\"lag.port-threshold\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port Threshold\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.value\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.value\",\"name\":\"lag.port-threshold.value\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":31,\"min\":0}]},\"type\":\"number\",\"title\":\"Value\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.action\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.action\",\"name\":\"lag.port-threshold.action\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Action\",\"required\":false,\"enum\":[{\"name\":\"down\",\"value\":\"down\"},{\"name\":\"dynamic-cost\",\"value\":\"dynamic-cost\"}]},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness\",\"name\":\"lag.bfd-liveness\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"BFD\"},{\"columnSpan\":7,\"propertyGroup\":\"lag.bfd-liveness\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4\",\"name\":\"lag.bfd-liveness.ipv4\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"IPv4\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.admin-state\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.admin-state\",\"name\":\"lag.bfd-liveness.ipv4.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.local-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.local-ip-address\",\"name\":\"lag.bfd-liveness.ipv4.local-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patternsOperator\":\"and\",\"patterns\":[\"[0-9\\\\.]*\",\"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\\\p{N}\\\\p{L}]+)?\"]},\"type\":\"string\",\"title\":\"Local IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.remote-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.remote-ip-address\",\"name\":\"lag.bfd-liveness.ipv4.remote-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patternsOperator\":\"and\",\"patterns\":[\"[0-9\\\\.]*\",\"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\\\p{N}\\\\p{L}]+)?\"]},\"type\":\"string\",\"title\":\"Remote IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.receive-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.receive-interval\",\"name\":\"lag.bfd-liveness.ipv4.receive-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Receive Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.transmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.transmit-interval\",\"name\":\"lag.bfd-liveness.ipv4.transmit-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Transmit Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-admin-down-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":3600,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-admin-down-time\",\"name\":\"lag.bfd-liveness.ipv4.max-admin-down-time\",\"description\":\"seconds: [0..3600|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Admin Down Time (seconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-setup-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":60000,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-setup-time\",\"name\":\"lag.bfd-liveness.ipv4.max-setup-time\",\"description\":\"milliseconds: [0..60000|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Setup Time (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.multiplier\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.multiplier\",\"name\":\"lag.bfd-liveness.ipv4.multiplier\",\"description\":\"3..20\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":20,\"min\":3}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag.bfd-liveness\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6\",\"name\":\"lag.bfd-liveness.ipv6\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"IPv6\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.admin-state\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.admin-state\",\"name\":\"lag.bfd-liveness.ipv6.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.local-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.local-ip-address\",\"name\":\"lag.bfd-liveness.ipv6.local-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"]},\"type\":\"string\",\"title\":\"Local IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.remote-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.remote-ip-address\",\"name\":\"lag.bfd-liveness.ipv6.remote-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"]},\"type\":\"string\",\"title\":\"Remote IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.receive-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.receive-interval\",\"name\":\"lag.bfd-liveness.ipv6.receive-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Receive Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.transmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.transmit-interval\",\"name\":\"lag.bfd-liveness.ipv6.transmit-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Transmit Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-admin-down-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":3600,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-admin-down-time\",\"name\":\"lag.bfd-liveness.ipv6.max-admin-down-time\",\"description\":\"seconds: [0..3600|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Admin Down Time (seconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-setup-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":60000,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-setup-time\",\"name\":\"lag.bfd-liveness.ipv6.max-setup-time\",\"description\":\"milliseconds: [0..60000|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Setup Time (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.multiplier\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.multiplier\",\"name\":\"lag.bfd-liveness.ipv6.multiplier\",\"description\":\"3..20\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":20,\"min\":3}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":6,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port\",\"componentId\":\"icm-logical-lag-access.lag.port\",\"readOnly\":false,\"title\":\"Port\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"lag.port\",\"key\":[\"port-id\"],\"properties\":[{\"columnSpan\":2,\"displayKey\":\"port-id\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.port-id\",\"componentId\":\"icm-logical-lag-access.lag.port.port-id\",\"floatingFilter\":true,\"readOnly\":false,\"componentProps\":{\"isPagination\":true,\"isObject\":false,\"paginationProps\":{\"pageLabel\":\"Page\"}},\"suggest\":\"suggestPortIds\",\"sortable\":true,\"type\":\"leafref\",\"title\":\"Port Id\",\"required\":true,\"name\":\"port-id\",\"properties\":[{\"name\":\"port-id\",\"description\":\"Port ID\",\"floatingFilter\":true,\"title\":\"Port ID\",\"type\":\"string\"},{\"name\":\"description\",\"description\":\"Description\",\"floatingFilter\":true,\"title\":\"Description\",\"type\":\"string\"},{\"name\":\"encapType\",\"description\":\"Encapsulation Type\",\"floatingFilter\":true,\"title\":\"Encapsulation Type\",\"type\":\"string\"},{\"name\":\"mode\",\"description\":\"Mode\",\"floatingFilter\":true,\"title\":\"Mode\",\"type\":\"string\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.priority\",\"componentId\":\"icm-logical-lag-access.lag.port.priority\",\"floatingFilter\":true,\"name\":\"priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Priority\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.sub-group\",\"componentId\":\"icm-logical-lag-access.lag.port.sub-group\",\"floatingFilter\":true,\"name\":\"sub-group\",\"description\":\"-2:auto-iom, -1:auto-mda, <1..8>\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-2},{\"max\":8,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Sub Group\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.hash-weight\",\"componentId\":\"icm-logical-lag-access.lag.port.hash-weight\",\"floatingFilter\":true,\"name\":\"hash-weight\",\"description\":\"-1:port-speed, <1..100000>\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":100000,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Hash Weight\",\"required\":false}]}]}",
                            "default-target-data": " {\"lag\":{\"admin-state\":\"enable\",\"mode\":\"access\",\"lacp\":{\"enableLacp\":false}}}",
                            "target-data-struct": "{\"lag\":{\"description\":null,\"admin-state\":null,\"encap-type\":null,\"mode\":null,\"lacp-xmit-interval\":null,\"lacp-xmit-stdby\":null,\"lacp\":{\"enableLacp\":null,\"mode\":null,\"administrative-key\":null,\"system-id\":null,\"system-priority\":null},\"port-threshold\":{\"value\":null,\"action\":null},\"bfd-liveness\":{\"ipv4\":{\"admin-state\":null,\"local-ip-address\":null,\"remote-ip-address\":null,\"receive-interval\":null,\"transmit-interval\":null,\"max-admin-down-time\":null,\"max-setup-time\":null,\"multiplier\":null},\"ipv6\":{\"admin-state\":null,\"local-ip-address\":null,\"remote-ip-address\":null,\"receive-interval\":null,\"transmit-interval\":null,\"max-admin-down-time\":null,\"max-setup-time\":null,\"multiplier\":null}},\"port\":[{\"port-id\":null,\"priority\":null,\"sub-group\":null,\"hash-weight\":null}]}}",
                            "flexible": true,
                            "keys": "[\"port-id\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type",
                          "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-ethernet'][version='2']",
                          "nsp-model:creation-time": "2024-04-23T16:55:31.542Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:56:42.248Z"
                        },
                        "name": "icm-equipment-port-ethernet",
                        "version": 2,
                        "status": "successful",
                        "message": "Successfully imported/re-imported the intent-type",
                        "icm-descriptor": "{\n  \"category\": \"port\",\n  \"description\": \"Intent-type to configure physical, breakout, xiom and satellite ports\",\n  \"role\": \"physical\",\n  \"device-scope\": \"mdm-and-classic\",\n  \"target-xpath\": \"/nsp-equipment:network/network-element/hardware-component/port[boolean(port-details[port-type!='connector-port'])][not(contains('name','/u'))][boolean (parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/shelf'][not(contains('component-id','shelf=1-6-'))]) or boolean(parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/port']) or boolean(parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/card'][not(containsIgnoreCase('name','Processor'))])]\"\n}\n",
                        "targets": "[{\"name\":\"templatename\",\"i18n-text\":\"TemplateName\",\"value-type\":\"STRING\",\"order\":1}, {\"name\":\"objectidentifier\",\"i18n-text\":\"ObjectIdentifier\",\"value-type\":\"STRING\",\"order\":2}, {\"name\":\"port-id\",\"i18n-text\":\"Port-ID\",\"value-type\":\"STRING\",\"order\":3}]",
                        "description": "Intent-type to configure physical, breakout, xiom and satellite ports",
                        "role": "physical",
                        "category": "port",
                        "device-scope": "mdm-and-classic",
                        "creation-time": "2024-04-23T16:55:32.418938Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:56:42.240921Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-ethernet'][version='2']/target-identifiers[name='port-id']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.421Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:55:32.421Z"
                            },
                            "name": "port-id",
                            "display-name": "Port-ID",
                            "order": 3
                          }
                        ],
                        "schema-form": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-ethernet'][version='2']/schema-form[name='default.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.421Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:56:42.250Z"
                            },
                            "name": "default.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-ethernet\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-equipment-port-ethernet.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.description\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.description\",\"name\":\"port.description\",\"readOnly\":false,\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet\",\"name\":\"port.ethernet\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Ethernet\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.accounting-policy\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.accounting-policy\",\"name\":\"port.ethernet.accounting-policy\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":4294967295,\"min\":0}]},\"type\":\"number\",\"title\":\"Accounting Policy\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.collect-stats\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.collect-stats\",\"name\":\"port.ethernet.collect-stats\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Collect Stats\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"newRow\":true,\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"name\":\"port.ethernet.autonegotiate\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Autonegotiate\",\"required\":false,\"enum\":[{\"name\":\"notApplicable\",\"value\":\"notApplicable\"},{\"name\":\"true\",\"value\":\"true\"},{\"name\":\"false\",\"value\":\"false\"},{\"name\":\"limited\",\"value\":\"limited\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"name\":\"port.ethernet.dot1q-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Dot1 Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"name\":\"port.ethernet.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"name\":\"port.ethernet.mtu\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9800,\"min\":512}]},\"type\":\"number\",\"title\":\"MTU\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.pbb-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.pbb-etype\",\"name\":\"port.ethernet.pbb-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"PBB Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"name\":\"port.ethernet.qinq-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Q in Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"name\":\"port.ethernet.speed\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":10,\"min\":10},{\"max\":100,\"min\":100},{\"max\":1000,\"min\":1000},{\"max\":10000,\"min\":10000},{\"max\":25000,\"min\":25000},{\"max\":40000,\"min\":40000},{\"max\":50000,\"min\":50000},{\"max\":100000,\"min\":100000}]},\"type\":\"number\",\"title\":\"Speed\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"name\":\"port.ethernet.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"network\",\"value\":\"network\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"}]},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"name\":\"port.ethernet.hold-time\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Hold Time\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"name\":\"port.ethernet.hold-time.down\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Down\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"name\":\"port.ethernet.hold-time.units\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Units\",\"required\":false,\"enum\":[{\"name\":\"seconds\",\"value\":\"seconds\"},{\"name\":\"centiseconds\",\"value\":\"centiseconds\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"name\":\"port.ethernet.hold-time.up\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Up\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"name\":\"port.ethernet.down-when-looped\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Down When Looped\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"name\":\"port.ethernet.down-when-looped.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"name\":\"port.ethernet.down-when-looped.keep-alive\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":120,\"min\":1}]},\"type\":\"number\",\"title\":\"Keep Alive\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"name\":\"port.ethernet.down-when-looped.retry-timeout\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":0,\"min\":0},{\"max\":160,\"min\":10}]},\"type\":\"number\",\"title\":\"Retry Timeout\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"name\":\"port.ethernet.down-when-looped.use-broadcast-address\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Use Broadcast Address\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"name\":\"port.ethernet.ssm\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SSM\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"name\":\"port.ethernet.ssm.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"name\":\"port.ethernet.ssm.code-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Code Type\",\"required\":false,\"enum\":[{\"name\":\"sonet\",\"value\":\"sonet\"},{\"name\":\"sdh\",\"value\":\"sdh\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.esmc-tunnel\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.esmc-tunnel\",\"name\":\"port.ethernet.ssm.esmc-tunnel\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"ESMC Tunnel\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"name\":\"port.ethernet.ssm.tx-dus\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Tx Dus\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"name\":\"port.ethernet.crc-monitor\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"CRC Monitor\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"name\":\"port.ethernet.crc-monitor.window-size\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":60,\"min\":5}]},\"type\":\"number\",\"title\":\"Window Size\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"name\":\"port.ethernet.crc-monitor.signal-degrade\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Degrade\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"name\":\"port.ethernet.crc-monitor.signal-failure\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Failure\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-failure.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-failure.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"name\":\"port.ethernet.lldp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LLDP\"},{\"columnSpan\":6,\"propertyGroup\":\"port.ethernet.lldp\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"readOnly\":false,\"title\":\"Dest MAC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"port.ethernet.lldp.dest-mac\",\"key\":[\"mac-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"floatingFilter\":true,\"name\":\"mac-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"MAC Type\",\"required\":true,\"enum\":[{\"name\":\"nearest-bridge\",\"value\":\"nearest-bridge\"},{\"name\":\"nearest-non-tpmr\",\"value\":\"nearest-non-tpmr\"},{\"name\":\"nearest-customer\",\"value\":\"nearest-customer\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"floatingFilter\":true,\"name\":\"notification\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Notification\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"floatingFilter\":true,\"name\":\"port-id-subtype\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Port Id Subtype\",\"required\":false,\"enum\":[{\"name\":\"tx-if-alias\",\"value\":\"tx-if-alias\"},{\"name\":\"tx-if-name\",\"value\":\"tx-if-name\"},{\"name\":\"tx-local\",\"value\":\"tx-local\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"floatingFilter\":true,\"name\":\"receive\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Receive\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"floatingFilter\":true,\"name\":\"transmit\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Transmit\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"floatingFilter\":true,\"name\":\"tunnel-nearest-bridge\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Tunnel Nearest Bridge\",\"when\":{\"field\":\"mac-type\",\"value\":\"nearest-bridge\",\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":6,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"title\":\"Tx Mgmt Address\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"tx-mgmt-address\",\"key\":[\"mgmt-address-system-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"floatingFilter\":true,\"name\":\"admin-state\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"floatingFilter\":true,\"name\":\"mgmt-address-system-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Mgmt Address System Type\",\"required\":true,\"enum\":[{\"name\":\"oob\",\"value\":\"oob\"},{\"name\":\"system\",\"value\":\"system\"},{\"name\":\"system-ipv6\",\"value\":\"system-ipv6\"},{\"name\":\"oob-ipv6\",\"value\":\"oob-ipv6\"}]}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"floatingFilter\":true,\"name\":\"tx-tlvs\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Tx TLVs\"},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.port-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Port Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-cap\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Cap\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Name\",\"required\":false}]}]}",
                            "default-target-data": " {\"port\":{\"admin-state\":\"enable\"}}",
                            "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"ethernet\":{\"accounting-policy\":null,\"collect-stats\":null,\"autonegotiate\":null,\"dot1q-etype\":null,\"encap-type\":null,\"mtu\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"speed\":null,\"mode\":null,\"hold-time\":{\"down\":null,\"units\":null,\"up\":null},\"down-when-looped\":{\"admin-state\":null,\"keep-alive\":null,\"retry-timeout\":null,\"use-broadcast-address\":null},\"ssm\":{\"admin-state\":null,\"code-type\":null,\"esmc-tunnel\":null,\"tx-dus\":null},\"crc-monitor\":{\"window-size\":null,\"signal-degrade\":{\"threshold\":null,\"multiplier\":null},\"signal-failure\":{\"threshold\":null,\"multiplier\":null}},\"lldp\":{\"dest-mac\":[{\"mac-type\":null,\"notification\":null,\"port-id-subtype\":null,\"receive\":null,\"transmit\":null,\"tunnel-nearest-bridge\":null,\"tx-mgmt-address\":[{\"admin-state\":null,\"mgmt-address-system-type\":null}],\"tx-tlvs\":{\"port-desc\":null,\"sys-cap\":null,\"sys-desc\":null,\"sys-name\":null}}]}}}}",
                            "flexible": true,
                            "keys": "[\"mac-type\",\"mgmt-address-system-type\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-ethernet'][version='2']/schema-form[name='defaultIXR.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.421Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:56:42.252Z"
                            },
                            "name": "defaultIXR.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-ethernet\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-equipment-port-ethernet.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.description\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.description\",\"name\":\"port.description\",\"readOnly\":false,\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet\",\"name\":\"port.ethernet\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Ethernet\"},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.access\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.access\",\"name\":\"port.ethernet.access\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Access\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.access\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.access.accounting-policy\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.access.accounting-policy\",\"name\":\"port.ethernet.access.accounting-policy\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":4294967295,\"min\":0}]},\"type\":\"number\",\"title\":\"Accounting Policy\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.access\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.access.collect-stats\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.access.collect-stats\",\"name\":\"port.ethernet.access.collect-stats\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Collect Stats\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.egress\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.egress\",\"name\":\"port.ethernet.egress\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Egress\"},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.egress\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.egress.port-qos-policy\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.egress.port-qos-policy\",\"name\":\"port.ethernet.egress.port-qos-policy\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port Qos Policy\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.egress.port-qos-policy\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.egress.port-qos-policy.policy-name\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.egress.port-qos-policy.policy-name\",\"name\":\"port.ethernet.egress.port-qos-policy.policy-name\",\"description\":\"enter 'default' to clear the policy\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":64,\"min\":0}]},\"type\":\"string\",\"title\":\"Policy Name\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"newRow\":true,\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"name\":\"port.ethernet.autonegotiate\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Autonegotiate\",\"required\":false,\"enum\":[{\"name\":\"notApplicable\",\"value\":\"notApplicable\"},{\"name\":\"true\",\"value\":\"true\"},{\"name\":\"false\",\"value\":\"false\"},{\"name\":\"limited\",\"value\":\"limited\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"name\":\"port.ethernet.dot1q-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Dot1 Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"name\":\"port.ethernet.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"name\":\"port.ethernet.mtu\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9800,\"min\":512}]},\"type\":\"number\",\"title\":\"MTU\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"name\":\"port.ethernet.qinq-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Q in Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"name\":\"port.ethernet.speed\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":10,\"min\":10},{\"max\":100,\"min\":100},{\"max\":1000,\"min\":1000},{\"max\":10000,\"min\":10000},{\"max\":25000,\"min\":25000},{\"max\":40000,\"min\":40000},{\"max\":50000,\"min\":50000},{\"max\":100000,\"min\":100000}]},\"type\":\"number\",\"title\":\"Speed\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"name\":\"port.ethernet.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"network\",\"value\":\"network\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"}]},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"name\":\"port.ethernet.hold-time\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Hold Time\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"name\":\"port.ethernet.hold-time.down\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Down\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"name\":\"port.ethernet.hold-time.units\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Units\",\"required\":false,\"enum\":[{\"name\":\"seconds\",\"value\":\"seconds\"},{\"name\":\"centiseconds\",\"value\":\"centiseconds\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"name\":\"port.ethernet.hold-time.up\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Up\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"name\":\"port.ethernet.down-when-looped\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Down When Looped\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"name\":\"port.ethernet.down-when-looped.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"name\":\"port.ethernet.down-when-looped.keep-alive\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":120,\"min\":1}]},\"type\":\"number\",\"title\":\"Keep Alive\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"name\":\"port.ethernet.down-when-looped.retry-timeout\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":0,\"min\":0},{\"max\":160,\"min\":10}]},\"type\":\"number\",\"title\":\"Retry Timeout\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"name\":\"port.ethernet.down-when-looped.use-broadcast-address\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Use Broadcast Address\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"name\":\"port.ethernet.ssm\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SSM\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"name\":\"port.ethernet.ssm.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"name\":\"port.ethernet.ssm.code-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Code Type\",\"required\":false,\"enum\":[{\"name\":\"sonet\",\"value\":\"sonet\"},{\"name\":\"sdh\",\"value\":\"sdh\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.esmc-tunnel\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.esmc-tunnel\",\"name\":\"port.ethernet.ssm.esmc-tunnel\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"ESMC Tunnel\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"name\":\"port.ethernet.ssm.tx-dus\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Tx Dus\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"name\":\"port.ethernet.crc-monitor\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"CRC Monitor\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"name\":\"port.ethernet.crc-monitor.window-size\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":60,\"min\":5}]},\"type\":\"number\",\"title\":\"Window Size\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"name\":\"port.ethernet.crc-monitor.signal-degrade\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Degrade\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"name\":\"port.ethernet.crc-monitor.signal-failure\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Failure\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-failure.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-failure.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"name\":\"port.ethernet.lldp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LLDP\"},{\"columnSpan\":6,\"propertyGroup\":\"port.ethernet.lldp\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"readOnly\":false,\"title\":\"Dest MAC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"port.ethernet.lldp.dest-mac\",\"key\":[\"mac-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"floatingFilter\":true,\"name\":\"mac-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"MAC Type\",\"required\":true,\"enum\":[{\"name\":\"nearest-bridge\",\"value\":\"nearest-bridge\"},{\"name\":\"nearest-non-tpmr\",\"value\":\"nearest-non-tpmr\"},{\"name\":\"nearest-customer\",\"value\":\"nearest-customer\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"floatingFilter\":true,\"name\":\"notification\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Notification\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"floatingFilter\":true,\"name\":\"port-id-subtype\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Port Id Subtype\",\"required\":false,\"enum\":[{\"name\":\"tx-if-alias\",\"value\":\"tx-if-alias\"},{\"name\":\"tx-if-name\",\"value\":\"tx-if-name\"},{\"name\":\"tx-local\",\"value\":\"tx-local\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"floatingFilter\":true,\"name\":\"receive\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Receive\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"floatingFilter\":true,\"name\":\"transmit\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Transmit\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"floatingFilter\":true,\"name\":\"tunnel-nearest-bridge\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Tunnel Nearest Bridge\",\"when\":{\"field\":\"mac-type\",\"value\":\"nearest-bridge\",\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":6,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"title\":\"Tx Mgmt Address\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"tx-mgmt-address\",\"key\":[\"mgmt-address-system-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"floatingFilter\":true,\"name\":\"admin-state\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"floatingFilter\":true,\"name\":\"mgmt-address-system-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Mgmt Address System Type\",\"required\":true,\"enum\":[{\"name\":\"oob\",\"value\":\"oob\"},{\"name\":\"system\",\"value\":\"system\"},{\"name\":\"system-ipv6\",\"value\":\"system-ipv6\"},{\"name\":\"oob-ipv6\",\"value\":\"oob-ipv6\"}]}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"floatingFilter\":true,\"name\":\"tx-tlvs\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Tx TLVs\"},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.port-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Port Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-cap\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Cap\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Name\",\"required\":false}]}]}",
                            "default-target-data": " {\"port\":{\"admin-state\":\"enable\"}}",
                            "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"ethernet\":{\"access\":{\"accounting-policy\":null,\"collect-stats\":null},\"egress\":{\"port-qos-policy\":{\"policy-name\":null}},\"autonegotiate\":null,\"dot1q-etype\":null,\"encap-type\":null,\"mtu\":null,\"qinq-etype\":null,\"speed\":null,\"mode\":null,\"hold-time\":{\"down\":null,\"units\":null,\"up\":null},\"down-when-looped\":{\"admin-state\":null,\"keep-alive\":null,\"retry-timeout\":null,\"use-broadcast-address\":null},\"ssm\":{\"admin-state\":null,\"code-type\":null,\"esmc-tunnel\":null,\"tx-dus\":null},\"crc-monitor\":{\"window-size\":null,\"signal-degrade\":{\"threshold\":null,\"multiplier\":null},\"signal-failure\":{\"threshold\":null,\"multiplier\":null}},\"lldp\":{\"dest-mac\":[{\"mac-type\":null,\"notification\":null,\"port-id-subtype\":null,\"receive\":null,\"transmit\":null,\"tunnel-nearest-bridge\":null,\"tx-mgmt-address\":[{\"admin-state\":null,\"mgmt-address-system-type\":null}],\"tx-tlvs\":{\"port-desc\":null,\"sys-cap\":null,\"sys-desc\":null,\"sys-name\":null}}]}}}}",
                            "flexible": true,
                            "keys": "[\"mac-type\",\"mgmt-address-system-type\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-ethernet'][version='2']/schema-form[name='defaultSAR.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.421Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:56:42.253Z"
                            },
                            "name": "defaultSAR.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-ethernet\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-equipment-port-ethernet.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.description\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.description\",\"name\":\"port.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":160,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet\",\"name\":\"port.ethernet\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Ethernet\"},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.network\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.network\",\"name\":\"port.ethernet.network\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Network\",\"when\":\"port.ethernet.mode = 'network' or port.ethernet.mode = 'hybrid'\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.network\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.network.accounting-policy\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.network.accounting-policy\",\"name\":\"port.ethernet.network.accounting-policy\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":4294967295,\"min\":0}]},\"type\":\"number\",\"title\":\"Accounting Policy\",\"when\":\"port.ethernet.mode = 'network' or port.ethernet.mode = 'hybrid'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.network\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.network.collect-stats\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.network.collect-stats\",\"name\":\"port.ethernet.network.collect-stats\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Collect Stats\",\"when\":\"port.ethernet.mode = 'network' or port.ethernet.mode = 'hybrid'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"newRow\":true,\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"name\":\"port.ethernet.autonegotiate\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Autonegotiate\",\"required\":false,\"enum\":[{\"name\":\"notApplicable\",\"value\":\"notApplicable\"},{\"name\":\"true\",\"value\":\"true\"},{\"name\":\"false\",\"value\":\"false\"},{\"name\":\"limited\",\"value\":\"limited\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"name\":\"port.ethernet.dot1q-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Dot1 Q Etype\",\"when\":\"port.ethernet.mode != 'network'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"name\":\"port.ethernet.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"name\":\"port.ethernet.mtu\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9732,\"min\":128}]},\"type\":\"number\",\"title\":\"MTU\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"name\":\"port.ethernet.qinq-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Q in Q Etype\",\"when\":\"port.ethernet.mode != 'network'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"name\":\"port.ethernet.speed\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":10,\"min\":10},{\"max\":100,\"min\":100},{\"max\":1000,\"min\":1000},{\"max\":10000,\"min\":10000},{\"max\":25000,\"min\":25000},{\"max\":40000,\"min\":40000},{\"max\":50000,\"min\":50000},{\"max\":100000,\"min\":100000}]},\"type\":\"number\",\"title\":\"Speed\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"name\":\"port.ethernet.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"network\",\"value\":\"network\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"}]},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"name\":\"port.ethernet.hold-time\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Hold Time\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"name\":\"port.ethernet.hold-time.down\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":900,\"min\":0}]},\"type\":\"number\",\"title\":\"Down\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"name\":\"port.ethernet.hold-time.units\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Units\",\"required\":false,\"enum\":[{\"name\":\"seconds\",\"value\":\"seconds\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"name\":\"port.ethernet.hold-time.up\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":900,\"min\":0}]},\"type\":\"number\",\"title\":\"Up\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"name\":\"port.ethernet.down-when-looped\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Down When Looped\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"name\":\"port.ethernet.down-when-looped.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"name\":\"port.ethernet.down-when-looped.keep-alive\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":120,\"min\":1}]},\"type\":\"number\",\"title\":\"Keep Alive\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"name\":\"port.ethernet.down-when-looped.retry-timeout\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":0,\"min\":0},{\"max\":160,\"min\":10}]},\"type\":\"number\",\"title\":\"Retry Timeout\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"name\":\"port.ethernet.down-when-looped.use-broadcast-address\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Use Broadcast Address\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"name\":\"port.ethernet.ssm\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SSM\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"name\":\"port.ethernet.ssm.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"name\":\"port.ethernet.ssm.code-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Code Type\",\"required\":false,\"enum\":[{\"name\":\"sonet\",\"value\":\"sonet\"},{\"name\":\"sdh\",\"value\":\"sdh\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"name\":\"port.ethernet.ssm.tx-dus\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Tx Dus\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"name\":\"port.ethernet.crc-monitor\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"CRC Monitor\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"name\":\"port.ethernet.crc-monitor.window-size\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":60,\"min\":5}]},\"type\":\"number\",\"title\":\"Window Size\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"name\":\"port.ethernet.crc-monitor.signal-degrade\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Degrade\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"name\":\"port.ethernet.crc-monitor.signal-failure\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Failure\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-failure.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-failure.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"name\":\"port.ethernet.lldp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LLDP\"},{\"columnSpan\":6,\"propertyGroup\":\"port.ethernet.lldp\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"readOnly\":false,\"title\":\"Dest MAC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"port.ethernet.lldp.dest-mac\",\"key\":[\"mac-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"floatingFilter\":true,\"name\":\"mac-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"MAC Type\",\"required\":true,\"enum\":[{\"name\":\"nearest-bridge\",\"value\":\"nearest-bridge\"},{\"name\":\"nearest-non-tpmr\",\"value\":\"nearest-non-tpmr\"},{\"name\":\"nearest-customer\",\"value\":\"nearest-customer\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"floatingFilter\":true,\"name\":\"notification\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Notification\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"floatingFilter\":true,\"name\":\"port-id-subtype\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Port Id Subtype\",\"required\":false,\"enum\":[{\"name\":\"tx-if-alias\",\"value\":\"tx-if-alias\"},{\"name\":\"tx-if-name\",\"value\":\"tx-if-name\"},{\"name\":\"tx-local\",\"value\":\"tx-local\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"floatingFilter\":true,\"name\":\"receive\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Receive\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"floatingFilter\":true,\"name\":\"transmit\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Transmit\",\"required\":false},{\"columnSpan\":6,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"title\":\"Tx Mgmt Address\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"tx-mgmt-address\",\"key\":[\"mgmt-address-system-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"floatingFilter\":true,\"name\":\"admin-state\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"floatingFilter\":true,\"name\":\"mgmt-address-system-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Mgmt Address System Type\",\"required\":true,\"enum\":[{\"name\":\"system\",\"value\":\"system\"},{\"name\":\"system-ipv6\",\"value\":\"system-ipv6\"}]}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"floatingFilter\":true,\"name\":\"tx-tlvs\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Tx TLVs\"},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.port-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Port Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-cap\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Cap\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Name\",\"required\":false}]}]}",
                            "default-target-data": " {\"port\":{\"admin-state\":\"enable\"}}",
                            "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"ethernet\":{\"network\":{\"accounting-policy\":null,\"collect-stats\":null},\"autonegotiate\":null,\"dot1q-etype\":null,\"encap-type\":null,\"mtu\":null,\"qinq-etype\":null,\"speed\":null,\"mode\":null,\"hold-time\":{\"down\":null,\"units\":null,\"up\":null},\"down-when-looped\":{\"admin-state\":null,\"keep-alive\":null,\"retry-timeout\":null,\"use-broadcast-address\":null},\"ssm\":{\"admin-state\":null,\"code-type\":null,\"tx-dus\":null},\"crc-monitor\":{\"window-size\":null,\"signal-degrade\":{\"threshold\":null,\"multiplier\":null},\"signal-failure\":{\"threshold\":null,\"multiplier\":null}},\"lldp\":{\"dest-mac\":[{\"mac-type\":null,\"notification\":null,\"port-id-subtype\":null,\"receive\":null,\"transmit\":null,\"tx-mgmt-address\":[{\"admin-state\":null,\"mgmt-address-system-type\":null}],\"tx-tlvs\":{\"port-desc\":null,\"sys-cap\":null,\"sys-desc\":null,\"sys-name\":null}}]}}}}",
                            "flexible": true,
                            "keys": "[\"mac-type\",\"mgmt-address-system-type\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-ethernet'][version='2']/schema-form[name='defaultSAS.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.421Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:56:42.254Z"
                            },
                            "name": "defaultSAS.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-ethernet\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-equipment-port-ethernet.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.description\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.description\",\"name\":\"port.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":160,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet\",\"name\":\"port.ethernet\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Ethernet\"},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.network\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.network\",\"name\":\"port.ethernet.network\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Network\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.network\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.network.accounting-policy\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.network.accounting-policy\",\"name\":\"port.ethernet.network.accounting-policy\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":4294967295,\"min\":0}]},\"type\":\"number\",\"title\":\"Accounting Policy\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.network\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.network.collect-stats\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.network.collect-stats\",\"name\":\"port.ethernet.network.collect-stats\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Collect Stats\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"newRow\":true,\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"name\":\"port.ethernet.autonegotiate\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Autonegotiate\",\"required\":false,\"enum\":[{\"name\":\"notApplicable\",\"value\":\"notApplicable\"},{\"name\":\"true\",\"value\":\"true\"},{\"name\":\"false\",\"value\":\"false\"},{\"name\":\"limited\",\"value\":\"limited\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"name\":\"port.ethernet.dot1q-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Dot1 Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"name\":\"port.ethernet.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"name\":\"port.ethernet.mtu\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9212,\"min\":512}]},\"type\":\"number\",\"title\":\"MTU\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"name\":\"port.ethernet.qinq-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Q in Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"name\":\"port.ethernet.speed\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":10,\"min\":10},{\"max\":100,\"min\":100},{\"max\":1000,\"min\":1000},{\"max\":10000,\"min\":10000},{\"max\":25000,\"min\":25000},{\"max\":40000,\"min\":40000},{\"max\":50000,\"min\":50000},{\"max\":100000,\"min\":100000}]},\"type\":\"number\",\"title\":\"Speed\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"name\":\"port.ethernet.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"network\",\"value\":\"network\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.l2Uplink\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.l2Uplink\",\"name\":\"port.ethernet.l2Uplink\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"L2 Uplink\",\"when\":\"port.ethernet.mode = 'access'\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"name\":\"port.ethernet.hold-time\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Hold Time\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"name\":\"port.ethernet.hold-time.down\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Down\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"name\":\"port.ethernet.hold-time.units\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Units\",\"required\":false,\"enum\":[{\"name\":\"seconds\",\"value\":\"seconds\"},{\"name\":\"centiseconds\",\"value\":\"centiseconds\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"name\":\"port.ethernet.hold-time.up\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Up\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"name\":\"port.ethernet.down-when-looped\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Down When Looped\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"name\":\"port.ethernet.down-when-looped.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"name\":\"port.ethernet.down-when-looped.keep-alive\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":120,\"min\":1}]},\"type\":\"number\",\"title\":\"Keep Alive\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"name\":\"port.ethernet.down-when-looped.retry-timeout\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":0,\"min\":0},{\"max\":160,\"min\":10}]},\"type\":\"number\",\"title\":\"Retry Timeout\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"name\":\"port.ethernet.ssm\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SSM\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"name\":\"port.ethernet.ssm.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"name\":\"port.ethernet.ssm.code-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Code Type\",\"required\":false,\"enum\":[{\"name\":\"sonet\",\"value\":\"sonet\"},{\"name\":\"sdh\",\"value\":\"sdh\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"name\":\"port.ethernet.ssm.tx-dus\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Tx Dus\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"name\":\"port.ethernet.crc-monitor\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"CRC Monitor\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"name\":\"port.ethernet.crc-monitor.window-size\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":60,\"min\":5}]},\"type\":\"number\",\"title\":\"Window Size\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"name\":\"port.ethernet.crc-monitor.signal-degrade\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Degrade\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"name\":\"port.ethernet.crc-monitor.signal-failure\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Failure\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-failure.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-failure.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"name\":\"port.ethernet.lldp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LLDP\"},{\"columnSpan\":6,\"propertyGroup\":\"port.ethernet.lldp\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"readOnly\":false,\"title\":\"Dest MAC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"port.ethernet.lldp.dest-mac\",\"key\":[\"mac-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"floatingFilter\":true,\"name\":\"mac-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"MAC Type\",\"required\":true,\"enum\":[{\"name\":\"nearest-bridge\",\"value\":\"nearest-bridge\"},{\"name\":\"nearest-non-tpmr\",\"value\":\"nearest-non-tpmr\"},{\"name\":\"nearest-customer\",\"value\":\"nearest-customer\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"floatingFilter\":true,\"name\":\"notification\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Notification\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"floatingFilter\":true,\"name\":\"port-id-subtype\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Port Id Subtype\",\"required\":false,\"enum\":[{\"name\":\"tx-if-alias\",\"value\":\"tx-if-alias\"},{\"name\":\"tx-if-name\",\"value\":\"tx-if-name\"},{\"name\":\"tx-local\",\"value\":\"tx-local\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"floatingFilter\":true,\"name\":\"receive\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Receive\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"floatingFilter\":true,\"name\":\"transmit\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Transmit\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"floatingFilter\":true,\"name\":\"tunnel-nearest-bridge\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Tunnel Nearest Bridge\",\"when\":{\"field\":\"mac-type\",\"value\":\"nearest-bridge\",\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":6,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"title\":\"Tx Mgmt Address\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"tx-mgmt-address\",\"key\":[\"mgmt-address-system-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"floatingFilter\":true,\"name\":\"admin-state\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"floatingFilter\":true,\"name\":\"mgmt-address-system-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Mgmt Address System Type\",\"required\":true,\"enum\":[{\"name\":\"system\",\"value\":\"system\"},{\"name\":\"system-ipv6\",\"value\":\"system-ipv6\"}]}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"floatingFilter\":true,\"name\":\"tx-tlvs\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Tx TLVs\"},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.port-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Port Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-cap\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Cap\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Name\",\"required\":false}]}]}",
                            "default-target-data": " {\"port\":{\"admin-state\":\"enable\"}}",
                            "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"ethernet\":{\"network\":{\"accounting-policy\":null,\"collect-stats\":null},\"autonegotiate\":null,\"dot1q-etype\":null,\"encap-type\":null,\"mtu\":null,\"qinq-etype\":null,\"speed\":null,\"mode\":null,\"l2Uplink\":null,\"hold-time\":{\"down\":null,\"units\":null,\"up\":null},\"down-when-looped\":{\"admin-state\":null,\"keep-alive\":null,\"retry-timeout\":null},\"ssm\":{\"admin-state\":null,\"code-type\":null,\"tx-dus\":null},\"crc-monitor\":{\"window-size\":null,\"signal-degrade\":{\"threshold\":null,\"multiplier\":null},\"signal-failure\":{\"threshold\":null,\"multiplier\":null}},\"lldp\":{\"dest-mac\":[{\"mac-type\":null,\"notification\":null,\"port-id-subtype\":null,\"receive\":null,\"transmit\":null,\"tunnel-nearest-bridge\":null,\"tx-mgmt-address\":[{\"admin-state\":null,\"mgmt-address-system-type\":null}],\"tx-tlvs\":{\"port-desc\":null,\"sys-cap\":null,\"sys-desc\":null,\"sys-name\":null}}]}}}}",
                            "flexible": true,
                            "keys": "[\"mac-type\",\"mgmt-address-system-type\"]",
                            "props": "{\"required-object\":\"{}\"}"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/imported-intent-types/imported-intent-type/schema-form",
                              "nsp-model:identifier": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-equipment-port-ethernet'][version='2']/schema-form[name='gold.schemaForm']",
                              "nsp-model:creation-time": "2024-04-23T16:55:32.421Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:56:42.255Z"
                            },
                            "name": "gold.schemaForm",
                            "content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-ethernet\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-equipment-port-ethernet.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.description\",\"hide\":true,\"default\":\"Gold/Fixed schema-form\",\"componentId\":\"icm-equipment-port-ethernet.port.description\",\"name\":\"port.description\",\"readOnly\":true,\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet\",\"name\":\"port.ethernet\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Ethernet\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"hide\":true,\"default\":\"qinq\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"name\":\"port.ethernet.encap-type\",\"readOnly\":true,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"hide\":true,\"default\":\"1500\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"name\":\"port.ethernet.mtu\",\"readOnly\":true,\"validations\":{\"ranges\":[{\"max\":9800,\"min\":512}]},\"type\":\"number\",\"title\":\"MTU\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"hide\":true,\"default\":\"access\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"name\":\"port.ethernet.mode\",\"readOnly\":true,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"network\",\"value\":\"network\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"}]}]}",
                            "default-target-data": " {\"port\":{\"admin-state\":\"enable\",\"description\":\"Gold/Fixed schema-form\",\"ethernet\":{\"encap-type\":\"qinq\",\"mtu\":\"1500\",\"mode\":\"access\"}}}",
                            "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"ethernet\":{\"encap-type\":null,\"mtu\":null,\"mode\":null}}}",
                            "flexible": false,
                            "keys": "[]",
                            "props": "{\"required-object\":\"{}\"}"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:remove-intent-type": {
      "post": {
        "tags": [
          "IntentTypeManagement"
        ],
        "operationId": "removeIntentType",
        "description": "The parameters and request body are for method: removeIntentType. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "imported-intent-type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "imported-intent-type": "/nsp-icm:icm/imported-intent-types/imported-intent-type[name='icm-system-ptp'][version='2']",
                    "message": "Successfully Removed"
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/templates": {
      "post": {
        "tags": [
          "ConfigurationTemplates"
        ],
        "operationId": "createTemplate",
        "description": "The parameters and request body are for method: createTemplate. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "type": "Buffer",
                  "data": []
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ConfigurationTemplates"
        ],
        "operationId": "getTemplates",
        "description": "The parameters and request body are for method: getTemplates. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:templates": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "template": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "life-cycle-state": {
                                "type": "string"
                              },
                              "intent-type": {
                                "type": "string"
                              },
                              "intent-type-version": {
                                "type": "number"
                              },
                              "schema-form-name": {
                                "type": "string"
                              },
                              "schema-form-content": {
                                "type": "string"
                              },
                              "config-form-state": {
                                "type": "string"
                              },
                              "default-target-data": {
                                "type": "string"
                              },
                              "target-data-struct": {
                                "type": "string"
                              },
                              "role": {
                                "type": "string"
                              },
                              "category": {
                                "type": "string"
                              },
                              "device-scope": {
                                "type": "string"
                              },
                              "flexible": {
                                "type": "boolean"
                              },
                              "props": {
                                "type": "string"
                              },
                              "t-target-identifiers": {
                                "type": "string"
                              },
                              "creation-time": {
                                "type": "string"
                              },
                              "created-by": {
                                "type": "string"
                              },
                              "last-modified-time": {
                                "type": "string"
                              },
                              "target-identifiers": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "@": {
                                      "type": "object",
                                      "properties": {
                                        "nsp-model:schema-nodeid": {
                                          "type": "string"
                                        },
                                        "nsp-model:identifier": {
                                          "type": "string"
                                        },
                                        "nsp-model:creation-time": {
                                          "type": "string"
                                        },
                                        "nsp-model:last-modified-time": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "display-name": {
                                      "type": "string"
                                    },
                                    "order": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-icm:templates": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-icm:icm/templates",
                      "nsp-model:identifier": "/nsp-icm:icm/templates"
                    },
                    "template": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template",
                          "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Gold Port']",
                          "nsp-model:creation-time": "2024-04-23T16:58:01.681Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:58:01.724Z"
                        },
                        "name": "Gold Port",
                        "description": "Configure an access port with Gold profile",
                        "life-cycle-state": "released",
                        "intent-type": "icm-equipment-port-ethernet",
                        "intent-type-version": 2,
                        "schema-form-name": "gold.schemaForm",
                        "schema-form-content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-ethernet\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-equipment-port-ethernet.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.description\",\"hide\":true,\"default\":\"Gold/Fixed schema-form\",\"componentId\":\"icm-equipment-port-ethernet.port.description\",\"name\":\"port.description\",\"readOnly\":true,\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet\",\"name\":\"port.ethernet\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Ethernet\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"hide\":true,\"default\":\"qinq\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"name\":\"port.ethernet.encap-type\",\"readOnly\":true,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"hide\":true,\"default\":\"1500\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"name\":\"port.ethernet.mtu\",\"readOnly\":true,\"validations\":{\"ranges\":[{\"max\":9800,\"min\":512}]},\"type\":\"number\",\"title\":\"MTU\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"hide\":true,\"default\":\"access\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"name\":\"port.ethernet.mode\",\"readOnly\":true,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"network\",\"value\":\"network\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"}]}]}",
                        "config-form-state": "up-to-date",
                        "default-target-data": " {\"port\":{\"admin-state\":\"enable\",\"description\":\"Gold/Fixed schema-form\",\"ethernet\":{\"encap-type\":\"qinq\",\"mtu\":\"1500\",\"mode\":\"access\"}}}",
                        "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"ethernet\":{\"encap-type\":null,\"mtu\":null,\"mode\":null}}}",
                        "role": "physical",
                        "category": "port",
                        "device-scope": "mdm-and-classic",
                        "flexible": false,
                        "props": "{\"required-object\":\"{}\",\"role\":\"physical\",\"target-xpath\":\"/nsp-equipment:network/network-element/hardware-component/port[boolean(port-details[port-type!='connector-port'])][not(contains('name','/u'))][boolean (parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/shelf'][not(contains('component-id','shelf=1-6-'))]) or boolean(parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/port']) or boolean(parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/card'][not(containsIgnoreCase('name','Processor'))])]\",\"description\":\"Intent-type to configure physical, breakout, xiom and satellite ports\",\"category\":\"port\",\"device-scope\":\"mdm-and-classic\"}",
                        "t-target-identifiers": "[{\"name\":\"port-id\",\"i18n-text\":\"Port-ID\",\"value-type\":\"STRING\",\"order\":3}]",
                        "creation-time": "2024-04-23T16:58:01.716270Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:58:01.716270Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Gold Port']/target-identifiers[name='port-id']",
                              "nsp-model:creation-time": "2024-04-23T16:58:01.681Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:58:01.681Z"
                            },
                            "name": "port-id",
                            "display-name": "Port-ID",
                            "order": 3
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template",
                          "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure Port']",
                          "nsp-model:creation-time": "2024-04-23T16:58:11.849Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:58:11.883Z"
                        },
                        "name": "Configure Port",
                        "description": "Configure an access port",
                        "life-cycle-state": "released",
                        "intent-type": "icm-equipment-port-ethernet",
                        "intent-type-version": 2,
                        "schema-form-name": "default.schemaForm",
                        "schema-form-content": "{\"meta-data\":{\"moduleContainer\":\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-equipment-port-ethernet\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port\",\"name\":\"port\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port\"},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-equipment-port-ethernet.port.admin-state\",\"name\":\"port.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.description\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.description\",\"name\":\"port.description\",\"readOnly\":false,\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet\",\"name\":\"port.ethernet\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Ethernet\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.accounting-policy\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.accounting-policy\",\"name\":\"port.ethernet.accounting-policy\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":4294967295,\"min\":0}]},\"type\":\"number\",\"title\":\"Accounting Policy\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.collect-stats\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.collect-stats\",\"name\":\"port.ethernet.collect-stats\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Collect Stats\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"newRow\":true,\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.autonegotiate\",\"name\":\"port.ethernet.autonegotiate\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Autonegotiate\",\"required\":false,\"enum\":[{\"name\":\"notApplicable\",\"value\":\"notApplicable\"},{\"name\":\"true\",\"value\":\"true\"},{\"name\":\"false\",\"value\":\"false\"},{\"name\":\"limited\",\"value\":\"limited\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.dot1q-etype\",\"name\":\"port.ethernet.dot1q-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Dot1 Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.encap-type\",\"name\":\"port.ethernet.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mtu\",\"name\":\"port.ethernet.mtu\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9800,\"min\":512}]},\"type\":\"number\",\"title\":\"MTU\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.pbb-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.pbb-etype\",\"name\":\"port.ethernet.pbb-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"PBB Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.qinq-etype\",\"name\":\"port.ethernet.qinq-etype\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(0x[0-9a-f]+)?\"]},\"type\":\"string\",\"title\":\"Q in Q Etype\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.speed\",\"name\":\"port.ethernet.speed\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":10,\"min\":10},{\"max\":100,\"min\":100},{\"max\":1000,\"min\":1000},{\"max\":10000,\"min\":10000},{\"max\":25000,\"min\":25000},{\"max\":40000,\"min\":40000},{\"max\":50000,\"min\":50000},{\"max\":100000,\"min\":100000}]},\"type\":\"number\",\"title\":\"Speed\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.mode\",\"name\":\"port.ethernet.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"network\",\"value\":\"network\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"}]},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time\",\"name\":\"port.ethernet.hold-time\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Hold Time\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.down\",\"name\":\"port.ethernet.hold-time.down\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Down\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.units\",\"name\":\"port.ethernet.hold-time.units\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Units\",\"required\":false,\"enum\":[{\"name\":\"seconds\",\"value\":\"seconds\"},{\"name\":\"centiseconds\",\"value\":\"centiseconds\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.hold-time\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.hold-time.up\",\"name\":\"port.ethernet.hold-time.up\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":3600000,\"min\":0}]},\"type\":\"number\",\"title\":\"Up\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped\",\"name\":\"port.ethernet.down-when-looped\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Down When Looped\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.admin-state\",\"name\":\"port.ethernet.down-when-looped.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.keep-alive\",\"name\":\"port.ethernet.down-when-looped.keep-alive\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":120,\"min\":1}]},\"type\":\"number\",\"title\":\"Keep Alive\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.retry-timeout\",\"name\":\"port.ethernet.down-when-looped.retry-timeout\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":0,\"min\":0},{\"max\":160,\"min\":10}]},\"type\":\"number\",\"title\":\"Retry Timeout\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.down-when-looped\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.down-when-looped.use-broadcast-address\",\"name\":\"port.ethernet.down-when-looped.use-broadcast-address\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Use Broadcast Address\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm\",\"name\":\"port.ethernet.ssm\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SSM\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.admin-state\",\"name\":\"port.ethernet.ssm.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.code-type\",\"name\":\"port.ethernet.ssm.code-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Code Type\",\"required\":false,\"enum\":[{\"name\":\"sonet\",\"value\":\"sonet\"},{\"name\":\"sdh\",\"value\":\"sdh\"}]},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.esmc-tunnel\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.esmc-tunnel\",\"name\":\"port.ethernet.ssm.esmc-tunnel\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"ESMC Tunnel\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.ssm\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.ssm.tx-dus\",\"name\":\"port.ethernet.ssm.tx-dus\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Tx Dus\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor\",\"name\":\"port.ethernet.crc-monitor\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"CRC Monitor\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.window-size\",\"name\":\"port.ethernet.crc-monitor.window-size\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":60,\"min\":5}]},\"type\":\"number\",\"title\":\"Window Size\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade\",\"name\":\"port.ethernet.crc-monitor.signal-degrade\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Degrade\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-degrade\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-degrade.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-degrade.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet.crc-monitor\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure\",\"name\":\"port.ethernet.crc-monitor.signal-failure\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Signal Failure\"},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.threshold\",\"name\":\"port.ethernet.crc-monitor.signal-failure.threshold\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Threshold\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"port.ethernet.crc-monitor.signal-failure\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.crc-monitor.signal-failure.multiplier\",\"name\":\"port.ethernet.crc-monitor.signal-failure.multiplier\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":9,\"min\":1}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"port.ethernet\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp\",\"name\":\"port.ethernet.lldp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LLDP\"},{\"columnSpan\":6,\"propertyGroup\":\"port.ethernet.lldp\",\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac\",\"readOnly\":false,\"title\":\"Dest MAC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"port.ethernet.lldp.dest-mac\",\"key\":[\"mac-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.mac-type\",\"floatingFilter\":true,\"name\":\"mac-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"MAC Type\",\"required\":true,\"enum\":[{\"name\":\"nearest-bridge\",\"value\":\"nearest-bridge\"},{\"name\":\"nearest-non-tpmr\",\"value\":\"nearest-non-tpmr\"},{\"name\":\"nearest-customer\",\"value\":\"nearest-customer\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.notification\",\"floatingFilter\":true,\"name\":\"notification\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Notification\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.port-id-subtype\",\"floatingFilter\":true,\"name\":\"port-id-subtype\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Port Id Subtype\",\"required\":false,\"enum\":[{\"name\":\"tx-if-alias\",\"value\":\"tx-if-alias\"},{\"name\":\"tx-if-name\",\"value\":\"tx-if-name\"},{\"name\":\"tx-local\",\"value\":\"tx-local\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.receive\",\"floatingFilter\":true,\"name\":\"receive\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Receive\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.transmit\",\"floatingFilter\":true,\"name\":\"transmit\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Transmit\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tunnel-nearest-bridge\",\"floatingFilter\":true,\"name\":\"tunnel-nearest-bridge\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Tunnel Nearest Bridge\",\"when\":{\"field\":\"mac-type\",\"value\":\"nearest-bridge\",\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":6,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"title\":\"Tx Mgmt Address\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"tx-mgmt-address\",\"key\":[\"mgmt-address-system-type\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.admin-state\",\"floatingFilter\":true,\"name\":\"admin-state\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-mgmt-address.mgmt-address-system-type\",\"floatingFilter\":true,\"name\":\"mgmt-address-system-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Mgmt Address System Type\",\"required\":true,\"enum\":[{\"name\":\"oob\",\"value\":\"oob\"},{\"name\":\"system\",\"value\":\"system\"},{\"name\":\"system-ipv6\",\"value\":\"system-ipv6\"},{\"name\":\"oob-ipv6\",\"value\":\"oob-ipv6\"}]}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs\",\"floatingFilter\":true,\"name\":\"tx-tlvs\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Tx TLVs\"},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.port-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.port-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Port Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-cap\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-cap\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Cap\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-desc\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-desc\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Desc\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"tx-tlvs\",\"_viewConfigPath\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"hide\":true,\"componentId\":\"icm-equipment-port-ethernet.port.ethernet.lldp.dest-mac.tx-tlvs.sys-name\",\"floatingFilter\":true,\"name\":\"tx-tlvs.sys-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"boolean\",\"title\":\"Sys Name\",\"required\":false}]}]}",
                        "config-form-state": "up-to-date",
                        "default-target-data": " {\"port\":{\"admin-state\":\"enable\"}}",
                        "target-data-struct": "{\"port\":{\"admin-state\":null,\"description\":null,\"ethernet\":{\"accounting-policy\":null,\"collect-stats\":null,\"autonegotiate\":null,\"dot1q-etype\":null,\"encap-type\":null,\"mtu\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"speed\":null,\"mode\":null,\"hold-time\":{\"down\":null,\"units\":null,\"up\":null},\"down-when-looped\":{\"admin-state\":null,\"keep-alive\":null,\"retry-timeout\":null,\"use-broadcast-address\":null},\"ssm\":{\"admin-state\":null,\"code-type\":null,\"esmc-tunnel\":null,\"tx-dus\":null},\"crc-monitor\":{\"window-size\":null,\"signal-degrade\":{\"threshold\":null,\"multiplier\":null},\"signal-failure\":{\"threshold\":null,\"multiplier\":null}},\"lldp\":{\"dest-mac\":[{\"mac-type\":null,\"notification\":null,\"port-id-subtype\":null,\"receive\":null,\"transmit\":null,\"tunnel-nearest-bridge\":null,\"tx-mgmt-address\":[{\"admin-state\":null,\"mgmt-address-system-type\":null}],\"tx-tlvs\":{\"port-desc\":null,\"sys-cap\":null,\"sys-desc\":null,\"sys-name\":null}}]}}}}",
                        "role": "physical",
                        "category": "port",
                        "device-scope": "mdm-and-classic",
                        "flexible": true,
                        "props": "{\"required-object\":\"{}\",\"role\":\"physical\",\"target-xpath\":\"/nsp-equipment:network/network-element/hardware-component/port[boolean(port-details[port-type!='connector-port'])][not(contains('name','/u'))][boolean (parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/shelf'][not(contains('component-id','shelf=1-6-'))]) or boolean(parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/port']) or boolean(parent[nsp-model:schema-nodeid='/nsp-equipment:network/network-element/hardware-component/card'][not(containsIgnoreCase('name','Processor'))])]\",\"description\":\"Intent-type to configure physical, breakout, xiom and satellite ports\",\"category\":\"port\",\"device-scope\":\"mdm-and-classic\"}",
                        "t-target-identifiers": "[{\"name\":\"port-id\",\"i18n-text\":\"Port-ID\",\"value-type\":\"STRING\",\"order\":3}]",
                        "creation-time": "2024-04-23T16:58:11.874607Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:58:11.874607Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure Port']/target-identifiers[name='port-id']",
                              "nsp-model:creation-time": "2024-04-23T16:58:11.849Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:58:11.849Z"
                            },
                            "name": "port-id",
                            "display-name": "Port-ID",
                            "order": 3
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template",
                          "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure LAG']",
                          "nsp-model:creation-time": "2024-04-23T16:58:21.996Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:58:22.019Z"
                        },
                        "name": "Configure LAG",
                        "description": "Configure a LAG",
                        "life-cycle-state": "released",
                        "intent-type": "icm-logical-lag-access",
                        "intent-type-version": 2,
                        "schema-form-name": "default.schemaForm",
                        "schema-form-content": "{\"meta-data\":{\"moduleContainer\":\"icm-logical-lag-access:icm-logical-lag-access\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-logical-lag-access\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag\",\"name\":\"lag\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LAG\"},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.description\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.description\",\"name\":\"lag.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":255,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.admin-state\",\"hide\":true,\"default\":\"enable\",\"componentId\":\"icm-logical-lag-access.lag.admin-state\",\"name\":\"lag.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.max-ports\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.max-ports\",\"name\":\"lag.max-ports\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Max Ports\",\"required\":false,\"enum\":[{\"name\":\"32\",\"value\":\"32\"},{\"name\":\"64\",\"value\":\"64\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.encap-type\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.encap-type\",\"name\":\"lag.encap-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Encap Type\",\"required\":false,\"enum\":[{\"name\":\"null\",\"value\":\"null\"},{\"name\":\"dot1q\",\"value\":\"dot1q\"},{\"name\":\"qinq\",\"value\":\"qinq\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.mode\",\"default\":\"access\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.mode\",\"name\":\"lag.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"required\":false,\"enum\":[{\"name\":\"access\",\"value\":\"access\"},{\"name\":\"hybrid\",\"value\":\"hybrid\"},{\"name\":\"network\",\"value\":\"network\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-type\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-type\",\"name\":\"lag.port-type\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Port Type\",\"required\":false,\"enum\":[{\"name\":\"standard\",\"value\":\"standard\"},{\"name\":\"hs\",\"value\":\"hs\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp-xmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp-xmit-interval\",\"name\":\"lag.lacp-xmit-interval\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"LACP Xmit Interval\",\"required\":false,\"enum\":[{\"name\":\"slow\",\"value\":\"slow\"},{\"name\":\"fast\",\"value\":\"fast\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp-xmit-stdby\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp-xmit-stdby\",\"name\":\"lag.lacp-xmit-stdby\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"LACP Xmit Stdby\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp\",\"name\":\"lag.lacp\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"LACP\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.enableLacp\",\"default\":false,\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.enableLacp\",\"name\":\"lag.lacp.enableLacp\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable LACP\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.mode\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.mode\",\"name\":\"lag.lacp.mode\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Mode\",\"when\":\"lag.lacp.enableLacp = 'true'\",\"required\":false,\"enum\":[{\"name\":\"passive\",\"value\":\"passive\"},{\"name\":\"active\",\"value\":\"active\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.administrative-key\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.administrative-key\",\"name\":\"lag.lacp.administrative-key\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":1}]},\"type\":\"number\",\"title\":\"Administrative Key\",\"when\":\"lag.lacp.enableLacp = 'true'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.system-id\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.system-id\",\"name\":\"lag.lacp.system-id\",\"readOnly\":false,\"type\":\"string\",\"title\":\"System Id\",\"when\":\"lag.lacp.enableLacp = 'true' and lag.mode = 'access'\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.lacp\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.lacp.system-priority\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.lacp.system-priority\",\"name\":\"lag.lacp.system-priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":0}]},\"type\":\"number\",\"title\":\"System Priority\",\"when\":\"lag.lacp.enableLacp = 'true' and lag.mode = 'access'\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold\",\"name\":\"lag.port-threshold\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Port Threshold\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.value\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.value\",\"name\":\"lag.port-threshold.value\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":63,\"min\":0}]},\"type\":\"number\",\"title\":\"Value\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.action\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.action\",\"name\":\"lag.port-threshold.action\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Action\",\"required\":false,\"enum\":[{\"name\":\"down\",\"value\":\"down\"},{\"name\":\"dynamic-cost\",\"value\":\"dynamic-cost\"},{\"name\":\"static-cost\",\"value\":\"static-cost\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.port-threshold\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port-threshold.cost\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.port-threshold.cost\",\"name\":\"lag.port-threshold.cost\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":16777215,\"min\":1}]},\"type\":\"number\",\"title\":\"Cost\",\"when\":{\"field\":\"lag.port-threshold.action\",\"value\":\"static-cost\",\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash\",\"name\":\"lag.per-link-hash\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Per Link Hash\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.per-link-hash\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.enablePerLinkHash\",\"default\":false,\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.enablePerLinkHash\",\"name\":\"lag.per-link-hash.enablePerLinkHash\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable Per Link Hash\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag.per-link-hash\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.weighted\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.weighted\",\"name\":\"lag.per-link-hash.weighted\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"Weighted\",\"when\":{\"field\":\"lag.per-link-hash.enablePerLinkHash\",\"value\":true,\"operator\":\"equals\"}},{\"columnSpan\":2,\"propertyGroup\":\"lag.per-link-hash.weighted\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.weighted.enableWeighted\",\"default\":false,\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.weighted.enableWeighted\",\"name\":\"lag.per-link-hash.weighted.enableWeighted\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Enable Weighted\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.per-link-hash.weighted\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.per-link-hash.weighted.auto-rebalance\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.per-link-hash.weighted.auto-rebalance\",\"name\":\"lag.per-link-hash.weighted.auto-rebalance\",\"readOnly\":false,\"type\":\"boolean\",\"title\":\"Auto Rebalance\",\"when\":{\"field\":\"lag.per-link-hash.weighted.enableWeighted\",\"value\":true,\"operator\":\"equals\"},\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness\",\"name\":\"lag.bfd-liveness\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"BFD\"},{\"columnSpan\":7,\"propertyGroup\":\"lag.bfd-liveness\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4\",\"name\":\"lag.bfd-liveness.ipv4\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"IPv4\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.admin-state\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.admin-state\",\"name\":\"lag.bfd-liveness.ipv4.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.local-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.local-ip-address\",\"name\":\"lag.bfd-liveness.ipv4.local-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patternsOperator\":\"and\",\"patterns\":[\"[0-9\\\\.]*\",\"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\\\p{N}\\\\p{L}]+)?\"]},\"type\":\"string\",\"title\":\"Local IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.remote-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.remote-ip-address\",\"name\":\"lag.bfd-liveness.ipv4.remote-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patternsOperator\":\"and\",\"patterns\":[\"[0-9\\\\.]*\",\"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\\\p{N}\\\\p{L}]+)?\"]},\"type\":\"string\",\"title\":\"Remote IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.receive-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.receive-interval\",\"name\":\"lag.bfd-liveness.ipv4.receive-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Receive Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.transmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.transmit-interval\",\"name\":\"lag.bfd-liveness.ipv4.transmit-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Transmit Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-admin-down-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":3600,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-admin-down-time\",\"name\":\"lag.bfd-liveness.ipv4.max-admin-down-time\",\"description\":\"seconds: [0..3600|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Admin Down Time (seconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-setup-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":60000,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.max-setup-time\",\"name\":\"lag.bfd-liveness.ipv4.max-setup-time\",\"description\":\"milliseconds: [0..60000|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Setup Time (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv4\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.multiplier\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv4.multiplier\",\"name\":\"lag.bfd-liveness.ipv4.multiplier\",\"description\":\"3..20\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":20,\"min\":3}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":7,\"propertyGroup\":\"lag.bfd-liveness\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6\",\"name\":\"lag.bfd-liveness.ipv6\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"IPv6\"},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.admin-state\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.admin-state\",\"name\":\"lag.bfd-liveness.ipv6.admin-state\",\"readOnly\":false,\"type\":\"enum\",\"title\":\"Admin State\",\"required\":false,\"enum\":[{\"name\":\"enable\",\"value\":\"enable\"},{\"name\":\"disable\",\"value\":\"disable\"}]},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.local-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.local-ip-address\",\"name\":\"lag.bfd-liveness.ipv6.local-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"]},\"type\":\"string\",\"title\":\"Local IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.remote-ip-address\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.remote-ip-address\",\"name\":\"lag.bfd-liveness.ipv6.remote-ip-address\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":2147483647,\"min\":0}],\"patterns\":[\"(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\"]},\"type\":\"string\",\"title\":\"Remote IP Address\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.receive-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.receive-interval\",\"name\":\"lag.bfd-liveness.ipv6.receive-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Receive Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.transmit-interval\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.transmit-interval\",\"name\":\"lag.bfd-liveness.ipv6.transmit-interval\",\"description\":\"milliseconds: [10..100000]\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":100000,\"min\":10}]},\"type\":\"number\",\"title\":\"Transmit Interval (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-admin-down-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":3600,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-admin-down-time\",\"name\":\"lag.bfd-liveness.ipv6.max-admin-down-time\",\"description\":\"seconds: [0..3600|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Admin Down Time (seconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-setup-time\",\"types\":[{\"columnSpan\":4,\"name\":\"int32-0\",\"validations\":{\"ranges\":[{\"max\":60000,\"min\":0}]},\"type\":\"number\",\"title\":\"int32\"},{\"columnSpan\":4,\"name\":\"enumeration-1\",\"type\":\"enum\",\"title\":\"enumeration\",\"enum\":[{\"name\":\"infinite\",\"value\":\"infinite\"}]}],\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.max-setup-time\",\"name\":\"lag.bfd-liveness.ipv6.max-setup-time\",\"description\":\"milliseconds: [0..60000|infinite]\",\"readOnly\":false,\"type\":\"union\",\"title\":\"Max Setup Time (milliseconds)\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"lag.bfd-liveness.ipv6\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.multiplier\",\"hide\":true,\"componentId\":\"icm-logical-lag-access.lag.bfd-liveness.ipv6.multiplier\",\"name\":\"lag.bfd-liveness.ipv6.multiplier\",\"description\":\"3..20\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":20,\"min\":3}]},\"type\":\"number\",\"title\":\"Multiplier\",\"required\":false},{\"columnSpan\":6,\"propertyGroup\":\"lag\",\"newRow\":true,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port\",\"componentId\":\"icm-logical-lag-access.lag.port\",\"readOnly\":false,\"title\":\"Port\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"lag.port\",\"key\":[\"port-id\"],\"properties\":[{\"columnSpan\":2,\"displayKey\":\"port-id\",\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.port-id\",\"componentId\":\"icm-logical-lag-access.lag.port.port-id\",\"floatingFilter\":true,\"readOnly\":false,\"componentProps\":{\"isPagination\":true,\"isObject\":false,\"paginationProps\":{\"pageLabel\":\"Page\"}},\"suggest\":\"suggestPortIds\",\"sortable\":true,\"type\":\"leafref\",\"title\":\"Port Id\",\"required\":true,\"name\":\"port-id\",\"properties\":[{\"name\":\"port-id\",\"description\":\"Port ID\",\"floatingFilter\":true,\"title\":\"Port ID\",\"type\":\"string\"},{\"name\":\"description\",\"description\":\"Description\",\"floatingFilter\":true,\"title\":\"Description\",\"type\":\"string\"},{\"name\":\"encapType\",\"description\":\"Encapsulation Type\",\"floatingFilter\":true,\"title\":\"Encapsulation Type\",\"type\":\"string\"},{\"name\":\"mode\",\"description\":\"Mode\",\"floatingFilter\":true,\"title\":\"Mode\",\"type\":\"string\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.priority\",\"componentId\":\"icm-logical-lag-access.lag.port.priority\",\"floatingFilter\":true,\"name\":\"priority\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":65535,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Priority\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.sub-group\",\"componentId\":\"icm-logical-lag-access.lag.port.sub-group\",\"floatingFilter\":true,\"name\":\"sub-group\",\"description\":\"-2:auto-iom, -1:auto-mda, <1..8>\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-2},{\"max\":8,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Sub Group\",\"required\":false},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-logical-lag-access.lag.port.hash-weight\",\"componentId\":\"icm-logical-lag-access.lag.port.hash-weight\",\"floatingFilter\":true,\"name\":\"hash-weight\",\"description\":\"-1:port-speed, <1..100000>\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":100000,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Hash Weight\",\"required\":false}]}]}",
                        "config-form-state": "up-to-date",
                        "default-target-data": " {\"lag\":{\"admin-state\":\"enable\",\"mode\":\"access\",\"lacp\":{\"enableLacp\":false},\"per-link-hash\":{\"enablePerLinkHash\":false,\"weighted\":{\"enableWeighted\":false}}}}",
                        "target-data-struct": "{\"lag\":{\"description\":null,\"admin-state\":null,\"max-ports\":null,\"encap-type\":null,\"mode\":null,\"port-type\":null,\"lacp-xmit-interval\":null,\"lacp-xmit-stdby\":null,\"lacp\":{\"enableLacp\":null,\"mode\":null,\"administrative-key\":null,\"system-id\":null,\"system-priority\":null},\"port-threshold\":{\"value\":null,\"action\":null,\"cost\":null},\"per-link-hash\":{\"enablePerLinkHash\":null,\"weighted\":{\"enableWeighted\":null,\"auto-rebalance\":null}},\"bfd-liveness\":{\"ipv4\":{\"admin-state\":null,\"local-ip-address\":null,\"remote-ip-address\":null,\"receive-interval\":null,\"transmit-interval\":null,\"max-admin-down-time\":null,\"max-setup-time\":null,\"multiplier\":null},\"ipv6\":{\"admin-state\":null,\"local-ip-address\":null,\"remote-ip-address\":null,\"receive-interval\":null,\"transmit-interval\":null,\"max-admin-down-time\":null,\"max-setup-time\":null,\"multiplier\":null}},\"port\":[{\"port-id\":null,\"priority\":null,\"sub-group\":null,\"hash-weight\":null}]}}",
                        "role": "logical",
                        "category": "LAG",
                        "device-scope": "mdm-and-classic",
                        "flexible": true,
                        "props": "{\"required-object\":\"{}\",\"role\":\"logical\",\"description\":\"Intent-type to configure access lag\",\"category\":\"LAG\",\"device-scope\":\"mdm-and-classic\",\"select-target\":\"single\"}",
                        "t-target-identifiers": "[{\"name\":\"lag-name\",\"length\":\"1..27\",\"pattern\":\"^lag-.+$\",\"i18n-text\":\"LAG-NAME\",\"value-type\":\"STRING\",\"order\":3},{\"name\":\"lag-id\",\"i18n-text\":\"LAG-ID\",\"range\":\"1..800\",\"value-type\":\"NUMBER\",\"order\":4}]",
                        "creation-time": "2024-04-23T16:58:22.012372Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:58:22.012372Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure LAG']/target-identifiers[name='lag-name']",
                              "nsp-model:creation-time": "2024-04-23T16:58:21.996Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:58:21.996Z"
                            },
                            "name": "lag-name",
                            "display-name": "LAG-NAME",
                            "order": 3,
                            "pattern": "^lag-.+$"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure LAG']/target-identifiers[name='lag-id']",
                              "nsp-model:creation-time": "2024-04-23T16:58:21.996Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:58:21.996Z"
                            },
                            "name": "lag-id",
                            "display-name": "LAG-ID",
                            "order": 4
                          }
                        ]
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template",
                          "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure EQoS']",
                          "nsp-model:creation-time": "2024-04-23T16:58:32.101Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:58:32.122Z"
                        },
                        "name": "Configure EQoS",
                        "description": "Configure SAP Egress QoS on an SR",
                        "life-cycle-state": "released",
                        "intent-type": "icm-qos-sapegress-srqos",
                        "intent-type-version": 2,
                        "schema-form-name": "default.schemaForm",
                        "schema-form-content": "{\"meta-data\":{\"moduleContainer\":\"icm-qos-sapegress-srqos:icm-qos-sapegress-srqos\"},\"type\":\"object\",\"formProperties\":{\"suppressMovableColumns\":true,\"title\":\"icm-qos-sapegress-srqos\",\"columnWidth\":\"175px\"},\"properties\":[{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress\",\"name\":\"sap-egress\",\"readOnly\":false,\"type\":\"propertyGroup\",\"title\":\"SAP Egress\"},{\"columnSpan\":2,\"propertyGroup\":\"sap-egress\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.description\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.description\",\"name\":\"sap-egress.description\",\"readOnly\":false,\"validations\":{\"length\":[{\"max\":80,\"min\":0}]},\"type\":\"string\",\"title\":\"Description\",\"required\":false},{\"columnSpan\":6,\"propertyGroup\":\"sap-egress\",\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue\",\"readOnly\":false,\"title\":\"Queue\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"sap-egress.queue\",\"key\":[\"queue-id\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-id\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-id\",\"floatingFilter\":true,\"name\":\"queue-id\",\"readOnly\":false,\"validations\":{\"ranges\":[{\"max\":8,\"min\":1}]},\"sortable\":true,\"type\":\"number\",\"title\":\"Queue ID\",\"required\":true},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-type\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.queue-type\",\"floatingFilter\":true,\"name\":\"queue-type\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"Queue Type\",\"required\":false,\"enum\":[{\"name\":\"expedited\",\"value\":\"expedited\"},{\"name\":\"auto-expedited\",\"value\":\"auto-expedited\"},{\"name\":\"best-effort\",\"value\":\"best-effort\"}]},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent\",\"floatingFilter\":true,\"name\":\"scheduler-parent\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Scheduler Parent\"},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.scheduler-name\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.scheduler-name\",\"floatingFilter\":true,\"name\":\"scheduler-parent.scheduler-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"string\",\"title\":\"Scheduler Name\",\"required\":false},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.level\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.level\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Level\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.level\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":1}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.weight\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.weight\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"Weight\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.weight\",\"validations\":{\"ranges\":[{\"max\":100,\"min\":0}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-level\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-level\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR Level\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.cir-level\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":0}]}},{\"columnSpan\":2,\"propertyGroup\":\"scheduler-parent\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-weight\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.scheduler-parent.cir-weight\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR Weight\",\"required\":false,\"hide\":true,\"name\":\"scheduler-parent.cir-weight\",\"validations\":{\"ranges\":[{\"max\":100,\"min\":0}]}},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule\",\"floatingFilter\":true,\"name\":\"adaptation-rule\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Adaptation Rule\"},{\"columnSpan\":2,\"propertyGroup\":\"adaptation-rule\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.pir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.pir\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"PIR\",\"required\":false,\"enum\":[{\"name\":\"max\",\"value\":\"max\"},{\"name\":\"min\",\"value\":\"min\"},{\"name\":\"closest\",\"value\":\"closest\"}],\"hide\":true,\"name\":\"adaptation-rule.pir\"},{\"columnSpan\":2,\"propertyGroup\":\"adaptation-rule\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.cir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.adaptation-rule.cir\",\"floatingFilter\":true,\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"CIR\",\"required\":false,\"enum\":[{\"name\":\"max\",\"value\":\"max\"},{\"name\":\"min\",\"value\":\"min\"},{\"name\":\"closest\",\"value\":\"closest\"}],\"hide\":true,\"name\":\"adaptation-rule.cir\"},{\"columnSpan\":7,\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate\",\"hide\":true,\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate\",\"floatingFilter\":true,\"name\":\"rate\",\"readOnly\":false,\"sortable\":true,\"type\":\"propertyGroup\",\"title\":\"Rate\"},{\"columnSpan\":2,\"propertyGroup\":\"rate\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.pir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.pir\",\"floatingFilter\":true,\"description\":\"-1:max, <1..6400000000>\",\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"PIR\",\"required\":false,\"hide\":true,\"name\":\"rate.pir\",\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":6400000000,\"min\":1}]}},{\"columnSpan\":2,\"propertyGroup\":\"rate\",\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.cir\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.queue.rate.cir\",\"floatingFilter\":true,\"description\":\"-1:max, <0..6400000000>\",\"readOnly\":false,\"sortable\":true,\"type\":\"number\",\"title\":\"CIR\",\"required\":false,\"hide\":true,\"name\":\"rate.cir\",\"validations\":{\"ranges\":[{\"max\":-1,\"min\":-1},{\"max\":6400000000,\"min\":0}]}}]},{\"columnSpan\":6,\"propertyGroup\":\"sap-egress\",\"newRow\":true,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.fc\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.fc\",\"readOnly\":false,\"title\":\"FC\",\"type\":\"list\",\"hide\":true,\"typeProps\":{\"isPagination\":true,\"countProps\":{\"label\":\"Total\"},\"showCount\":true},\"name\":\"sap-egress.fc\",\"key\":[\"fc-name\"],\"properties\":[{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.fc.fc-name\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.fc.fc-name\",\"floatingFilter\":true,\"name\":\"fc-name\",\"readOnly\":false,\"sortable\":true,\"type\":\"enum\",\"title\":\"FC Name\",\"required\":true,\"enum\":[{\"name\":\"be\",\"value\":\"be\"},{\"name\":\"l2\",\"value\":\"l2\"},{\"name\":\"af\",\"value\":\"af\"},{\"name\":\"l1\",\"value\":\"l1\"},{\"name\":\"h2\",\"value\":\"h2\"},{\"name\":\"ef\",\"value\":\"ef\"},{\"name\":\"h1\",\"value\":\"h1\"},{\"name\":\"nc\",\"value\":\"nc\"}]},{\"columnSpan\":2,\"_viewConfigPath\":\"icm-qos-sapegress-srqos.sap-egress.fc.queue\",\"componentId\":\"icm-qos-sapegress-srqos.sap-egress.fc.queue\",\"floatingFilter\":true,\"readOnly\":false,\"suggest\":\"suggestQueueId\",\"sortable\":true,\"type\":\"number\",\"title\":\"Queue\",\"required\":false,\"component\":\"autoComplete\",\"name\":\"queue\",\"validations\":{\"ranges\":[{\"max\":8,\"min\":1}]}}]}]}",
                        "config-form-state": "up-to-date",
                        "default-target-data": " {}",
                        "target-data-struct": "{\"sap-egress\":{\"description\":null,\"queue\":[{\"queue-id\":null,\"queue-type\":null,\"scheduler-parent\":{\"scheduler-name\":null,\"level\":null,\"weight\":null,\"cir-level\":null,\"cir-weight\":null},\"adaptation-rule\":{\"pir\":null,\"cir\":null},\"rate\":{\"pir\":null,\"cir\":null}}],\"fc\":[{\"fc-name\":null,\"queue\":null}]}}",
                        "role": "logical",
                        "category": "QoS",
                        "device-scope": "mdm-and-classic",
                        "flexible": true,
                        "props": "{\"required-object\":\"{}\",\"role\":\"logical\",\"description\":\"Intent-type to configure qos sap-egress\",\"category\":\"QoS\",\"device-scope\":\"mdm-and-classic\"}",
                        "t-target-identifiers": "[{\"name\":\"sap-egress-policy-name\",\"length\":\"1..64\",\"i18n-text\":\"SAP Egress Policy Name\",\"function-name\":\"suggestPolicyName\",\"value-type\":\"STRING\",\"order\":3},{\"name\":\"policy-id\",\"i18n-text\":\"SAP Egress Policy ID\",\"range\":\"1..65535\",\"function-name\":\"suggestPolicyId\",\"value-type\":\"NUMBER\",\"order\":4}]",
                        "creation-time": "2024-04-23T16:58:32.117021Z",
                        "created-by": "admin",
                        "last-modified-time": "2024-04-23T16:58:32.117021Z",
                        "target-identifiers": [
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure EQoS']/target-identifiers[name='sap-egress-policy-name']",
                              "nsp-model:creation-time": "2024-04-23T16:58:32.101Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:58:32.101Z"
                            },
                            "name": "sap-egress-policy-name",
                            "display-name": "SAP Egress Policy Name",
                            "order": 3,
                            "function-name": "suggestPolicyName"
                          },
                          {
                            "@": {
                              "nsp-model:schema-nodeid": "/nsp-icm:icm/templates/template/target-identifiers",
                              "nsp-model:identifier": "/nsp-icm:icm/templates/template[name='Configure EQoS']/target-identifiers[name='policy-id']",
                              "nsp-model:creation-time": "2024-04-23T16:58:32.101Z",
                              "nsp-model:last-modified-time": "2024-04-23T16:58:32.101Z"
                            },
                            "name": "policy-id",
                            "display-name": "SAP Egress Policy ID",
                            "order": 4,
                            "function-name": "suggestPolicyId"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/templates/{pathv1}": {
      "patch": {
        "tags": [
          "ConfigurationTemplates"
        ],
        "operationId": "updateTemplateLifecycle",
        "description": "The parameters and request body are for method: updateTemplateLifecycle. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ConfigurationTemplates"
        ],
        "operationId": "deleteTemplate",
        "description": "The parameters and request body are for method: deleteTemplate. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/group-manager/rest/api/v1/groupDirectories": {
      "post": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "createPortGroupDirectory",
        "description": "The parameters and request body are for method: createPortGroupDirectory. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number"
                        },
                        "startRow": {
                          "type": "number"
                        },
                        "endRow": {
                          "type": "number"
                        },
                        "totalRows": {
                          "type": "number"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "fdn": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "category": {
                              "type": "string"
                            },
                            "creationType": {
                              "type": "string"
                            },
                            "groups": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "status": 0,
                    "startRow": 0,
                    "endRow": 0,
                    "totalRows": 1,
                    "data": {
                      "fdn": "fdn:model:group:EquipmentView:718392",
                      "name": "GroupDir1",
                      "description": "GroupDir1",
                      "category": "port",
                      "creationType": "manual",
                      "groups": []
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/group-manager/rest/api/v1/groups": {
      "post": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "createPortGroup",
        "description": "The parameters and request body are for method: createPortGroup. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number"
                        },
                        "startRow": {
                          "type": "number"
                        },
                        "endRow": {
                          "type": "number"
                        },
                        "totalRows": {
                          "type": "number"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "links": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "rel": {
                                    "type": "string"
                                  },
                                  "href": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "errors": {
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "status": 0,
                    "startRow": 0,
                    "endRow": 0,
                    "totalRows": 1,
                    "data": {
                      "status": "Group creation process has been started. The process may take some time depending on the number of members added+ to the group. Use the href to see if a Group  with the given name has been created.",
                      "links": [
                        {
                          "rel": "self",
                          "href": "https://135.121.153.120/group-manager/rest/api/v1/groups/name/AccessPorts?category=port"
                        }
                      ]
                    },
                    "errors": []
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/group-manager/rest/api/v1/groups/name/AccessPorts": {
      "get": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "getPortGroupFDN",
        "description": "The parameters and request body are for method: getPortGroupFDN. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "number"
                        },
                        "startRow": {
                          "type": "number"
                        },
                        "endRow": {
                          "type": "number"
                        },
                        "totalRows": {
                          "type": "number"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "fdn": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "category": {
                              "type": "string"
                            },
                            "creationType": {
                              "type": "string"
                            },
                            "advancedFilterExpression": {
                              "type": "string"
                            },
                            "groupMemberCount": {
                              "type": "number"
                            },
                            "usePhysicalMapLayout": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "response": {
                    "status": 0,
                    "startRow": 0,
                    "endRow": 0,
                    "totalRows": 1,
                    "data": {
                      "fdn": "fdn:model:group:EquipmentGroup:718393",
                      "name": "AccessPorts",
                      "description": "N/A",
                      "category": "port",
                      "creationType": "manual",
                      "advancedFilterExpression": "( name EQUAL '1/2/3' OR  name EQUAL '1/2/4' OR  name EQUAL '1/2/5')",
                      "groupMemberCount": 12,
                      "usePhysicalMapLayout": false
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:create-deployments": {
      "post": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "createDeployment",
        "description": "The parameters and request body are for method: createDeployment. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Create Deployment started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:update-deployments": {
      "post": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "updateDeploymentConfiguration",
        "description": "The parameters and request body are for method: updateDeploymentConfiguration. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Update Deployment started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:replace-deployment": {
      "post": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "replaceDeployment",
        "description": "The parameters and request body are for method: replaceDeployment. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Replace Deployment started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/deployments": {
      "get": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "getDeployments",
        "description": "The parameters and request body are for method: getDeployments. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:deployments": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            }
                          }
                        },
                        "deployment": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  },
                                  "nsp-model:creation-time": {
                                    "type": "string"
                                  },
                                  "nsp-model:last-modified-time": {
                                    "type": "string"
                                  }
                                }
                              },
                              "template-name": {
                                "type": "string"
                              },
                              "target-identifier-value": {
                                "type": "string"
                              },
                              "merge": {
                                "type": "boolean"
                              },
                              "deployment-action": {
                                "type": "string"
                              },
                              "ne-id": {
                                "type": "string"
                              },
                              "ne-name": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string"
                              },
                              "detailed-message": {
                                "type": "string"
                              },
                              "target": {
                                "type": "string"
                              },
                              "target-data": {
                                "type": "string"
                              },
                              "deployed-target-data": {
                                "type": "string"
                              },
                              "deployment-status": {
                                "type": "string"
                              },
                              "deployment-status-message": {
                                "type": "string"
                              },
                              "config-status": {
                                "type": "string"
                              },
                              "is-discovering": {
                                "type": "boolean"
                              },
                              "role": {
                                "type": "string"
                              },
                              "category": {
                                "type": "string"
                              },
                              "create-start-time": {
                                "type": "string"
                              },
                              "create-end-time": {
                                "type": "string"
                              },
                              "last-modified-time": {
                                "type": "string"
                              },
                              "created-by": {
                                "type": "string"
                              },
                              "last-aligned-by": {
                                "type": "string"
                              },
                              "last-audited-by": {
                                "type": "string"
                              },
                              "align-end-time": {
                                "type": "string"
                              },
                              "audit-details": {
                                "type": "object",
                                "properties": {
                                  "@": {
                                    "type": "object",
                                    "properties": {
                                      "nsp-model:schema-nodeid": {
                                        "type": "string"
                                      },
                                      "nsp-model:identifier": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-icm:deployments": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments",
                      "nsp-model:identifier": "/nsp-icm:icm/deployments"
                    },
                    "deployment": [
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/7']'][target-identifier-value='1/2/7']",
                          "nsp-model:creation-time": "2024-04-23T17:00:47.349Z",
                          "nsp-model:last-modified-time": "2024-04-23T17:00:48.936Z"
                        },
                        "template-name": "Configure Port",
                        "target-identifier-value": "1/2/7",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.2",
                        "ne-name": "sr2",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/7']",
                        "target-data": "{\"port\":{\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"},\"admin-state\":\"enable\"}}",
                        "deployed-target-data": "{\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\" : {\"port\":{\"admin-state\":\"enable\",\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"}}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "physical",
                        "category": "port",
                        "create-start-time": "2024-04-23T17:00:47.345730Z",
                        "create-end-time": "2024-04-23T17:00:47.345752Z",
                        "last-modified-time": "2024-04-23T17:00:48.920467Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T17:00:48.920482Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/7']'][target-identifier-value='1/2/7']/audit-details"
                          }
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/10']'][target-identifier-value='1/2/10']",
                          "nsp-model:creation-time": "2024-04-23T16:59:55.136Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:59:57.808Z"
                        },
                        "template-name": "Configure Port",
                        "target-identifier-value": "1/2/10",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.2",
                        "ne-name": "sr2",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/10']",
                        "target-data": "{\"port\":{\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1492,\"mode\":\"access\"},\"admin-state\":\"enable\"}}",
                        "deployed-target-data": "{\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\" : {\"port\":{\"admin-state\":\"enable\",\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1492,\"mode\":\"access\"}}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "physical",
                        "category": "port",
                        "create-start-time": "2024-04-23T16:59:55.062190Z",
                        "create-end-time": "2024-04-23T16:59:55.062203Z",
                        "last-modified-time": "2024-04-23T16:59:57.805819Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T16:59:57.805825Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/10']'][target-identifier-value='1/2/10']/audit-details"
                          }
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/9']'][target-identifier-value='1/2/9']",
                          "nsp-model:creation-time": "2024-04-23T16:59:54.869Z",
                          "nsp-model:last-modified-time": "2024-04-23T16:59:56.737Z"
                        },
                        "template-name": "Configure Port",
                        "target-identifier-value": "1/2/9",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.2",
                        "ne-name": "sr2",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/9']",
                        "target-data": "{\"port\":{\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1492,\"mode\":\"access\"},\"admin-state\":\"enable\"}}",
                        "deployed-target-data": "{\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\" : {\"port\":{\"admin-state\":\"enable\",\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1492,\"mode\":\"access\"}}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "physical",
                        "category": "port",
                        "create-start-time": "2024-04-23T16:59:54.866034Z",
                        "create-end-time": "2024-04-23T16:59:54.866062Z",
                        "last-modified-time": "2024-04-23T16:59:56.734480Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T16:59:56.734487Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/9']'][target-identifier-value='1/2/9']/audit-details"
                          }
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/8']'][target-identifier-value='1/2/8']",
                          "nsp-model:creation-time": "2024-04-23T17:00:50.792Z",
                          "nsp-model:last-modified-time": "2024-04-23T17:00:51.666Z"
                        },
                        "template-name": "Configure Port",
                        "target-identifier-value": "1/2/8",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.2",
                        "ne-name": "sr2",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/8']",
                        "target-data": "{\"port\":{\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"},\"admin-state\":\"enable\"}}",
                        "deployed-target-data": "{\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\" : {\"port\":{\"admin-state\":\"enable\",\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"}}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "physical",
                        "category": "port",
                        "create-start-time": "2024-04-23T17:00:50.789758Z",
                        "create-end-time": "2024-04-23T17:00:50.789778Z",
                        "last-modified-time": "2024-04-23T17:00:51.663647Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T17:00:51.663658Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/8']'][target-identifier-value='1/2/8']/audit-details"
                          }
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.3']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/9']'][target-identifier-value='1/2/9']",
                          "nsp-model:creation-time": "2024-04-23T16:59:55.394Z",
                          "nsp-model:last-modified-time": "2024-04-23T17:00:26.505Z"
                        },
                        "template-name": "Configure Port",
                        "target-identifier-value": "1/2/9",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.3",
                        "ne-name": "sr3",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.3']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/9']",
                        "target-data": "{\"port\":{\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"},\"admin-state\":\"enable\"}}",
                        "deployed-target-data": "{\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\" : {\"port\":{\"admin-state\":\"enable\",\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"}}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "physical",
                        "category": "port",
                        "create-start-time": "2024-04-23T16:59:55.392231Z",
                        "create-end-time": "2024-04-23T16:59:55.392247Z",
                        "last-modified-time": "2024-04-23T17:00:26.502858Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T17:00:26.502869Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.3']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/9']'][target-identifier-value='1/2/9']/audit-details"
                          }
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.3']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/10']'][target-identifier-value='1/2/10']",
                          "nsp-model:creation-time": "2024-04-23T16:59:55.451Z",
                          "nsp-model:last-modified-time": "2024-04-23T17:00:27.471Z"
                        },
                        "template-name": "Configure Port",
                        "target-identifier-value": "1/2/10",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.3",
                        "ne-name": "sr3",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.3']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/10']",
                        "target-data": "{\"port\":{\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"},\"admin-state\":\"enable\"}}",
                        "deployed-target-data": "{\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\" : {\"port\":{\"admin-state\":\"enable\",\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"}}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "physical",
                        "category": "port",
                        "create-start-time": "2024-04-23T16:59:55.448840Z",
                        "create-end-time": "2024-04-23T16:59:55.448851Z",
                        "last-modified-time": "2024-04-23T17:00:27.469069Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T17:00:27.469080Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.3']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/10']'][target-identifier-value='1/2/10']/audit-details"
                          }
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure EQoS'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']'][target-identifier-value='Egress100#100']",
                          "nsp-model:creation-time": "2024-04-23T17:00:14.983Z",
                          "nsp-model:last-modified-time": "2024-04-23T17:00:17.739Z"
                        },
                        "template-name": "Configure EQoS",
                        "target-identifier-value": "Egress100#100",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.2",
                        "ne-name": "sr2",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.2']",
                        "target-data": "{\"sap-egress\": {\"description\": \"Egress QoS 1\",\"fc\": [{\"fc-name\": \"be\",\"queue\": \"1\"},{\"fc-name\": \"l2\",\"queue\": \"2\"},{\"fc-name\": \"af\",\"queue\": \"3\"},{\"fc-name\": \"l1\",\"queue\": \"4\"},{\"fc-name\": \"h2\",\"queue\": \"5\"},{\"fc-name\": \"ef\",\"queue\": \"6\"},{\"fc-name\": \"h1\",\"queue\": \"7\"},{\"fc-name\": \"nc\",\"queue\": \"8\"}],\"queue\": [{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 1,\"queue-type\": \"auto-expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}},{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 2,\"queue-type\": \"expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}},{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 3,\"queue-type\": \"expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}},{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 4,\"queue-type\": \"expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}},{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 5,\"queue-type\": \"expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}},{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 6,\"queue-type\": \"expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}},{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 7,\"queue-type\": \"expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}},{\"adaptation-rule\": {\"cir\": \"min\",\"pir\": \"max\"},\"queue-id\": 8,\"queue-type\": \"expedited\",\"rate\": {\"cir\": 100,\"pir\": 1000}}]}}",
                        "deployed-target-data": "{\"icm-qos-sapegress-srqos:icm-qos-sapegress-srqos\" : {\"sap-egress\":{\"description\":\"Egress QoS 1\",\"fc\":[{\"fc-name\":\"be\",\"queue\":\"1\"},{\"fc-name\":\"l2\",\"queue\":\"2\"},{\"fc-name\":\"af\",\"queue\":\"3\"},{\"fc-name\":\"l1\",\"queue\":\"4\"},{\"fc-name\":\"h2\",\"queue\":\"5\"},{\"fc-name\":\"ef\",\"queue\":\"6\"},{\"fc-name\":\"h1\",\"queue\":\"7\"},{\"fc-name\":\"nc\",\"queue\":\"8\"}],\"queue\":[{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":1,\"queue-type\":\"auto-expedited\",\"rate\":{\"cir\":100,\"pir\":1000}},{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":2,\"queue-type\":\"expedited\",\"rate\":{\"cir\":100,\"pir\":1000}},{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":3,\"queue-type\":\"expedited\",\"rate\":{\"cir\":100,\"pir\":1000}},{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":4,\"queue-type\":\"expedited\",\"rate\":{\"cir\":100,\"pir\":1000}},{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":5,\"queue-type\":\"expedited\",\"rate\":{\"cir\":100,\"pir\":1000}},{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":6,\"queue-type\":\"expedited\",\"rate\":{\"cir\":100,\"pir\":1000}},{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":7,\"queue-type\":\"expedited\",\"rate\":{\"cir\":100,\"pir\":1000}},{\"adaptation-rule\":{\"cir\":\"min\",\"pir\":\"max\"},\"queue-id\":8,\"queue-type\":\"expedited\",\"rate\":{\"cir\":100,\"pir\":1000}}]}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "logical",
                        "category": "QoS",
                        "create-start-time": "2024-04-23T17:00:14.979897Z",
                        "create-end-time": "2024-04-23T17:00:14.979934Z",
                        "last-modified-time": "2024-04-23T17:00:17.736513Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T17:00:17.736523Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure EQoS'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']'][target-identifier-value='Egress100#100']/audit-details"
                          }
                        }
                      },
                      {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure LAG'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']'][target-identifier-value='lag-100#100']",
                          "nsp-model:creation-time": "2024-04-23T17:00:35.104Z",
                          "nsp-model:last-modified-time": "2024-04-23T17:00:37.875Z"
                        },
                        "template-name": "Configure LAG",
                        "target-identifier-value": "lag-100#100",
                        "merge": true,
                        "deployment-action": "deploy",
                        "ne-id": "72.20.20.2",
                        "ne-name": "sr2",
                        "status": "intent-aligned",
                        "message": "Alignment Successful",
                        "detailed-message": "Alignment Successful",
                        "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.2']",
                        "target-data": "{\"lag\":{\"mode\":\"access\",\"lacp\":{\"enableLacp\":false},\"per-link-hash\":{\"enablePerLinkHash\":false,\"weighted\":{\"enableWeighted\":false}},\"admin-state\":\"enable\",\"encap-type\":\"qinq\",\"port-type\":\"hs\",\"port-threshold\":{\"value\":1,\"action\":\"down\"},\"port\":[{\"port-id\":\"1/2/9\"},{\"port-id\":\"1/2/10\"}]}}",
                        "deployed-target-data": "{\"icm-logical-lag-access:icm-logical-lag-access\" : {\"lag\":{\"admin-state\":\"enable\",\"mode\":\"access\",\"lacp\":{\"enableLacp\":false},\"per-link-hash\":{\"enablePerLinkHash\":false,\"weighted\":{\"enableWeighted\":false}},\"encap-type\":\"qinq\",\"port-type\":\"hs\",\"port-threshold\":{\"value\":1,\"action\":\"down\"},\"port\":[{\"port-id\":\"1/2/9\"},{\"port-id\":\"1/2/10\"}]}}}",
                        "deployment-status": "deployed-aligned",
                        "deployment-status-message": "Alignment Successful",
                        "config-status": "modified",
                        "is-discovering": false,
                        "role": "logical",
                        "category": "LAG",
                        "create-start-time": "2024-04-23T17:00:35.101582Z",
                        "create-end-time": "2024-04-23T17:00:35.101599Z",
                        "last-modified-time": "2024-04-23T17:00:37.873310Z",
                        "created-by": "admin",
                        "last-aligned-by": "admin",
                        "last-audited-by": "admin",
                        "align-end-time": "2024-04-23T17:00:37.873321Z",
                        "audit-details": {
                          "@": {
                            "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                            "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure LAG'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']'][target-identifier-value='lag-100#100']/audit-details"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/deployments/{pathv1}": {
      "get": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "getSpecificDeployment",
        "description": "The parameters and request body are for method: getSpecificDeployment. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:deployment": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "@": {
                            "type": "object",
                            "properties": {
                              "nsp-model:schema-nodeid": {
                                "type": "string"
                              },
                              "nsp-model:identifier": {
                                "type": "string"
                              },
                              "nsp-model:creation-time": {
                                "type": "string"
                              },
                              "nsp-model:last-modified-time": {
                                "type": "string"
                              }
                            }
                          },
                          "template-name": {
                            "type": "string"
                          },
                          "target-identifier-value": {
                            "type": "string"
                          },
                          "merge": {
                            "type": "boolean"
                          },
                          "deployment-action": {
                            "type": "string"
                          },
                          "ne-id": {
                            "type": "string"
                          },
                          "ne-name": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "detailed-message": {
                            "type": "string"
                          },
                          "target": {
                            "type": "string"
                          },
                          "target-data": {
                            "type": "string"
                          },
                          "deployed-target-data": {
                            "type": "string"
                          },
                          "deployment-status": {
                            "type": "string"
                          },
                          "deployment-status-message": {
                            "type": "string"
                          },
                          "config-status": {
                            "type": "string"
                          },
                          "is-discovering": {
                            "type": "boolean"
                          },
                          "role": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          },
                          "create-start-time": {
                            "type": "string"
                          },
                          "create-end-time": {
                            "type": "string"
                          },
                          "last-modified-time": {
                            "type": "string"
                          },
                          "created-by": {
                            "type": "string"
                          },
                          "last-aligned-by": {
                            "type": "string"
                          },
                          "last-audited-by": {
                            "type": "string"
                          },
                          "align-end-time": {
                            "type": "string"
                          },
                          "audit-details": {
                            "type": "object",
                            "properties": {
                              "@": {
                                "type": "object",
                                "properties": {
                                  "nsp-model:schema-nodeid": {
                                    "type": "string"
                                  },
                                  "nsp-model:identifier": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-icm:deployment": [
                    {
                      "@": {
                        "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment",
                        "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/7']'][target-identifier-value='1/2/7']",
                        "nsp-model:creation-time": "2024-04-23T17:00:47.349Z",
                        "nsp-model:last-modified-time": "2024-04-23T17:00:48.936Z"
                      },
                      "template-name": "Configure Port",
                      "target-identifier-value": "1/2/7",
                      "merge": true,
                      "deployment-action": "deploy",
                      "ne-id": "72.20.20.2",
                      "ne-name": "sr2",
                      "status": "intent-aligned",
                      "message": "Alignment Successful",
                      "detailed-message": "Alignment Successful",
                      "target": "/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/7']",
                      "target-data": "{\"port\":{\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"},\"admin-state\":\"enable\"}}",
                      "deployed-target-data": "{\"icm-equipment-port-ethernet:icm-equipment-port-ethernet\" : {\"port\":{\"admin-state\":\"enable\",\"description\":null,\"ethernet\":{\"dot1q-etype\":null,\"pbb-etype\":null,\"qinq-etype\":null,\"hold-time\":{},\"down-when-looped\":{},\"lldp\":{\"dest-mac\":[]},\"encap-type\":\"qinq\",\"mtu\":1600,\"mode\":\"access\"}}}}",
                      "deployment-status": "deployed-aligned",
                      "deployment-status-message": "Alignment Successful",
                      "config-status": "modified",
                      "is-discovering": false,
                      "role": "physical",
                      "category": "port",
                      "create-start-time": "2024-04-23T17:00:47.345730Z",
                      "create-end-time": "2024-04-23T17:00:47.345752Z",
                      "last-modified-time": "2024-04-23T17:00:48.920467Z",
                      "created-by": "admin",
                      "last-aligned-by": "admin",
                      "last-audited-by": "admin",
                      "align-end-time": "2024-04-23T17:00:48.920482Z",
                      "audit-details": {
                        "@": {
                          "nsp-model:schema-nodeid": "/nsp-icm:icm/deployments/deployment/audit-details",
                          "nsp-model:identifier": "/nsp-icm:icm/deployments/deployment[template-name='Configure Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/7']'][target-identifier-value='1/2/7']/audit-details"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "deleteSingleDeployment",
        "description": "The parameters and request body are for method: deleteSingleDeployment. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:delete-deployments": {
      "post": {
        "tags": [
          "ConfigurationDeployments"
        ],
        "operationId": "deleteDeployments",
        "description": "The parameters and request body are for method: deleteDeployments. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Delete deployments started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:discover-deployments": {
      "post": {
        "tags": [
          "Brownfield"
        ],
        "operationId": "discoverDeployments",
        "description": "The parameters and request body are for method: discoverDeployments. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Discovery of Deployment started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/deployments/{pathv1}/audit": {
      "post": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "auditDeployment",
        "description": "The parameters and request body are for method: auditDeployment. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Deployment Audit Started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/deployments/{pathv1}/audit-details": {
      "get": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "getAuditDetails",
        "description": "The parameters and request body are for method: getAuditDetails. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:audit-details": {
                      "type": "object",
                      "properties": {
                        "@": {
                          "type": "object",
                          "properties": {
                            "nsp-model:schema-nodeid": {
                              "type": "string"
                            },
                            "nsp-model:identifier": {
                              "type": "string"
                            },
                            "nsp-model:network-id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "nsp-icm:audit-details": {
                    "@": {
                      "nsp-model:schema-nodeid": "/nsp-network:network/node/node-root/nsp-icm:icm/deployments/deployment/audit-details",
                      "nsp-model:identifier": "/nsp-network:network/node[node-id='72.20.20.2']/node-root/nsp-icm:icm/deployments/deployment[template-name='Gold Port'][target='/nsp-equipment:network/network-element[ne-id='72.20.20.2']/hardware-component/port[component-id='shelf=1/cardSlot=1/card=1/mdaSlot=2/mda=2/port=1/2/3']'][target-identifier-value='1/2/3']/audit-details",
                      "nsp-model:network-id": "72.20.20.2"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/deployments/{pathv1}/align-config": {
      "post": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "alignConfigurationDeployment",
        "description": "The parameters and request body are for method: alignConfigurationDeployment. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "message": "Alignment Started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/templates/{pathv1}/audit": {
      "post": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "auditTemplate",
        "description": "The parameters and request body are for method: auditTemplate. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Template Audit Started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/templates/{pathv1}/deployment-count-by-status": {
      "post": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "checkAuditStatusCount",
        "description": "The parameters and request body are for method: checkAuditStatusCount. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "auditing-count": {
                          "type": "number"
                        },
                        "misaligned-count": {
                          "type": "number"
                        },
                        "associate-failed-count": {
                          "type": "number"
                        },
                        "aligned-count": {
                          "type": "number"
                        },
                        "migrating-count": {
                          "type": "number"
                        },
                        "total-count": {
                          "type": "number"
                        },
                        "aligning-count": {
                          "type": "number"
                        },
                        "deployment-failed-count": {
                          "type": "number"
                        },
                        "saved-count": {
                          "type": "number"
                        },
                        "not-started-count": {
                          "type": "number"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "auditing-count": 0,
                    "misaligned-count": 1,
                    "associate-failed-count": 0,
                    "aligned-count": 4,
                    "migrating-count": 0,
                    "total-count": 15,
                    "aligning-count": 0,
                    "deployment-failed-count": 0,
                    "saved-count": 10,
                    "not-started-count": 0
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/templates/{pathv1}/align-config": {
      "post": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "alignConfigurationTemplateAllDeployments",
        "description": "The parameters and request body are for method: alignConfigurationTemplateAllDeployments. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Template Alignment Started."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-icm:icm/templates/{pathv1}/align-misaligned-config": {
      "post": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "alignConfigurationTemplateMisalignedDeployments",
        "description": "The parameters and request body are for method: alignConfigurationTemplateMisalignedDeployments. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Template Alignment Started on Mis-Aligned Deployments."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:ne-audit-align": {
      "post": {
        "tags": [
          "AuditAndAlignment"
        ],
        "operationId": "auditNodeDeployments",
        "description": "The parameters and request body are for method: auditNodeDeployments. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "message": "Started audit operation on Deployments present on the list of NEs"
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:clone-template": {
      "post": {
        "tags": [
          "TemplateMigration"
        ],
        "operationId": "cloneTemplate",
        "description": "The parameters and request body are for method: cloneTemplate. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Template Gold Port is cloned successfully."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/operations/nsp-icm:migrate-deployments": {
      "post": {
        "tags": [
          "TemplateMigration"
        ],
        "operationId": "migrateDeployments",
        "description": "The parameters and request body are for method: migrateDeployments. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-icm:output": {
                      "type": "object",
                      "properties": {
                        "status-code": {
                          "type": "number"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    },
                    "statusCode": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "nsp-icm:output": {
                    "status-code": 200,
                    "message": "Migration of Deployments started. Deployments with Not-Started, Auditing, Aligning, Migrating and Saved status will be ignored."
                  },
                  "statusCode": "OK"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "indeterminate body object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/network-element": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getNE",
        "description": "The parameters and request body are for method: getNE. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/{pathv1}": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getSpecificNE",
        "description": "The parameters and request body are for method: getSpecificNE. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "depth",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/network-element/hardware-component/shelf": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getShelf",
        "description": "The parameters and request body are for method: getShelf. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/{pathv1}/hardware-component/{pathv2}": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getSpecificShelf",
        "description": "The parameters and request body are for method: getSpecificShelf. Same endpoint also used in methods:<br> getSpecificNECards (networkElement : string,card : string)<br> getPortFromSpecificNE (networkElement : string,port : string)",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/network-element/hardware-component/card": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getCard",
        "description": "The parameters and request body are for method: getCard. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/network-element/hardware-component/port": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getPort",
        "description": "The parameters and request body are for method: getPort. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/{pathv1}/hardware-component/{pathv2}/transceiver-details": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getPortFromSpecificNETransceiverDetails",
        "description": "The parameters and request body are for method: getPortFromSpecificNETransceiverDetails. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:/network/network-element/lag": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getLags",
        "description": "The parameters and request body are for method: getLags. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/{pathv1}/lag": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getSpecificNELag",
        "description": "The parameters and request body are for method: getSpecificNELag. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:network/{pathv1}/{pathv2}": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getSpecificNELagWithFields",
        "description": "The parameters and request body are for method: getSpecificNELagWithFields. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "result",
                  "type": "object"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    },
    "/restconf/data/nsp-equipment:/network/network-element/hardware-component/radio": {
      "get": {
        "tags": [
          "NetworkInventoryRestconfAPI"
        ],
        "operationId": "getRadio",
        "description": "The parameters and request body are for method: getRadio. Same endpoint also used in methods:",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nsp-equipment:radio": {
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "nsp-equipment:radio": []
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "example": {}
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {}
  }
}